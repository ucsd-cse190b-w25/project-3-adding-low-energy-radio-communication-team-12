
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000402c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080041bc  080041bc  000051bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004250  08004250  000061cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004258  08004258  000061cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004258  08004258  00005258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800425c  0800425c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08004260  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001cc  0800442c  000061cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800442c  000064c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b35f  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223f  00000000  00000000  0001155b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  000137a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ad  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027447  00000000  00000000  000149ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b074  00000000  00000000  0003bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f10ed  00000000  00000000  00046e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d38  00000000  00000000  00137f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0013acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041a4 	.word	0x080041a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	080041a4 	.word	0x080041a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000276:	2006      	movs	r0, #6
 8000278:	f003 fad0 	bl	800381c <malloc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b70      	ldr	r3, [pc, #448]	@ (8000444 <ble_init+0x1d4>)
 8000282:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 8000284:	bf00      	nop
 8000286:	4b70      	ldr	r3, [pc, #448]	@ (8000448 <ble_init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800028e:	4b6d      	ldr	r3, [pc, #436]	@ (8000444 <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2106      	movs	r1, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f91f 	bl	80004d8 <fetchBleEvent>
 800029a:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002a2:	4b68      	ldr	r3, [pc, #416]	@ (8000444 <ble_init+0x1d4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2206      	movs	r2, #6
 80002a8:	4968      	ldr	r1, [pc, #416]	@ (800044c <ble_init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f99e 	bl	80005ec <checkEventResp>
 80002b0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002b8:	4b65      	ldr	r3, [pc, #404]	@ (8000450 <ble_init+0x1e0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b63      	ldr	r3, [pc, #396]	@ (8000450 <ble_init+0x1e0>)
 80002c4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f001 fb0e 	bl	80018e8 <HAL_Delay>
	 free(rxEvent);
 80002cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000444 <ble_init+0x1d4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 faab 	bl	800382c <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2307      	movs	r3, #7
 80002dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000454 <ble_init+0x1e4>)
 80002de:	2104      	movs	r1, #4
 80002e0:	485d      	ldr	r0, [pc, #372]	@ (8000458 <ble_init+0x1e8>)
 80002e2:	f000 fab9 	bl	8000858 <BLE_command>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002ec:	4b58      	ldr	r3, [pc, #352]	@ (8000450 <ble_init+0x1e0>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	@ (8000450 <ble_init+0x1e0>)
 80002f8:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80002fa:	4b52      	ldr	r3, [pc, #328]	@ (8000444 <ble_init+0x1d4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fa94 	bl	800382c <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2307      	movs	r3, #7
 800030a:	4a54      	ldr	r2, [pc, #336]	@ (800045c <ble_init+0x1ec>)
 800030c:	2107      	movs	r1, #7
 800030e:	4854      	ldr	r0, [pc, #336]	@ (8000460 <ble_init+0x1f0>)
 8000310:	f000 faa2 	bl	8000858 <BLE_command>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d11b      	bne.n	8000352 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800031a:	4b4d      	ldr	r3, [pc, #308]	@ (8000450 <ble_init+0x1e0>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b4a      	ldr	r3, [pc, #296]	@ (8000450 <ble_init+0x1e0>)
 8000326:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000328:	4b46      	ldr	r3, [pc, #280]	@ (8000444 <ble_init+0x1d4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3307      	adds	r3, #7
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b4c      	ldr	r3, [pc, #304]	@ (8000464 <ble_init+0x1f4>)
 8000334:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000336:	4b43      	ldr	r3, [pc, #268]	@ (8000444 <ble_init+0x1d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3309      	adds	r3, #9
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b49      	ldr	r3, [pc, #292]	@ (8000468 <ble_init+0x1f8>)
 8000342:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000344:	4b3f      	ldr	r3, [pc, #252]	@ (8000444 <ble_init+0x1d4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	330b      	adds	r3, #11
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b47      	ldr	r3, [pc, #284]	@ (800046c <ble_init+0x1fc>)
 8000350:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <ble_init+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f003 fa68 	bl	800382c <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800035c:	4b44      	ldr	r3, [pc, #272]	@ (8000470 <ble_init+0x200>)
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2307      	movs	r3, #7
 8000362:	2200      	movs	r2, #0
 8000364:	4940      	ldr	r1, [pc, #256]	@ (8000468 <ble_init+0x1f8>)
 8000366:	483f      	ldr	r0, [pc, #252]	@ (8000464 <ble_init+0x1f4>)
 8000368:	f000 fb3c 	bl	80009e4 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800036c:	4b38      	ldr	r3, [pc, #224]	@ (8000450 <ble_init+0x1e0>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <ble_init+0x1e0>)
 8000378:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800037a:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <ble_init+0x1d4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fa54 	bl	800382c <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2307      	movs	r3, #7
 800038a:	4a3a      	ldr	r2, [pc, #232]	@ (8000474 <ble_init+0x204>)
 800038c:	2110      	movs	r1, #16
 800038e:	483a      	ldr	r0, [pc, #232]	@ (8000478 <ble_init+0x208>)
 8000390:	f000 fa62 	bl	8000858 <BLE_command>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <ble_init+0x1e0>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <ble_init+0x1e0>)
 80003a6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003a8:	4b26      	ldr	r3, [pc, #152]	@ (8000444 <ble_init+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fa3d 	bl	800382c <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003b2:	2300      	movs	r3, #0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2307      	movs	r3, #7
 80003b8:	4a30      	ldr	r2, [pc, #192]	@ (800047c <ble_init+0x20c>)
 80003ba:	2106      	movs	r1, #6
 80003bc:	4830      	ldr	r0, [pc, #192]	@ (8000480 <ble_init+0x210>)
 80003be:	f000 fa4b 	bl	8000858 <BLE_command>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003c8:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <ble_init+0x1e0>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <ble_init+0x1e0>)
 80003d4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <ble_init+0x1d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fa26 	bl	800382c <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2307      	movs	r3, #7
 80003e6:	4a27      	ldr	r2, [pc, #156]	@ (8000484 <ble_init+0x214>)
 80003e8:	2124      	movs	r1, #36	@ 0x24
 80003ea:	4827      	ldr	r0, [pc, #156]	@ (8000488 <ble_init+0x218>)
 80003ec:	f000 fa34 	bl	8000858 <BLE_command>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <ble_init+0x1e0>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <ble_init+0x1e0>)
 8000402:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <ble_init+0x1d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fa0f 	bl	800382c <free>
 
	 //This will start the advertisment,
	 setConnectable();
 800040e:	f000 f9a3 	bl	8000758 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000412:	2207      	movs	r2, #7
 8000414:	491d      	ldr	r1, [pc, #116]	@ (800048c <ble_init+0x21c>)
 8000416:	481e      	ldr	r0, [pc, #120]	@ (8000490 <ble_init+0x220>)
 8000418:	f000 fa6a 	bl	80008f0 <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800041c:	2310      	movs	r3, #16
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2314      	movs	r3, #20
 8000422:	4a1a      	ldr	r2, [pc, #104]	@ (800048c <ble_init+0x21c>)
 8000424:	491b      	ldr	r1, [pc, #108]	@ (8000494 <ble_init+0x224>)
 8000426:	481c      	ldr	r0, [pc, #112]	@ (8000498 <ble_init+0x228>)
 8000428:	f000 fa9a 	bl	8000960 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800042c:	2304      	movs	r3, #4
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a16      	ldr	r2, [pc, #88]	@ (800048c <ble_init+0x21c>)
 8000434:	4919      	ldr	r1, [pc, #100]	@ (800049c <ble_init+0x22c>)
 8000436:	481a      	ldr	r0, [pc, #104]	@ (80004a0 <ble_init+0x230>)
 8000438:	f000 fa92 	bl	8000960 <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800043c:	bf00      	nop
 }
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000300 	.word	0x20000300
 8000448:	20000304 	.word	0x20000304
 800044c:	20000000 	.word	0x20000000
 8000450:	200002fe 	.word	0x200002fe
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000008 	.word	0x20000008
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000014 	.word	0x20000014
 8000464:	200001e8 	.word	0x200001e8
 8000468:	200001ec 	.word	0x200001ec
 800046c:	200001f0 	.word	0x200001f0
 8000470:	20000124 	.word	0x20000124
 8000474:	20000034 	.word	0x20000034
 8000478:	20000024 	.word	0x20000024
 800047c:	20000044 	.word	0x20000044
 8000480:	2000003c 	.word	0x2000003c
 8000484:	2000007c 	.word	0x2000007c
 8000488:	20000058 	.word	0x20000058
 800048c:	200002f4 	.word	0x200002f4
 8000490:	2000012c 	.word	0x2000012c
 8000494:	200002fc 	.word	0x200002fc
 8000498:	2000014c 	.word	0x2000014c
 800049c:	200002f8 	.word	0x200002f8
 80004a0:	2000013c 	.word	0x2000013c

080004a4 <standbyBle>:
 
 void standbyBle() {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af02      	add	r7, sp, #8
	  //STANDBY MODE
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
 80004aa:	2300      	movs	r3, #0
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2307      	movs	r3, #7
 80004b0:	4a06      	ldr	r2, [pc, #24]	@ (80004cc <standbyBle+0x28>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	4806      	ldr	r0, [pc, #24]	@ (80004d0 <standbyBle+0x2c>)
 80004b6:	f000 f9cf 	bl	8000858 <BLE_command>
	  }
	  free(rxEvent);
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <standbyBle+0x30>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 f9b4 	bl	800382c <free>
 }
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000050 	.word	0x20000050
 80004d0:	2000004c 	.word	0x2000004c
 80004d4:	20000300 	.word	0x20000300

080004d8 <fetchBleEvent>:
 
 int fetchBleEvent(uint8_t *container, int size){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	@ 0x30
 80004dc:	af02      	add	r7, sp, #8
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004e2:	4a3d      	ldr	r2, [pc, #244]	@ (80005d8 <fetchBleEvent+0x100>)
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ec:	6018      	str	r0, [r3, #0]
 80004ee:	3304      	adds	r3, #4
 80004f0:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004f2:	2140      	movs	r1, #64	@ 0x40
 80004f4:	4839      	ldr	r0, [pc, #228]	@ (80005dc <fetchBleEvent+0x104>)
 80004f6:	f001 fcf7 	bl	8001ee8 <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d065      	beq.n	80005cc <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 8000500:	2005      	movs	r0, #5
 8000502:	f001 f9f1 	bl	80018e8 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050c:	4834      	ldr	r0, [pc, #208]	@ (80005e0 <fetchBleEvent+0x108>)
 800050e:	f001 fd03 	bl	8001f18 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000512:	f107 0210 	add.w	r2, r7, #16
 8000516:	f107 0118 	add.w	r1, r7, #24
 800051a:	2301      	movs	r3, #1
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2305      	movs	r3, #5
 8000520:	4830      	ldr	r0, [pc, #192]	@ (80005e4 <fetchBleEvent+0x10c>)
 8000522:	f002 fdf5 	bl	8003110 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800052c:	482c      	ldr	r0, [pc, #176]	@ (80005e0 <fetchBleEvent+0x108>)
 800052e:	f001 fcf3 	bl	8001f18 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f001 f9d8 	bl	80018e8 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053e:	4828      	ldr	r0, [pc, #160]	@ (80005e0 <fetchBleEvent+0x108>)
 8000540:	f001 fcea 	bl	8001f18 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000544:	f107 0210 	add.w	r2, r7, #16
 8000548:	f107 0118 	add.w	r1, r7, #24
 800054c:	2301      	movs	r3, #1
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2305      	movs	r3, #5
 8000552:	4824      	ldr	r0, [pc, #144]	@ (80005e4 <fetchBleEvent+0x10c>)
 8000554:	f002 fddc 	bl	8003110 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000558:	7cfb      	ldrb	r3, [r7, #19]
 800055a:	461a      	mov	r2, r3
 800055c:	7d3b      	ldrb	r3, [r7, #20]
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	4313      	orrs	r3, r2
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000564:	23ff      	movs	r3, #255	@ 0xff
 8000566:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 8000568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	dd01      	ble.n	8000574 <fetchBleEvent+0x9c>
	   dataSize=size;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000576:	2b00      	cmp	r3, #0
 8000578:	dd1f      	ble.n	80005ba <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
 800057e:	e00d      	b.n	800059c <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	441a      	add	r2, r3
 8000586:	f107 010f 	add.w	r1, r7, #15
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	4814      	ldr	r0, [pc, #80]	@ (80005e4 <fetchBleEvent+0x10c>)
 8000592:	f002 fdbd 	bl	8003110 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000596:	6a3b      	ldr	r3, [r7, #32]
 8000598:	3301      	adds	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
 800059c:	6a3a      	ldr	r2, [r7, #32]
 800059e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dbed      	blt.n	8000580 <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <fetchBleEvent+0x108>)
 80005ac:	f001 fcb4 	bl	8001f18 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <fetchBleEvent+0x110>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e00a      	b.n	80005d0 <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <fetchBleEvent+0x108>)
 80005c2:	f001 fca9 	bl	8001f18 <HAL_GPIO_WritePin>
		 return -1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ca:	e001      	b.n	80005d0 <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005cc:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005d0:	4618      	mov	r0, r3
 80005d2:	3728      	adds	r7, #40	@ 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	080041bc 	.word	0x080041bc
 80005dc:	48001000 	.word	0x48001000
 80005e0:	48000c00 	.word	0x48000c00
 80005e4:	20000314 	.word	0x20000314
 80005e8:	20000304 	.word	0x20000304

080005ec <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005ec:	b480      	push	{r7}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e00f      	b.n	8000622 <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	781a      	ldrb	r2, [r3, #0]
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	440b      	add	r3, r1
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d002      	beq.n	800061c <checkEventResp+0x30>
			 return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800061a:	e007      	b.n	800062c <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	429a      	cmp	r2, r3
 8000628:	dbeb      	blt.n	8000602 <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 800062a:	2300      	movs	r3, #0
 }
 800062c:	4618      	mov	r0, r3
 800062e:	371c      	adds	r7, #28
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000642:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <sendCommand+0x88>)
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064c:	6018      	str	r0, [r3, #0]
 800064e:	3304      	adds	r3, #4
 8000650:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000658:	481a      	ldr	r0, [pc, #104]	@ (80006c4 <sendCommand+0x8c>)
 800065a:	f001 fc5d 	bl	8001f18 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800065e:	f107 0208 	add.w	r2, r7, #8
 8000662:	f107 0110 	add.w	r1, r7, #16
 8000666:	2301      	movs	r3, #1
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2305      	movs	r3, #5
 800066c:	4816      	ldr	r0, [pc, #88]	@ (80006c8 <sendCommand+0x90>)
 800066e:	f002 fd4f 	bl	8003110 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	7a7a      	ldrb	r2, [r7, #9]
 8000678:	4313      	orrs	r3, r2
 800067a:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 800067c:	69ba      	ldr	r2, [r7, #24]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	db09      	blt.n	8000698 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b29a      	uxth	r2, r3
 8000688:	2301      	movs	r3, #1
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	480e      	ldr	r0, [pc, #56]	@ (80006c8 <sendCommand+0x90>)
 800068e:	f002 fbca 	bl	8002e26 <HAL_SPI_Transmit>
		 result=0;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
 8000696:	e002      	b.n	800069e <sendCommand+0x66>
	   }else{
		 result=-1;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069c:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <sendCommand+0x8c>)
 80006a6:	f001 fc37 	bl	8001f18 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <sendCommand+0x94>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1cd      	bne.n	8000652 <sendCommand+0x1a>
 
 }
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080041c4 	.word	0x080041c4
 80006c4:	48000c00 	.word	0x48000c00
 80006c8:	20000314 	.word	0x20000314
 80006cc:	20000304 	.word	0x20000304

080006d0 <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006da:	217f      	movs	r1, #127	@ 0x7f
 80006dc:	4819      	ldr	r0, [pc, #100]	@ (8000744 <catchBLE+0x74>)
 80006de:	f7ff fefb 	bl	80004d8 <fetchBleEvent>
 80006e2:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d128      	bne.n	800073c <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006ea:	2203      	movs	r2, #3
 80006ec:	4916      	ldr	r1, [pc, #88]	@ (8000748 <catchBLE+0x78>)
 80006ee:	4815      	ldr	r0, [pc, #84]	@ (8000744 <catchBLE+0x74>)
 80006f0:	f7ff ff7c 	bl	80005ec <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006f4:	2205      	movs	r2, #5
 80006f6:	4915      	ldr	r1, [pc, #84]	@ (800074c <catchBLE+0x7c>)
 80006f8:	4812      	ldr	r0, [pc, #72]	@ (8000744 <catchBLE+0x74>)
 80006fa:	f7ff ff77 	bl	80005ec <checkEventResp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d109      	bne.n	8000718 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <catchBLE+0x74>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	b21a      	sxth	r2, r3
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <catchBLE+0x80>)
 800070c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <catchBLE+0x74>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	b21a      	sxth	r2, r3
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <catchBLE+0x80>)
 8000716:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 8000718:	2205      	movs	r2, #5
 800071a:	490e      	ldr	r1, [pc, #56]	@ (8000754 <catchBLE+0x84>)
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <catchBLE+0x74>)
 800071e:	f7ff ff65 	bl	80005ec <checkEventResp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d109      	bne.n	800073c <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <catchBLE+0x74>)
 800072a:	795b      	ldrb	r3, [r3, #5]
 800072c:	b21a      	sxth	r2, r3
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <catchBLE+0x80>)
 8000730:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000732:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <catchBLE+0x74>)
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	b21a      	sxth	r2, r3
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <catchBLE+0x80>)
 800073a:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200001f4 	.word	0x200001f4
 8000748:	200000fc 	.word	0x200000fc
 800074c:	20000108 	.word	0x20000108
 8000750:	2000015c 	.word	0x2000015c
 8000754:	20000110 	.word	0x20000110

08000758 <setConnectable>:
 
 void setConnectable(){
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800075e:	200c      	movs	r0, #12
 8000760:	f003 f85c 	bl	800381c <malloc>
 8000764:	4603      	mov	r3, r0
 8000766:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4a36      	ldr	r2, [pc, #216]	@ (8000844 <setConnectable+0xec>)
 800076c:	6810      	ldr	r0, [r2, #0]
 800076e:	6018      	str	r0, [r3, #0]
 8000770:	8891      	ldrh	r1, [r2, #4]
 8000772:	7992      	ldrb	r2, [r2, #6]
 8000774:	8099      	strh	r1, [r3, #4]
 8000776:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3308      	adds	r3, #8
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3309      	adds	r3, #9
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	330a      	adds	r3, #10
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	330b      	adds	r3, #11
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3307      	adds	r3, #7
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
 
 
		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80007a0:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <setConnectable+0xf0>)
 80007a2:	2208      	movs	r2, #8
 80007a4:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <setConnectable+0xf0>)
 80007a8:	2215      	movs	r2, #21
 80007aa:	70da      	strb	r2, [r3, #3]
 
		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80007ac:	2019      	movs	r0, #25
 80007ae:	f003 f835 	bl	800381c <malloc>
 80007b2:	4603      	mov	r3, r0
 80007b4:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <setConnectable+0xf0>)
 80007ba:	461c      	mov	r4, r3
 80007bc:	4613      	mov	r3, r2
 80007be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007c0:	6020      	str	r0, [r4, #0]
 80007c2:	6061      	str	r1, [r4, #4]
 80007c4:	60a2      	str	r2, [r4, #8]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	330d      	adds	r3, #13
 80007ce:	220c      	movs	r2, #12
 80007d0:	68f9      	ldr	r1, [r7, #12]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 f958 	bl	8003a88 <memcpy>
 
		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007d8:	2119      	movs	r1, #25
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f7ff ff2c 	bl	8000638 <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 80007e0:	2007      	movs	r0, #7
 80007e2:	f003 f81b 	bl	800381c <malloc>
 80007e6:	4603      	mov	r3, r0
 80007e8:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 80007ea:	bf00      	nop
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <setConnectable+0xf4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0fb      	beq.n	80007ec <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 80007f4:	2107      	movs	r1, #7
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fe6e 	bl	80004d8 <fetchBleEvent>
 80007fc:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10f      	bne.n	8000824 <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000804:	2207      	movs	r2, #7
 8000806:	4912      	ldr	r1, [pc, #72]	@ (8000850 <setConnectable+0xf8>)
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff feef 	bl	80005ec <checkEventResp>
 800080e:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d106      	bne.n	8000824 <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <setConnectable+0xfc>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <setConnectable+0xfc>)
 8000822:	801a      	strh	r2, [r3, #0]
		}
		}
 
		free(rxEvent);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f003 f801 	bl	800382c <free>
		free(discoverableCommand);
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f002 fffe 	bl	800382c <free>
		free(localname);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f002 fffb 	bl	800382c <free>
		HAL_Delay(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f001 f856 	bl	80018e8 <HAL_Delay>
 }
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	bd90      	pop	{r4, r7, pc}
 8000844:	20000124 	.word	0x20000124
 8000848:	20000084 	.word	0x20000084
 800084c:	20000304 	.word	0x20000304
 8000850:	20000094 	.word	0x20000094
 8000854:	200002fe 	.word	0x200002fe

08000858 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 8000866:	68b9      	ldr	r1, [r7, #8]
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f7ff fee5 	bl	8000638 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	005a      	lsls	r2, r3, #1
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f002 ffd0 	bl	800381c <malloc>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <BLE_command+0x90>)
 8000882:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000888:	e007      	b.n	800089a <BLE_command+0x42>
			contatore++;
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	3301      	adds	r3, #1
 800088e:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000896:	4293      	cmp	r3, r2
 8000898:	dc07      	bgt.n	80008aa <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800089a:	2140      	movs	r1, #64	@ 0x40
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <BLE_command+0x94>)
 800089e:	f001 fb23 	bl	8001ee8 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f0      	beq.n	800088a <BLE_command+0x32>
 80008a8:	e000      	b.n	80008ac <BLE_command+0x54>
				break;
 80008aa:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <BLE_command+0x90>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	005a      	lsls	r2, r3, #1
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4619      	mov	r1, r3
 80008ba:	f7ff fe0d 	bl	80004d8 <fetchBleEvent>
 80008be:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d107      	bne.n	80008d6 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <BLE_command+0x90>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe8c 	bl	80005ec <checkEventResp>
 80008d4:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008d6:	200a      	movs	r0, #10
 80008d8:	f001 f806 	bl	80018e8 <HAL_Delay>
 
 
	 return response;
 80008dc:	697b      	ldr	r3, [r7, #20]
 }
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000300 	.word	0x20000300
 80008ec:	48001000 	.word	0x48001000

080008f0 <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <addService+0x60>)
 80008fe:	2210      	movs	r2, #16
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	4618      	mov	r0, r3
 8000904:	f003 f8c0 	bl	8003a88 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <addService+0x64>)
 800090e:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000910:	2301      	movs	r3, #1
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2307      	movs	r3, #7
 8000916:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <addService+0x68>)
 8000918:	2117      	movs	r1, #23
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <addService+0x64>)
 800091c:	f7ff ff9c 	bl	8000858 <BLE_command>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10a      	bne.n	800093c <addService+0x4c>
			handle[0]=rxEvent[7];
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <addService+0x6c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	79da      	ldrb	r2, [r3, #7]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <addService+0x6c>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	3301      	adds	r3, #1
 8000938:	7a12      	ldrb	r2, [r2, #8]
 800093a:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <addService+0x6c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f002 ff73 	bl	800382c <free>
 }
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000a1 	.word	0x200000a1
 8000954:	2000009c 	.word	0x2000009c
 8000958:	200000b4 	.word	0x200000b4
 800095c:	20000300 	.word	0x20000300

08000960 <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af02      	add	r7, sp, #8
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <addCharacteristic+0x74>)
 8000970:	2210      	movs	r2, #16
 8000972:	68f9      	ldr	r1, [r7, #12]
 8000974:	4618      	mov	r0, r3
 8000976:	f003 f887 	bl	8003a88 <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <addCharacteristic+0x78>)
 8000980:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	785a      	ldrb	r2, [r3, #1]
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <addCharacteristic+0x78>)
 8000988:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 800098a:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <addCharacteristic+0x78>)
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000990:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <addCharacteristic+0x78>)
 8000992:	7e3b      	ldrb	r3, [r7, #24]
 8000994:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000996:	2301      	movs	r3, #1
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2307      	movs	r3, #7
 800099c:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <addCharacteristic+0x7c>)
 800099e:	211e      	movs	r1, #30
 80009a0:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <addCharacteristic+0x78>)
 80009a2:	f7ff ff59 	bl	8000858 <BLE_command>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10a      	bne.n	80009c2 <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <addCharacteristic+0x80>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	79da      	ldrb	r2, [r3, #7]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <addCharacteristic+0x80>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	3301      	adds	r3, #1
 80009be:	7a12      	ldrb	r2, [r2, #8]
 80009c0:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 80009c2:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <addCharacteristic+0x80>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 ff30 	bl	800382c <free>
 }
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000c3 	.word	0x200000c3
 80009d8:	200000bc 	.word	0x200000bc
 80009dc:	200000dc 	.word	0x200000dc
 80009e0:	20000300 	.word	0x20000300

080009e4 <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	3306      	adds	r3, #6
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <updateCharValue+0x9c>)
 80009fc:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <updateCharValue+0x9c>)
 8000a04:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	785a      	ldrb	r2, [r3, #1]
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <updateCharValue+0x9c>)
 8000a0c:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <updateCharValue+0x9c>)
 8000a14:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	785a      	ldrb	r2, [r3, #1]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <updateCharValue+0x9c>)
 8000a1c:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <updateCharValue+0x9c>)
 8000a24:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <updateCharValue+0x9c>)
 8000a2c:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	330a      	adds	r3, #10
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fef2 	bl	800381c <malloc>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	4910      	ldr	r1, [pc, #64]	@ (8000a80 <updateCharValue+0x9c>)
 8000a40:	6978      	ldr	r0, [r7, #20]
 8000a42:	f003 f821 	bl	8003a88 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	330a      	adds	r3, #10
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	6a39      	ldr	r1, [r7, #32]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 f81a 	bl	8003a88 <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f103 010a 	add.w	r1, r3, #10
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2307      	movs	r3, #7
 8000a60:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <updateCharValue+0xa0>)
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff fef8 	bl	8000858 <BLE_command>
 
	 free(commandComplete);
 8000a68:	6978      	ldr	r0, [r7, #20]
 8000a6a:	f002 fedf 	bl	800382c <free>
	 free(rxEvent);
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <updateCharValue+0xa4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 feda 	bl	800382c <free>
 }
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000e4 	.word	0x200000e4
 8000a84:	200000dc 	.word	0x200000dc
 8000a88:	20000300 	.word	0x20000300

08000a8c <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a92:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <disconnectBLE+0x98>)
 8000a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a9c:	d105      	bne.n	8000aaa <disconnectBLE+0x1e>
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <disconnectBLE+0x98>)
 8000aa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000aa8:	d037      	beq.n	8000b1a <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <disconnectBLE+0x9c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <disconnectBLE+0x98>)
 8000ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <disconnectBLE+0x98>)
 8000abc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000ac4:	2313      	movs	r3, #19
 8000ac6:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000ac8:	1d38      	adds	r0, r7, #4
 8000aca:	2300      	movs	r3, #0
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2307      	movs	r3, #7
 8000ad0:	4a16      	ldr	r2, [pc, #88]	@ (8000b2c <disconnectBLE+0xa0>)
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	f7ff fec0 	bl	8000858 <BLE_command>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11e      	bne.n	8000b1c <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000ade:	217f      	movs	r1, #127	@ 0x7f
 8000ae0:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <disconnectBLE+0xa4>)
 8000ae2:	f7ff fcf9 	bl	80004d8 <fetchBleEvent>
 8000ae6:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10f      	bne.n	8000b0e <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000aee:	2204      	movs	r2, #4
 8000af0:	4910      	ldr	r1, [pc, #64]	@ (8000b34 <disconnectBLE+0xa8>)
 8000af2:	480f      	ldr	r0, [pc, #60]	@ (8000b30 <disconnectBLE+0xa4>)
 8000af4:	f7ff fd7a 	bl	80005ec <checkEventResp>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d107      	bne.n	8000b0e <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <disconnectBLE+0x98>)
 8000b00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b04:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <disconnectBLE+0x98>)
 8000b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0c:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <disconnectBLE+0xac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fe8a 	bl	800382c <free>
 8000b18:	e000      	b.n	8000b1c <disconnectBLE+0x90>
		return;
 8000b1a:	bf00      	nop
	 }
 }
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000015c 	.word	0x2000015c
 8000b28:	200000f4 	.word	0x200000f4
 8000b2c:	20000100 	.word	0x20000100
 8000b30:	200001f4 	.word	0x200001f4
 8000b34:	200000fc 	.word	0x200000fc
 8000b38:	20000300 	.word	0x20000300

08000b3c <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d102      	bne.n	8000b52 <setDiscoverability+0x16>
		 setConnectable();
 8000b4c:	f7ff fe04 	bl	8000758 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 8000b50:	e00f      	b.n	8000b72 <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10c      	bne.n	8000b72 <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <setDiscoverability+0x40>)
 8000b60:	2104      	movs	r1, #4
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <setDiscoverability+0x44>)
 8000b64:	f7ff fe78 	bl	8000858 <BLE_command>
		 free(rxEvent);
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <setDiscoverability+0x48>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fe5d 	bl	800382c <free>
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000011c 	.word	0x2000011c
 8000b80:	20000118 	.word	0x20000118
 8000b84:	20000300 	.word	0x20000300

08000b88 <i2c_init>:
#include <i2c.h>

// PB10 and PB11
// Master Mode; > 400khz
void i2c_init() {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;;   // Enable I2C2 clock
 8000b8c:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <i2c_init+0xa0>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b90:	4a25      	ldr	r2, [pc, #148]	@ (8000c28 <i2c_init+0xa0>)
 8000b92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b96:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // Enable GPIOB clock
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <i2c_init+0xa0>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	4a22      	ldr	r2, [pc, #136]	@ (8000c28 <i2c_init+0xa0>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set PB10 and PB11 to Alternate Function mode
    GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);  // Clear mode bits
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <i2c_init+0xa4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <i2c_init+0xa4>)
 8000baa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bae:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);  // Set Alternate Function mode
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <i2c_init+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c2c <i2c_init+0xa4>)
 8000bb6:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000bba:	6013      	str	r3, [r2, #0]

    // Set Alternate Function to I2C2 (AF4 for STM32F4)
    GPIOB->AFR[1] |= (4 << 8) | (4 << 12);
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <i2c_init+0xa4>)
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <i2c_init+0xa4>)
 8000bc2:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000bc6:	6253      	str	r3, [r2, #36]	@ 0x24

    // Enable Open-Drain Mode for I2C
    GPIOB->OTYPER |= GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <i2c_init+0xa4>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a17      	ldr	r2, [pc, #92]	@ (8000c2c <i2c_init+0xa4>)
 8000bce:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000bd2:	6053      	str	r3, [r2, #4]

    // Set pins to High-Speed Mode
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <i2c_init+0xa4>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <i2c_init+0xa4>)
 8000bda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bde:	6093      	str	r3, [r2, #8]

    // Enable Pull-Up Resistors
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);  // Clear previous settings
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <i2c_init+0xa4>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <i2c_init+0xa4>)
 8000be6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bea:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);  // Enable Pull-Up
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <i2c_init+0xa4>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <i2c_init+0xa4>)
 8000bf2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000bf6:	60d3      	str	r3, [r2, #12]

    //Configuration of I2C2
    I2C2->CR1 &= ~I2C_CR1_PE; //Disables I2C2
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <i2c_init+0xa8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <i2c_init+0xa8>)
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

    I2C2->ICR = I2C_ICR_NACKCF | I2C_ICR_STOPCF | I2C_ICR_BERRCF;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <i2c_init+0xa8>)
 8000c06:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000c0a:	61da      	str	r2, [r3, #28]

    I2C2->TIMINGR = 0x00300F33; // 400 kHz
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <i2c_init+0xa8>)
 8000c0e:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <i2c_init+0xac>)
 8000c10:	611a      	str	r2, [r3, #16]

    I2C2->CR1 |= I2C_CR1_PE; // Enables I2C2 
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <i2c_init+0xa8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <i2c_init+0xa8>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	40005800 	.word	0x40005800
 8000c34:	00300f33 	.word	0x00300f33

08000c38 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	603a      	str	r2, [r7, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	460b      	mov	r3, r1
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	717b      	strb	r3, [r7, #5]

    // Wait until I2C is not busy
    while (I2C2->ISR & I2C_ISR_BUSY);
 8000c4e:	bf00      	nop
 8000c50:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <i2c_transaction+0xe8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1f9      	bne.n	8000c50 <i2c_transaction+0x18>

    //clear bits in CR2
    I2C2->CR2 &= 0;
 8000c5c:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <i2c_transaction+0xe8>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <i2c_transaction+0xe8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    // I2C2->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RD_WRN);


    // Configure I2C transaction
    I2C2->CR2 = (address << 1) | (len << 16) | (dir == 1 ? I2C_CR2_RD_WRN : 0);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	005a      	lsls	r2, r3, #1
 8000c6a:	797b      	ldrb	r3, [r7, #5]
 8000c6c:	041b      	lsls	r3, r3, #16
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	4619      	mov	r1, r3
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d102      	bne.n	8000c7e <i2c_transaction+0x46>
 8000c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7c:	e000      	b.n	8000c80 <i2c_transaction+0x48>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	4a27      	ldr	r2, [pc, #156]	@ (8000d20 <i2c_transaction+0xe8>)
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6053      	str	r3, [r2, #4]

    // Start Transmission/Reception
    I2C2->CR2 |= I2C_CR2_START;
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <i2c_transaction+0xe8>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a25      	ldr	r2, [pc, #148]	@ (8000d20 <i2c_transaction+0xe8>)
 8000c8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c90:	6053      	str	r3, [r2, #4]

    if (dir == 0) { // Write Mode
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d11e      	bne.n	8000cd6 <i2c_transaction+0x9e>
        for (uint8_t i = 0; i < len; i++) {
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e00f      	b.n	8000cbe <i2c_transaction+0x86>
            // Wait until TX buffer is empty      
            
        	// while (!(I2C2->ISR & I2C_ISR_TXIS)); // or TXIS
            while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)));
 8000c9e:	bf00      	nop
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <i2c_transaction+0xe8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0312 	and.w	r3, r3, #18
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0f9      	beq.n	8000ca0 <i2c_transaction+0x68>

            // Write each byte
            I2C2->TXDR = data[i];
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <i2c_transaction+0xe8>)
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	797b      	ldrb	r3, [r7, #5]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d3eb      	bcc.n	8000c9e <i2c_transaction+0x66>
        }

        // Wait until transfer is complete
        while (!(I2C2->ISR & I2C_ISR_TC));
 8000cc6:	bf00      	nop
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <i2c_transaction+0xe8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f9      	beq.n	8000cc8 <i2c_transaction+0x90>
 8000cd4:	e017      	b.n	8000d06 <i2c_transaction+0xce>
        
    } else { // Read Mode
        for (uint8_t i = 0; i < len; i++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73bb      	strb	r3, [r7, #14]
 8000cda:	e010      	b.n	8000cfe <i2c_transaction+0xc6>
            // Wait until RX buffer is full
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8000cdc:	bf00      	nop
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <i2c_transaction+0xe8>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f9      	beq.n	8000cde <i2c_transaction+0xa6>

            // Read each byte
            data[i] = I2C2->RXDR;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <i2c_transaction+0xe8>)
 8000cec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73bb      	strb	r3, [r7, #14]
 8000cfe:	7bba      	ldrb	r2, [r7, #14]
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ea      	bcc.n	8000cdc <i2c_transaction+0xa4>
        }
    }

    // Stop Condition
    I2C2->CR2 |= I2C_CR2_STOP;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <i2c_transaction+0xe8>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <i2c_transaction+0xe8>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d10:	6053      	str	r3, [r2, #4]

    return 0; // Success
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40005800 	.word	0x40005800

08000d24 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000d28:	4b32      	ldr	r3, [pc, #200]	@ (8000df4 <leds_init+0xd0>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	4a31      	ldr	r2, [pc, #196]	@ (8000df4 <leds_init+0xd0>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000d34:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <leds_init+0xd0>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a2e      	ldr	r2, [pc, #184]	@ (8000df4 <leds_init+0xd0>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000d40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d4a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d4e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000d50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d5e:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000d60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d6a:	f023 0320 	bic.w	r3, r3, #32
 8000d6e:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000d70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d7a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d7e:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000d80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d8a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d8e:	6093      	str	r3, [r2, #8]

  /* Turn off the LED 1 */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d9a:	f023 0320 	bic.w	r3, r3, #32
 8000d9e:	6153      	str	r3, [r2, #20]

  // --------------------------- PB14 (LED 2 ) -----------------------------------

  /* Configure PB14 as an output by clearing all bits and setting the mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000da0:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <leds_init+0xd4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <leds_init+0xd4>)
 8000da6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000daa:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <leds_init+0xd4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a11      	ldr	r2, [pc, #68]	@ (8000df8 <leds_init+0xd4>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <leds_init+0xd4>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <leds_init+0xd4>)
 8000dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dc2:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <leds_init+0xd4>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <leds_init+0xd4>)
 8000dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000dce:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <leds_init+0xd4>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <leds_init+0xd4>)
 8000dd6:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000dda:	6093      	str	r3, [r2, #8]

  /* Turn off the LED 2 */
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <leds_init+0xd4>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <leds_init+0xd4>)
 8000de2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000de6:	6153      	str	r3, [r2, #20]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <lsm6dsl_init>:
// #define OUTZ_H_XL 0x2D    // Output register for Z-axis acceleration (high byte)

#define write 0
#define read 1

void lsm6dsl_init() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
    uint8_t data[2];

    // Configure accelerometer: 104 Hz, Normal-Power mode
    data[0] = CTRL1_XL;  // Register address
 8000e02:	2310      	movs	r3, #16
 8000e04:	713b      	strb	r3, [r7, #4]
    data[1] = 0x40;       // Configuration value
 8000e06:	2340      	movs	r3, #64	@ 0x40
 8000e08:	717b      	strb	r3, [r7, #5]
    i2c_transaction(LSM6DSL_ADDR, write, data, 2); // Send register address + data
 8000e0a:	1d3a      	adds	r2, r7, #4
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	2100      	movs	r1, #0
 8000e10:	206a      	movs	r0, #106	@ 0x6a
 8000e12:	f7ff ff11 	bl	8000c38 <i2c_transaction>
    
    // // Enable accelerometer data-ready interrupt on INT1
    // data[0] = INT1_CTRL;  // Register address
    // data[1] = 0x01;       // Enable data-ready interrupt
    // i2c_transaction(LSM6DSL_ADDR, write, data, 2); // Send register address + data
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]

    uint8_t reg = OUTX_L_XL; 
 8000e2a:	2328      	movs	r3, #40	@ 0x28
 8000e2c:	75fb      	strb	r3, [r7, #23]
    uint8_t data[6];
    
    // Set register address for reading
    // set write
    i2c_transaction(LSM6DSL_ADDR, write, &reg, 1);
 8000e2e:	f107 0217 	add.w	r2, r7, #23
 8000e32:	2301      	movs	r3, #1
 8000e34:	2100      	movs	r1, #0
 8000e36:	206a      	movs	r0, #106	@ 0x6a
 8000e38:	f7ff fefe 	bl	8000c38 <i2c_transaction>
    
    // Read 6 bytes of acceleration data (X, Y, Z - Low and High bytes)
    i2c_transaction(LSM6DSL_ADDR, read, data, 6);
 8000e3c:	f107 0210 	add.w	r2, r7, #16
 8000e40:	2306      	movs	r3, #6
 8000e42:	2101      	movs	r1, #1
 8000e44:	206a      	movs	r0, #106	@ 0x6a
 8000e46:	f7ff fef7 	bl	8000c38 <i2c_transaction>

    
    
    // Convert raw data into 16-bit values
    *x = (int16_t)((data[1] << 8) | data[0]);
 8000e4a:	7c7b      	ldrb	r3, [r7, #17]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	7c3b      	ldrb	r3, [r7, #16]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]);
 8000e5c:	7cfb      	ldrb	r3, [r7, #19]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	7cbb      	ldrb	r3, [r7, #18]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000e6e:	7d7b      	ldrb	r3, [r7, #21]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	7d3b      	ldrb	r3, [r7, #20]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	801a      	strh	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <TIM2_IRQHandler>:
  // }
// }


// ? Interupt Handler
void TIM2_IRQHandler() {
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  //increment i50
  ((incTenSeconds)++);
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <TIM2_IRQHandler+0x44>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <TIM2_IRQHandler+0x44>)
 8000e98:	801a      	strh	r2, [r3, #0]

  if (incTenSeconds == 6) {
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <TIM2_IRQHandler+0x44>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	d102      	bne.n	8000eaa <TIM2_IRQHandler+0x22>

    boolLost = 1;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <TIM2_IRQHandler+0x48>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	801a      	strh	r2, [r3, #0]
  }

  boolAct = 1;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <TIM2_IRQHandler+0x4c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	801a      	strh	r2, [r3, #0]
  
  // manually reset update bit so interrupts can happen again
  TIM2->SR &= ~TIM_SR_UIF;
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	6113      	str	r3, [r2, #16]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000160 	.word	0x20000160
 8000ed0:	2000030e 	.word	0x2000030e
 8000ed4:	20000310 	.word	0x20000310

08000ed8 <motion>:
//   }
// }


// ? Motion function
int motion() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

	uint16_t threshold = 3000;
 8000ede:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000ee2:	80fb      	strh	r3, [r7, #6]

	int16_t x,y,z;

	lsm6dsl_read_xyz(&x, &y, &z);
 8000ee4:	463a      	mov	r2, r7
 8000ee6:	1cb9      	adds	r1, r7, #2
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff97 	bl	8000e1e <lsm6dsl_read_xyz>

	// not lost, therefore reset count
	z -= 16550;
 8000ef0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	f5a3 4381 	sub.w	r3, r3, #16512	@ 0x4080
 8000efa:	3b26      	subs	r3, #38	@ 0x26
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	803b      	strh	r3, [r7, #0]
	
	if (abs(x - *prevX) * abs(x - *prevX) + abs(y - *prevY) * abs(y - *prevY) + abs(z - *prevZ) * abs(z - *prevZ) > threshold * threshold) {
 8000f02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b38      	ldr	r3, [pc, #224]	@ (8000fec <motion+0x114>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bfb8      	it	lt
 8000f16:	425b      	neglt	r3, r3
 8000f18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4a33      	ldr	r2, [pc, #204]	@ (8000fec <motion+0x114>)
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f26:	1a8a      	subs	r2, r1, r2
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	bfb8      	it	lt
 8000f2c:	4252      	neglt	r2, r2
 8000f2e:	fb03 f202 	mul.w	r2, r3, r2
 8000f32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <motion+0x118>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	1acb      	subs	r3, r1, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bfb8      	it	lt
 8000f46:	425b      	neglt	r3, r3
 8000f48:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4928      	ldr	r1, [pc, #160]	@ (8000ff0 <motion+0x118>)
 8000f50:	6809      	ldr	r1, [r1, #0]
 8000f52:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000f56:	1a41      	subs	r1, r0, r1
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	bfb8      	it	lt
 8000f5c:	4249      	neglt	r1, r1
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	441a      	add	r2, r3
 8000f64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <motion+0x11c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	1acb      	subs	r3, r1, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bfb8      	it	lt
 8000f78:	425b      	neglt	r3, r3
 8000f7a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000f7e:	4608      	mov	r0, r1
 8000f80:	491c      	ldr	r1, [pc, #112]	@ (8000ff4 <motion+0x11c>)
 8000f82:	6809      	ldr	r1, [r1, #0]
 8000f84:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000f88:	1a41      	subs	r1, r0, r1
 8000f8a:	2900      	cmp	r1, #0
 8000f8c:	bfb8      	it	lt
 8000f8e:	4249      	neglt	r1, r1
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	441a      	add	r2, r3
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	88f9      	ldrh	r1, [r7, #6]
 8000f9a:	fb01 f303 	mul.w	r3, r1, r3
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dd10      	ble.n	8000fc4 <motion+0xec>

		*prevX = x;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <motion+0x114>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000faa:	801a      	strh	r2, [r3, #0]
		*prevY = y;
 8000fac:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <motion+0x118>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000fb4:	801a      	strh	r2, [r3, #0]
		*prevZ = z;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <motion+0x11c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fbe:	801a      	strh	r2, [r3, #0]
		return 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e00f      	b.n	8000fe4 <motion+0x10c>
	}


	*prevX = x;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <motion+0x114>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fcc:	801a      	strh	r2, [r3, #0]
	*prevY = y;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <motion+0x118>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000fd6:	801a      	strh	r2, [r3, #0]
	*prevZ = z;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <motion+0x11c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fe0:	801a      	strh	r2, [r3, #0]
	return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000164 	.word	0x20000164
 8000ff0:	20000168 	.word	0x20000168
 8000ff4:	2000016c 	.word	0x2000016c

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	@ 0x30
 8000ffc:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fbfe 	bl	80017fe <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f909 	bl	8001218 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 f98b 	bl	8001320 <MX_GPIO_Init>
  MX_SPI3_Init();
 800100a:	f000 f94b 	bl	80012a4 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f000 ff7e 	bl	8001f18 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f000 fc63 	bl	80018e8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f000 ff74 	bl	8001f18 <HAL_GPIO_WritePin>

  ble_init();
 8001030:	f7ff f91e 	bl	8000270 <ble_init>
  standbyBle();
 8001034:	f7ff fa36 	bl	80004a4 <standbyBle>
  HAL_Delay(10);
 8001038:	200a      	movs	r0, #10
 800103a:	f000 fc55 	bl	80018e8 <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27


  // ? OldMain initalization

  leds_init();
 8001044:	f7ff fe6e 	bl	8000d24 <leds_init>
	// timer_init(TIM2);
  timer_init(TIM2);
 8001048:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800104c:	f000 fb54 	bl	80016f8 <timer_init>
	i2c_init();
 8001050:	f7ff fd9a 	bl	8000b88 <i2c_init>
	lsm6dsl_init();	
 8001054:	f7ff fed2 	bl	8000dfc <lsm6dsl_init>
  // setupMotionInterrupt();
  timer_reset(TIM2);
 8001058:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800105c:	f000 fb98 	bl	8001790 <timer_reset>
	//timer_set_ms(TIM2, 10000);

  // ? Initalize Count
	boolLost = 0;
 8001060:	4b64      	ldr	r3, [pc, #400]	@ (80011f4 <main+0x1fc>)
 8001062:	2200      	movs	r2, #0
 8001064:	801a      	strh	r2, [r3, #0]
  timeLost = 0;
 8001066:	4b64      	ldr	r3, [pc, #400]	@ (80011f8 <main+0x200>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

  // ! REMOVE LEDS WHEN DONE
  while (1)
  {

    if (motion() == 1) {
 800106c:	f7ff ff34 	bl	8000ed8 <motion>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d113      	bne.n	800109e <main+0xa6>
      boolLost = 0;
 8001076:	4b5f      	ldr	r3, [pc, #380]	@ (80011f4 <main+0x1fc>)
 8001078:	2200      	movs	r2, #0
 800107a:	801a      	strh	r2, [r3, #0]
			incTenSeconds = 0;
 800107c:	4b5f      	ldr	r3, [pc, #380]	@ (80011fc <main+0x204>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
      timeLost = 0;
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <main+0x200>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
      timer_reset(TIM2);
 8001088:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800108c:	f000 fb80 	bl	8001790 <timer_reset>
			// leds_set((uint8_t)0);
      setDiscoverability(0);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fd53 	bl	8000b3c <setDiscoverability>
      disconnectBLE();
 8001096:	f7ff fcf9 	bl	8000a8c <disconnectBLE>
      standbyBle();
 800109a:	f7ff fa03 	bl	80004a4 <standbyBle>
    }

    // want to connect, set discoverability to 1
    // want to disconnect, set discoverability to 0 and call disconnectble
    
    if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800109e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <main+0xc0>
 80010a6:	2140      	movs	r1, #64	@ 0x40
 80010a8:	4855      	ldr	r0, [pc, #340]	@ (8001200 <main+0x208>)
 80010aa:	f000 ff1d 	bl	8001ee8 <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <main+0xc0>
	    catchBLE();
 80010b4:	f7ff fb0c 	bl	80006d0 <catchBLE>
    //   // setDiscoverability(0);
    //   // disconnectBLE();
    // }
  

    if(boolLost == 1){
 80010b8:	4b4e      	ldr	r3, [pc, #312]	@ (80011f4 <main+0x1fc>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d12c      	bne.n	800111c <main+0x124>
    	if(boolAct == 1){
 80010c2:	4b50      	ldr	r3, [pc, #320]	@ (8001204 <main+0x20c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d127      	bne.n	800111c <main+0x124>
        setDiscoverability(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff fd35 	bl	8000b3c <setDiscoverability>
        // leds_set((uint8_t)3);
        // Send a string to the NORDIC UART service, remember to not include the newline
        // unsigned char test_str[] = "Team 12 ";
        unsigned char test_str[18] = {0};
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	819a      	strh	r2, [r3, #12]
        snprintf(test_str, sizeof(test_str), "T12 missing %ds", timeLost);
 80010e4:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <main+0x200>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f107 0014 	add.w	r0, r7, #20
 80010ee:	4a46      	ldr	r2, [pc, #280]	@ (8001208 <main+0x210>)
 80010f0:	2112      	movs	r1, #18
 80010f2:	f002 fc51 	bl	8003998 <sniprintf>
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2311      	movs	r3, #17
 80010fe:	2200      	movs	r2, #0
 8001100:	4942      	ldr	r1, [pc, #264]	@ (800120c <main+0x214>)
 8001102:	4843      	ldr	r0, [pc, #268]	@ (8001210 <main+0x218>)
 8001104:	f7ff fc6e 	bl	80009e4 <updateCharValue>
        timeLost += 10;
 8001108:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <main+0x200>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	330a      	adds	r3, #10
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <main+0x200>)
 8001114:	701a      	strb	r2, [r3, #0]
        boolAct = 0;
 8001116:	4b3b      	ldr	r3, [pc, #236]	@ (8001204 <main+0x20c>)
 8001118:	2200      	movs	r2, #0
 800111a:	801a      	strh	r2, [r3, #0]
      }
    }

    // Enter Stop Mode, then wait for interrupt
    HAL_SuspendTick();
 800111c:	f000 fc08 	bl	8001930 <HAL_SuspendTick>
    __HAL_RCC_GPIOE_CLK_DISABLE();
 8001120:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <main+0x21c>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	4a3b      	ldr	r2, [pc, #236]	@ (8001214 <main+0x21c>)
 8001126:	f023 0310 	bic.w	r3, r3, #16
 800112a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_GPIOA_CLK_DISABLE();
 800112c:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <main+0x21c>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a38      	ldr	r2, [pc, #224]	@ (8001214 <main+0x21c>)
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8001138:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <main+0x21c>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	4a35      	ldr	r2, [pc, #212]	@ (8001214 <main+0x21c>)
 800113e:	f023 0302 	bic.w	r3, r3, #2
 8001142:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_GPIOD_CLK_DISABLE();
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <main+0x21c>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <main+0x21c>)
 800114a:	f023 0308 	bic.w	r3, r3, #8
 800114e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_GPIOC_CLK_DISABLE();
 8001150:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <main+0x21c>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	4a2f      	ldr	r2, [pc, #188]	@ (8001214 <main+0x21c>)
 8001156:	f023 0304 	bic.w	r3, r3, #4
 800115a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 &= ~RCC_APB1ENR1_I2C2EN;  
 800115c:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <main+0x21c>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001160:	4a2c      	ldr	r2, [pc, #176]	@ (8001214 <main+0x21c>)
 8001162:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001166:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001168:	2101      	movs	r1, #1
 800116a:	2000      	movs	r0, #0
 800116c:	f000 ff10 	bl	8001f90 <HAL_PWR_EnterSLEEPMode>
    HAL_ResumeTick();
 8001170:	f000 fbee 	bl	8001950 <HAL_ResumeTick>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001174:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <main+0x21c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a26      	ldr	r2, [pc, #152]	@ (8001214 <main+0x21c>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <main+0x21c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <main+0x21c>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a20      	ldr	r2, [pc, #128]	@ (8001214 <main+0x21c>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <main+0x21c>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <main+0x21c>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001214 <main+0x21c>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <main+0x21c>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <main+0x21c>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <main+0x21c>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <main+0x21c>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <main+0x21c>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <main+0x21c>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <main+0x21c>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
    i2c_init();
 80011ec:	f7ff fccc 	bl	8000b88 <i2c_init>
    if (motion() == 1) {
 80011f0:	e73c      	b.n	800106c <main+0x74>
 80011f2:	bf00      	nop
 80011f4:	2000030e 	.word	0x2000030e
 80011f8:	20000312 	.word	0x20000312
 80011fc:	20000160 	.word	0x20000160
 8001200:	48001000 	.word	0x48001000
 8001204:	20000310 	.word	0x20000310
 8001208:	080041cc 	.word	0x080041cc
 800120c:	200002fc 	.word	0x200002fc
 8001210:	200002f4 	.word	0x200002f4
 8001214:	40021000 	.word	0x40021000

08001218 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b096      	sub	sp, #88	@ 0x58
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2244      	movs	r2, #68	@ 0x44
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fbea 	bl	8003a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800123a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800123e:	f000 fee9 	bl	8002014 <HAL_PWREx_ControlVoltageScaling>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001248:	f000 f902 	bl	8001450 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800124c:	2310      	movs	r3, #16
 800124e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001258:	2340      	movs	r3, #64	@ 0x40
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800125c:	2300      	movs	r3, #0
 800125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ff73 	bl	8002150 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001270:	f000 f8ee 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fb3b 	bl	8002908 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001298:	f000 f8da 	bl	8001450 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3758      	adds	r7, #88	@ 0x58
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <MX_SPI3_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012f2:	2207      	movs	r2, #7
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_SPI3_Init+0x74>)
 80012fe:	2208      	movs	r2, #8
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_SPI3_Init+0x74>)
 8001304:	f001 fcec 	bl	8002ce0 <HAL_SPI_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800130e:	f000 f89f 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000314 	.word	0x20000314
 800131c:	40003c00 	.word	0x40003c00

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a42      	ldr	r2, [pc, #264]	@ (8001444 <MX_GPIO_Init+0x124>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a3c      	ldr	r2, [pc, #240]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <MX_GPIO_Init+0x124>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a36      	ldr	r2, [pc, #216]	@ (8001444 <MX_GPIO_Init+0x124>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137e:	4b31      	ldr	r3, [pc, #196]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a30      	ldr	r2, [pc, #192]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <MX_GPIO_Init+0x124>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <MX_GPIO_Init+0x124>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a2a      	ldr	r2, [pc, #168]	@ (8001444 <MX_GPIO_Init+0x124>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <MX_GPIO_Init+0x124>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f000 fdaf 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c0:	4821      	ldr	r0, [pc, #132]	@ (8001448 <MX_GPIO_Init+0x128>)
 80013c2:	f000 fda9 	bl	8001f18 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d0:	f000 fda2 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80013d4:	2340      	movs	r3, #64	@ 0x40
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4818      	ldr	r0, [pc, #96]	@ (800144c <MX_GPIO_Init+0x12c>)
 80013ea:	f000 fbd3 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80013ee:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140a:	f000 fbc3 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800140e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4808      	ldr	r0, [pc, #32]	@ (8001448 <MX_GPIO_Init+0x128>)
 8001428:	f000 fbb4 	bl	8001b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2017      	movs	r0, #23
 8001432:	f000 fb78 	bl	8001b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001436:	2017      	movs	r0, #23
 8001438:	f000 fb91 	bl	8001b5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	@ 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	48000c00 	.word	0x48000c00
 800144c:	48001000 	.word	0x48001000

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_MspInit+0x44>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_MspInit+0x44>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6613      	str	r3, [r2, #96]	@ 0x60
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_MspInit+0x44>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_MspInit+0x44>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_MspInit+0x44>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6593      	str	r3, [r2, #88]	@ 0x58
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_MspInit+0x44>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_SPI_MspInit+0x7c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d128      	bne.n	8001518 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001508:	2306      	movs	r3, #6
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <HAL_SPI_MspInit+0x84>)
 8001514:	f000 fb3e 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40003c00 	.word	0x40003c00
 8001524:	40021000 	.word	0x40021000
 8001528:	48000800 	.word	0x48000800

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <NMI_Handler+0x4>

08001534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <MemManage_Handler+0x4>

08001544 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <UsageFault_Handler+0x4>

08001554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001582:	f000 f991 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <EXTI9_5_IRQHandler+0x14>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001596:	2040      	movs	r0, #64	@ 0x40
 8001598:	f000 fcd6 	bl	8001f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000304 	.word	0x20000304

080015a4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <_sbrk+0x50>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x16>
		heap_end = &end;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <_sbrk+0x50>)
 80015b6:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <_sbrk+0x54>)
 80015b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <_sbrk+0x50>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <_sbrk+0x50>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	466a      	mov	r2, sp
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d907      	bls.n	80015de <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80015ce:	f002 fa2f 	bl	8003a30 <__errno>
 80015d2:	4603      	mov	r3, r0
 80015d4:	220c      	movs	r2, #12
 80015d6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015dc:	e006      	b.n	80015ec <_sbrk+0x48>
	}

	heap_end += incr;
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <_sbrk+0x50>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a03      	ldr	r2, [pc, #12]	@ (80015f4 <_sbrk+0x50>)
 80015e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000378 	.word	0x20000378
 80015f8:	200004c8 	.word	0x200004c8

080015fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <SystemInit+0x64>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001606:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <SystemInit+0x64>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <SystemInit+0x68>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <SystemInit+0x68>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <SystemInit+0x68>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <SystemInit+0x68>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <SystemInit+0x68>)
 8001628:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800162c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001630:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <SystemInit+0x68>)
 8001634:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001638:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <SystemInit+0x68>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <SystemInit+0x68>)
 8001640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001644:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <SystemInit+0x68>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <SystemInit+0x64>)
 800164e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001652:	609a      	str	r2, [r3, #8]
#endif
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	40021000 	.word	0x40021000

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	@ (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	@ (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	@ (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  // Stop the counter
  timer->CR1 &= ~TIM_CR1_CEN;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 0201 	bic.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]

  // Set reset bit and clear it
  RCC->APB1RSTR1 |= RCC_APB1RSTR1_TIM2RST;
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <timer_init+0x94>)
 800170e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <timer_init+0x94>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6393      	str	r3, [r2, #56]	@ 0x38
  RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_TIM2RST;
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <timer_init+0x94>)
 800171a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <timer_init+0x94>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6393      	str	r3, [r2, #56]	@ 0x38
  
  //Enable the timer clock.
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <timer_init+0x94>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	4a18      	ldr	r2, [pc, #96]	@ (800178c <timer_init+0x94>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6593      	str	r3, [r2, #88]	@ 0x58

  // Set ARPE bit to wait for update

  timer->CR1 |= TIM_CR1_ARPE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]

  // Enable the timer’s interrupt both internally and in the interrupt controller (NVIC).

  timer->DIER |= TIM_DIER_UIE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	60da      	str	r2, [r3, #12]

  NVIC_EnableIRQ(TIM2_IRQn);
 8001748:	201c      	movs	r0, #28
 800174a:	f7ff ff8d 	bl	8001668 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM2_IRQn, 1);
 800174e:	2101      	movs	r1, #1
 8001750:	201c      	movs	r0, #28
 8001752:	f7ff ffa7 	bl	80016a4 <__NVIC_SetPriority>
  
  //Set Prescaler and ARR

  timer->PSC = 999;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28

  timer->ARR = 9999;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001764:	62da      	str	r2, [r3, #44]	@ 0x2c

  //Start Counter
  timer->CR1 |= TIM_CR1_CEN;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001772:	b662      	cpsie	i
}
 8001774:	bf00      	nop

  //Enable interrupts on system, if not already true
  __enable_irq();

  //Force an update
  timer->EGR |= TIM_EGR_UG;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	615a      	str	r2, [r3, #20]

  // ! Call timer_reset?


}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  timer->CNT = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff ff24 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	@ (80017ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	@ (80017f8 <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f002 f92f 	bl	8003a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7ff fc0b 	bl	8000ff8 <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80017f0:	08004260 	.word	0x08004260
  ldr r2, =_sbss
 80017f4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80017f8:	200004c8 	.word	0x200004c8

080017fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_2_IRQHandler>

080017fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f981 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f80e 	bl	8001830 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e001      	b.n	8001824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001820:	f7ff fe1c 	bl	800145c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001824:	79fb      	ldrb	r3, [r7, #7]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f98d 	bl	8001b7a <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001874:	f000 f957 	bl	8001b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000178 	.word	0x20000178
 80018a0:	20000170 	.word	0x20000170
 80018a4:	20000174 	.word	0x20000174

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000178 	.word	0x20000178
 80018cc:	2000037c 	.word	0x2000037c

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000037c 	.word	0x2000037c

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000178 	.word	0x20000178

08001930 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_SuspendTick+0x1c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_SuspendTick+0x1c>)
 800193a:	f023 0302 	bic.w	r3, r3, #2
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_ResumeTick+0x1c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_ResumeTick+0x1c>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <__NVIC_SetPriorityGrouping>:
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	@ (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	@ (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	@ (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	@ 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	@ 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff3e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff31 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e17f      	b.n	8001ea4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8171 	beq.w	8001e9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d005      	beq.n	8001bd4 <HAL_GPIO_Init+0x40>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d130      	bne.n	8001c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 0201 	and.w	r2, r3, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d118      	bne.n	8001c74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	f003 0201 	and.w	r2, r3, #1
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d017      	beq.n	8001cb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d123      	bne.n	8001d04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	6939      	ldr	r1, [r7, #16]
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80ac 	beq.w	8001e9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d52:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec8 <HAL_GPIO_Init+0x334>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x242>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ecc <HAL_GPIO_Init+0x338>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x23e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed0 <HAL_GPIO_Init+0x33c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x23a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed4 <HAL_GPIO_Init+0x340>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x236>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed8 <HAL_GPIO_Init+0x344>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x232>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	@ (8001edc <HAL_GPIO_Init+0x348>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x22e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee0 <HAL_GPIO_Init+0x34c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x22a>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de8:	4937      	ldr	r1, [pc, #220]	@ (8001ec8 <HAL_GPIO_Init+0x334>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e1a:	4a32      	ldr	r2, [pc, #200]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e20:	4b30      	ldr	r3, [pc, #192]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e44:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e98:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f47f ae78 	bne.w	8001ba4 <HAL_GPIO_Init+0x10>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000c00 	.word	0x48000c00
 8001ed8:	48001000 	.word	0x48001000
 8001edc:	48001400 	.word	0x48001400
 8001ee0:	48001800 	.word	0x48001800
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f806 	bl	8001f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10c      	bne.n	8001fbc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fae:	d10e      	bne.n	8001fce <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001fb0:	f000 f896 	bl	80020e0 <HAL_PWREx_DisableLowPowerRunMode>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001fba:	e016      	b.n	8001fea <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc8:	d001      	beq.n	8001fce <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001fca:	f000 f879 	bl	80020c0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4a08      	ldr	r2, [pc, #32]	@ (8001ff4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001fe0:	bf30      	wfi
 8001fe2:	e002      	b.n	8001fea <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001fe4:	bf40      	sev
    __WFE();
 8001fe6:	bf20      	wfe
    __WFE();
 8001fe8:	bf20      	wfe
  }

}
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40007000 	.word	0x40007000

08002014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002022:	d130      	bne.n	8002086 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800202c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002030:	d038      	beq.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800203a:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2232      	movs	r2, #50	@ 0x32
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9b      	lsrs	r3, r3, #18
 8002054:	3301      	adds	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002058:	e002      	b.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b01      	subs	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206c:	d102      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x60>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f2      	bne.n	800205a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002074:	4b0f      	ldr	r3, [pc, #60]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002080:	d110      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e00f      	b.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002092:	d007      	beq.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002094:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800209c:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40007000 	.word	0x40007000
 80020b8:	20000170 	.word	0x20000170
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80020ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40007000 	.word	0x40007000

080020e0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80020e6:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a16      	ldr	r2, [pc, #88]	@ (8002144 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80020ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2232      	movs	r2, #50	@ 0x32
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	4a13      	ldr	r2, [pc, #76]	@ (800214c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0c9b      	lsrs	r3, r3, #18
 8002104:	3301      	adds	r3, #1
 8002106:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002108:	e002      	b.n	8002110 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3b01      	subs	r3, #1
 800210e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800211c:	d102      	bne.n	8002124 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f2      	bne.n	800210a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800212c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002130:	d101      	bne.n	8002136 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e000      	b.n	8002138 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40007000 	.word	0x40007000
 8002148:	20000170 	.word	0x20000170
 800214c:	431bde83 	.word	0x431bde83

08002150 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e3ca      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4b97      	ldr	r3, [pc, #604]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	4b94      	ldr	r3, [pc, #592]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80e4 	beq.w	800234c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_RCC_OscConfig+0x4a>
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	f040 808b 	bne.w	80022a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 8087 	bne.w	80022a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219a:	4b89      	ldr	r3, [pc, #548]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e3a2      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	4b82      	ldr	r3, [pc, #520]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <HAL_RCC_OscConfig+0x7c>
 80021c2:	4b7f      	ldr	r3, [pc, #508]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ca:	e005      	b.n	80021d8 <HAL_RCC_OscConfig+0x88>
 80021cc:	4b7c      	ldr	r3, [pc, #496]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d223      	bcs.n	8002224 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fd1d 	bl	8002c20 <RCC_SetFlashLatencyFromMSIRange>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e383      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f0:	4b73      	ldr	r3, [pc, #460]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a72      	ldr	r2, [pc, #456]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b70      	ldr	r3, [pc, #448]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	496d      	ldr	r1, [pc, #436]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220e:	4b6c      	ldr	r3, [pc, #432]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	4968      	ldr	r1, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
 8002222:	e025      	b.n	8002270 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002224:	4b66      	ldr	r3, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a65      	ldr	r2, [pc, #404]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b63      	ldr	r3, [pc, #396]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4960      	ldr	r1, [pc, #384]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002242:	4b5f      	ldr	r3, [pc, #380]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	495b      	ldr	r1, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fcdd 	bl	8002c20 <RCC_SetFlashLatencyFromMSIRange>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e343      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002270:	f000 fc4a 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b52      	ldr	r3, [pc, #328]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	4950      	ldr	r1, [pc, #320]	@ (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	4a4e      	ldr	r2, [pc, #312]	@ (80023c8 <HAL_RCC_OscConfig+0x278>)
 800228e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002290:	4b4e      	ldr	r3, [pc, #312]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff facb 	bl	8001830 <HAL_InitTick>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d052      	beq.n	800234a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	e327      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d032      	beq.n	8002316 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b0:	4b43      	ldr	r3, [pc, #268]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a42      	ldr	r2, [pc, #264]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fb08 	bl	80018d0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c4:	f7ff fb04 	bl	80018d0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e310      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d6:	4b3a      	ldr	r3, [pc, #232]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e2:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a36      	ldr	r2, [pc, #216]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4931      	ldr	r1, [pc, #196]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	492c      	ldr	r1, [pc, #176]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e01a      	b.n	800234c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a29      	ldr	r2, [pc, #164]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002322:	f7ff fad5 	bl	80018d0 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232a:	f7ff fad1 	bl	80018d0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e2dd      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233c:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x1da>
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d074      	beq.n	8002442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b08      	cmp	r3, #8
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x21a>
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d10e      	bne.n	8002382 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d10b      	bne.n	8002382 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d064      	beq.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d160      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e2ba      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x24a>
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e026      	b.n	80023e8 <HAL_RCC_OscConfig+0x298>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023a2:	d115      	bne.n	80023d0 <HAL_RCC_OscConfig+0x280>
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a02      	ldr	r2, [pc, #8]	@ (80023c0 <HAL_RCC_OscConfig+0x270>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e014      	b.n	80023e8 <HAL_RCC_OscConfig+0x298>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080041dc 	.word	0x080041dc
 80023c8:	20000170 	.word	0x20000170
 80023cc:	20000174 	.word	0x20000174
 80023d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a9f      	ldr	r2, [pc, #636]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a9c      	ldr	r2, [pc, #624]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff fa6e 	bl	80018d0 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff fa6a 	bl	80018d0 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e276      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	4b92      	ldr	r3, [pc, #584]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2a8>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff fa5a 	bl	80018d0 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff fa56 	bl	80018d0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e262      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x2d0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d060      	beq.n	8002510 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x310>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d119      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d116      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	4b7c      	ldr	r3, [pc, #496]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x328>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e23f      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b76      	ldr	r3, [pc, #472]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4973      	ldr	r1, [pc, #460]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248c:	e040      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d023      	beq.n	80024de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002496:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6e      	ldr	r2, [pc, #440]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7ff fa15 	bl	80018d0 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff fa11 	bl	80018d0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e21d      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	4b65      	ldr	r3, [pc, #404]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b62      	ldr	r3, [pc, #392]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	495f      	ldr	r1, [pc, #380]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	e018      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b5d      	ldr	r3, [pc, #372]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7ff f9f1 	bl	80018d0 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff f9ed 	bl	80018d0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1f9      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	4b53      	ldr	r3, [pc, #332]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002524:	4b4b      	ldr	r3, [pc, #300]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252a:	4a4a      	ldr	r2, [pc, #296]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff f9cc 	bl	80018d0 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff f9c8 	bl	80018d0 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1d4      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCC_OscConfig+0x3ec>
 800255c:	e01b      	b.n	8002596 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255e:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002564:	4a3b      	ldr	r2, [pc, #236]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7ff f9af 	bl	80018d0 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002576:	f7ff f9ab 	bl	80018d0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1b7      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80a6 	beq.w	80026f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	4a26      	ldr	r2, [pc, #152]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c0:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_RCC_OscConfig+0x508>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_OscConfig+0x508>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002658 <HAL_RCC_OscConfig+0x508>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7ff f972 	bl	80018d0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7ff f96e 	bl	80018d0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e17a      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_RCC_OscConfig+0x508>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d8>
 8002616:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002626:	e029      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d115      	bne.n	800265c <HAL_RCC_OscConfig+0x50c>
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	4a07      	ldr	r2, [pc, #28]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	4a03      	ldr	r2, [pc, #12]	@ (8002654 <HAL_RCC_OscConfig+0x504>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002650:	e014      	b.n	800267c <HAL_RCC_OscConfig+0x52c>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	40007000 	.word	0x40007000
 800265c:	4b9c      	ldr	r3, [pc, #624]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002662:	4a9b      	ldr	r2, [pc, #620]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800266c:	4b98      	ldr	r3, [pc, #608]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	4a97      	ldr	r2, [pc, #604]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d016      	beq.n	80026b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7ff f924 	bl	80018d0 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7ff f920 	bl	80018d0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e12a      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a2:	4b8b      	ldr	r3, [pc, #556]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ed      	beq.n	800268c <HAL_RCC_OscConfig+0x53c>
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7ff f90d 	bl	80018d0 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff f909 	bl	80018d0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e113      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	4b7f      	ldr	r3, [pc, #508]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ed      	bne.n	80026ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b7a      	ldr	r3, [pc, #488]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	4a79      	ldr	r2, [pc, #484]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80fe 	beq.w	80028f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	2b02      	cmp	r3, #2
 8002700:	f040 80d0 	bne.w	80028a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002704:	4b72      	ldr	r3, [pc, #456]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	429a      	cmp	r2, r3
 8002716:	d130      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d127      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002734:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d11f      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002744:	2a07      	cmp	r2, #7
 8002746:	bf14      	ite	ne
 8002748:	2201      	movne	r2, #1
 800274a:	2200      	moveq	r2, #0
 800274c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274e:	4293      	cmp	r3, r2
 8002750:	d113      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	3b01      	subs	r3, #1
 8002760:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d109      	bne.n	800277a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d06e      	beq.n	8002858 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d069      	beq.n	8002854 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002780:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800278c:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0ad      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800279c:	4b4c      	ldr	r3, [pc, #304]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4b      	ldr	r2, [pc, #300]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80027a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a8:	f7ff f892 	bl	80018d0 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff f88e 	bl	80018d0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e09a      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c2:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ce:	4b40      	ldr	r3, [pc, #256]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4b40      	ldr	r3, [pc, #256]	@ (80028d4 <HAL_RCC_OscConfig+0x784>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027de:	3a01      	subs	r2, #1
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027e8:	0212      	lsls	r2, r2, #8
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027f0:	0852      	lsrs	r2, r2, #1
 80027f2:	3a01      	subs	r2, #1
 80027f4:	0552      	lsls	r2, r2, #21
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	3a01      	subs	r2, #1
 8002800:	0652      	lsls	r2, r2, #25
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002808:	0912      	lsrs	r2, r2, #4
 800280a:	0452      	lsls	r2, r2, #17
 800280c:	430a      	orrs	r2, r1
 800280e:	4930      	ldr	r1, [pc, #192]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002810:	4313      	orrs	r3, r2
 8002812:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002814:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2d      	ldr	r2, [pc, #180]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800281e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002820:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a2a      	ldr	r2, [pc, #168]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800282a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800282c:	f7ff f850 	bl	80018d0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff f84c 	bl	80018d0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e058      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002846:	4b22      	ldr	r3, [pc, #136]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002852:	e050      	b.n	80028f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e04f      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d148      	bne.n	80028f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002864:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800287c:	f7ff f828 	bl	80018d0 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7ff f824 	bl	80018d0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e030      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x734>
 80028a2:	e028      	b.n	80028f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d023      	beq.n	80028f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <HAL_RCC_OscConfig+0x780>)
 80028b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7ff f80b 	bl	80018d0 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	e00c      	b.n	80028d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7ff f807 	bl	80018d0 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d905      	bls.n	80028d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e013      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_OscConfig+0x7b0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ec      	bne.n	80028be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_RCC_OscConfig+0x7b0>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4905      	ldr	r1, [pc, #20]	@ (8002900 <HAL_RCC_OscConfig+0x7b0>)
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_RCC_OscConfig+0x7b4>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	60cb      	str	r3, [r1, #12]
 80028f0:	e001      	b.n	80028f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	feeefffc 	.word	0xfeeefffc

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0e7      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b75      	ldr	r3, [pc, #468]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d910      	bls.n	800294c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b72      	ldr	r3, [pc, #456]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	4970      	ldr	r1, [pc, #448]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b6e      	ldr	r3, [pc, #440]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cf      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b66      	ldr	r3, [pc, #408]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002964:	429a      	cmp	r2, r3
 8002966:	d908      	bls.n	800297a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4960      	ldr	r1, [pc, #384]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d04c      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b5a      	ldr	r3, [pc, #360]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d121      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0a6      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a6:	4b54      	ldr	r3, [pc, #336]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d115      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e09a      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029be:	4b4e      	ldr	r3, [pc, #312]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e08e      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ce:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e086      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b46      	ldr	r3, [pc, #280]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4943      	ldr	r1, [pc, #268]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe ff6e 	bl	80018d0 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe ff6a 	bl	80018d0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e06e      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d010      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	4b31      	ldr	r3, [pc, #196]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d208      	bcs.n	8002a4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	492b      	ldr	r1, [pc, #172]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4e:	4b29      	ldr	r3, [pc, #164]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d210      	bcs.n	8002a7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 0207 	bic.w	r2, r3, #7
 8002a64:	4923      	ldr	r1, [pc, #140]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6c:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e036      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4918      	ldr	r1, [pc, #96]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d009      	beq.n	8002abc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4910      	ldr	r1, [pc, #64]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002abc:	f000 f824 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	490b      	ldr	r1, [pc, #44]	@ (8002afc <HAL_RCC_ClockConfig+0x1f4>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002ada:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_RCC_ClockConfig+0x1fc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fea5 	bl	8001830 <HAL_InitTick>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aea:	7afb      	ldrb	r3, [r7, #11]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	080041dc 	.word	0x080041dc
 8002b00:	20000170 	.word	0x20000170
 8002b04:	20000174 	.word	0x20000174

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	4b3e      	ldr	r3, [pc, #248]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b20:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x34>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d121      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d11e      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b3c:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e005      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b58:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b64:	4a2b      	ldr	r2, [pc, #172]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b80:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	e004      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b8c:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d134      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0xa6>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xac>
 8002bac:	e005      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bb6:	617b      	str	r3, [r7, #20]
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	617b      	str	r3, [r7, #20]
      break;
 8002bbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	3301      	adds	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	0e5b      	lsrs	r3, r3, #25
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c00:	69bb      	ldr	r3, [r7, #24]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	@ 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	080041ec 	.word	0x080041ec
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c38:	f7ff f9de 	bl	8001ff8 <HAL_PWREx_GetVoltageRange>
 8002c3c:	6178      	str	r0, [r7, #20]
 8002c3e:	e014      	b.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	4b25      	ldr	r3, [pc, #148]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	4a24      	ldr	r2, [pc, #144]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4c:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c58:	f7ff f9ce 	bl	8001ff8 <HAL_PWREx_GetVoltageRange>
 8002c5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c62:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c70:	d10b      	bne.n	8002c8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b80      	cmp	r3, #128	@ 0x80
 8002c76:	d919      	bls.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c7c:	d902      	bls.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7e:	2302      	movs	r3, #2
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e013      	b.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c84:	2301      	movs	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	e010      	b.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b80      	cmp	r3, #128	@ 0x80
 8002c8e:	d902      	bls.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c90:	2303      	movs	r3, #3
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e00a      	b.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b80      	cmp	r3, #128	@ 0x80
 8002c9a:	d102      	bne.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e004      	b.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b70      	cmp	r3, #112	@ 0x70
 8002ca6:	d101      	bne.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca8:	2301      	movs	r3, #1
 8002caa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 0207 	bic.w	r2, r3, #7
 8002cb4:	4909      	ldr	r1, [pc, #36]	@ (8002cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cbc:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40022000 	.word	0x40022000

08002ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e095      	b.n	8002e1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d02:	d009      	beq.n	8002d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
 8002d0a:	e005      	b.n	8002d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fbb6 	bl	80014a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d58:	d902      	bls.n	8002d60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e002      	b.n	8002d66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d6e:	d007      	beq.n	8002d80 <HAL_SPI_Init+0xa0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d78:	d002      	beq.n	8002d80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	ea42 0103 	orr.w	r1, r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 0204 	and.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b088      	sub	sp, #32
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_SPI_Transmit+0x22>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e15f      	b.n	8003108 <HAL_SPI_Transmit+0x2e2>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e50:	f7fe fd3e 	bl	80018d0 <HAL_GetTick>
 8002e54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d002      	beq.n	8002e6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e6a:	e148      	b.n	80030fe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_SPI_Transmit+0x52>
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e7c:	e13f      	b.n	80030fe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2203      	movs	r2, #3
 8002e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec8:	d10f      	bne.n	8002eea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef4:	2b40      	cmp	r3, #64	@ 0x40
 8002ef6:	d007      	beq.n	8002f08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f10:	d94f      	bls.n	8002fb2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_SPI_Transmit+0xfa>
 8002f1a:	8afb      	ldrh	r3, [r7, #22]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d142      	bne.n	8002fa6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f44:	e02f      	b.n	8002fa6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d112      	bne.n	8002f7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f78:	e015      	b.n	8002fa6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7a:	f7fe fca9 	bl	80018d0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d803      	bhi.n	8002f92 <HAL_SPI_Transmit+0x16c>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_Transmit+0x172>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002fa4:	e0ab      	b.n	80030fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ca      	bne.n	8002f46 <HAL_SPI_Transmit+0x120>
 8002fb0:	e080      	b.n	80030b4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_SPI_Transmit+0x19a>
 8002fba:	8afb      	ldrh	r3, [r7, #22]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d174      	bne.n	80030aa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d912      	bls.n	8002ff0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	881a      	ldrh	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fda:	1c9a      	adds	r2, r3, #2
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b02      	subs	r3, #2
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fee:	e05c      	b.n	80030aa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003016:	e048      	b.n	80030aa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d12b      	bne.n	800307e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d912      	bls.n	8003056 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b02      	subs	r3, #2
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003054:	e029      	b.n	80030aa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800307c:	e015      	b.n	80030aa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800307e:	f7fe fc27 	bl	80018d0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d803      	bhi.n	8003096 <HAL_SPI_Transmit+0x270>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003094:	d102      	bne.n	800309c <HAL_SPI_Transmit+0x276>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80030a8:	e029      	b.n	80030fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1b1      	bne.n	8003018 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	6839      	ldr	r1, [r7, #0]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fb69 	bl	8003790 <SPI_EndRxTxTransaction>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e003      	b.n	80030fe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003106:	7ffb      	ldrb	r3, [r7, #31]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	@ 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800311e:	2301      	movs	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x26>
 8003132:	2302      	movs	r3, #2
 8003134:	e20a      	b.n	800354c <HAL_SPI_TransmitReceive+0x43c>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800313e:	f7fe fbc7 	bl	80018d0 <HAL_GetTick>
 8003142:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800314a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800315a:	7efb      	ldrb	r3, [r7, #27]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d00e      	beq.n	800317e <HAL_SPI_TransmitReceive+0x6e>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003166:	d106      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x66>
 8003170:	7efb      	ldrb	r3, [r7, #27]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d003      	beq.n	800317e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800317c:	e1e0      	b.n	8003540 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x80>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x80>
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003196:	e1d3      	b.n	8003540 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d003      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2205      	movs	r2, #5
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	887a      	ldrh	r2, [r7, #2]
 80031d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031ee:	d802      	bhi.n	80031f6 <HAL_SPI_TransmitReceive+0xe6>
 80031f0:	8a3b      	ldrh	r3, [r7, #16]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d908      	bls.n	8003208 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e007      	b.n	8003218 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003216:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003222:	2b40      	cmp	r3, #64	@ 0x40
 8003224:	d007      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800323e:	f240 8081 	bls.w	8003344 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x140>
 800324a:	8a7b      	ldrh	r3, [r7, #18]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d16d      	bne.n	800332c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003274:	e05a      	b.n	800332c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d11b      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x1ac>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x1ac>
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d11c      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x1f4>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	b292      	uxth	r2, r2
 80032e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003300:	2301      	movs	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003304:	f7fe fae4 	bl	80018d0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003310:	429a      	cmp	r2, r3
 8003312:	d80b      	bhi.n	800332c <HAL_SPI_TransmitReceive+0x21c>
 8003314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800331a:	d007      	beq.n	800332c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800332a:	e109      	b.n	8003540 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d19f      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x166>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d199      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x166>
 8003342:	e0e3      	b.n	800350c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x244>
 800334c:	8a7b      	ldrh	r3, [r7, #18]
 800334e:	2b01      	cmp	r3, #1
 8003350:	f040 80cf 	bne.w	80034f2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d912      	bls.n	8003384 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	1c9a      	adds	r2, r3, #2
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b02      	subs	r3, #2
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003382:	e0b6      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033aa:	e0a2      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d134      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x314>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d02f      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x314>
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d12c      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d912      	bls.n	80033fa <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b02      	subs	r3, #2
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033f8:	e012      	b.n	8003420 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d148      	bne.n	80034c4 <HAL_SPI_TransmitReceive+0x3b4>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d042      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d923      	bls.n	8003492 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	b292      	uxth	r2, r2
 8003456:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b02      	subs	r3, #2
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d81f      	bhi.n	80034c0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	e016      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f103 020c 	add.w	r2, r3, #12
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	7812      	ldrb	r2, [r2, #0]
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034c0:	2301      	movs	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034c4:	f7fe fa04 	bl	80018d0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d803      	bhi.n	80034dc <HAL_SPI_TransmitReceive+0x3cc>
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034da:	d102      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x3d2>
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034f0:	e026      	b.n	8003540 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f47f af57 	bne.w	80033ac <HAL_SPI_TransmitReceive+0x29c>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	f47f af50 	bne.w	80033ac <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f93d 	bl	8003790 <SPI_EndRxTxTransaction>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003536:	e003      	b.n	8003540 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003548:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800354c:	4618      	mov	r0, r3
 800354e:	3728      	adds	r7, #40	@ 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003564:	f7fe f9b4 	bl	80018d0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4413      	add	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003574:	f7fe f9ac 	bl	80018d0 <HAL_GetTick>
 8003578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800357a:	4b39      	ldr	r3, [pc, #228]	@ (8003660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	015b      	lsls	r3, r3, #5
 8003580:	0d1b      	lsrs	r3, r3, #20
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	fb02 f303 	mul.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358a:	e054      	b.n	8003636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003592:	d050      	beq.n	8003636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003594:	f7fe f99c 	bl	80018d0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d902      	bls.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d13d      	bne.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035c2:	d111      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035cc:	d004      	beq.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d6:	d107      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f0:	d10f      	bne.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e017      	b.n	8003656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3b01      	subs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d19b      	bne.n	800358c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000170 	.word	0x20000170

08003664 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	@ 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003676:	f7fe f92b 	bl	80018d0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4413      	add	r3, r2
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003686:	f7fe f923 	bl	80018d0 <HAL_GetTick>
 800368a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003694:	4b3d      	ldr	r3, [pc, #244]	@ (800378c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00da      	lsls	r2, r3, #3
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	0d1b      	lsrs	r3, r3, #20
 80036a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036ac:	e060      	b.n	8003770 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036b4:	d107      	bne.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036cc:	d050      	beq.n	8003770 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ce:	f7fe f8ff 	bl	80018d0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036da:	429a      	cmp	r2, r3
 80036dc:	d902      	bls.n	80036e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d13d      	bne.n	8003760 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036fc:	d111      	bne.n	8003722 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003706:	d004      	beq.n	8003712 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003710:	d107      	bne.n	8003722 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003720:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372a:	d10f      	bne.n	800374c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800374a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e010      	b.n	8003782 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	3b01      	subs	r3, #1
 800376e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d196      	bne.n	80036ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3728      	adds	r7, #40	@ 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000170 	.word	0x20000170

08003790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff ff5b 	bl	8003664 <SPI_WaitFifoStateUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e027      	b.n	8003814 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2180      	movs	r1, #128	@ 0x80
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff fec0 	bl	8003554 <SPI_WaitFlagStateUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e014      	b.n	8003814 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff ff34 	bl	8003664 <SPI_WaitFifoStateUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e000      	b.n	8003814 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <malloc>:
 800381c:	4b02      	ldr	r3, [pc, #8]	@ (8003828 <malloc+0xc>)
 800381e:	4601      	mov	r1, r0
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f000 b82d 	b.w	8003880 <_malloc_r>
 8003826:	bf00      	nop
 8003828:	2000017c 	.word	0x2000017c

0800382c <free>:
 800382c:	4b02      	ldr	r3, [pc, #8]	@ (8003838 <free+0xc>)
 800382e:	4601      	mov	r1, r0
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	f000 b937 	b.w	8003aa4 <_free_r>
 8003836:	bf00      	nop
 8003838:	2000017c 	.word	0x2000017c

0800383c <sbrk_aligned>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4e0f      	ldr	r6, [pc, #60]	@ (800387c <sbrk_aligned+0x40>)
 8003840:	460c      	mov	r4, r1
 8003842:	6831      	ldr	r1, [r6, #0]
 8003844:	4605      	mov	r5, r0
 8003846:	b911      	cbnz	r1, 800384e <sbrk_aligned+0x12>
 8003848:	f000 f8e2 	bl	8003a10 <_sbrk_r>
 800384c:	6030      	str	r0, [r6, #0]
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 f8dd 	bl	8003a10 <_sbrk_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	d103      	bne.n	8003862 <sbrk_aligned+0x26>
 800385a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800385e:	4620      	mov	r0, r4
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	1cc4      	adds	r4, r0, #3
 8003864:	f024 0403 	bic.w	r4, r4, #3
 8003868:	42a0      	cmp	r0, r4
 800386a:	d0f8      	beq.n	800385e <sbrk_aligned+0x22>
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f8ce 	bl	8003a10 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1f2      	bne.n	800385e <sbrk_aligned+0x22>
 8003878:	e7ef      	b.n	800385a <sbrk_aligned+0x1e>
 800387a:	bf00      	nop
 800387c:	20000380 	.word	0x20000380

08003880 <_malloc_r>:
 8003880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003884:	1ccd      	adds	r5, r1, #3
 8003886:	f025 0503 	bic.w	r5, r5, #3
 800388a:	3508      	adds	r5, #8
 800388c:	2d0c      	cmp	r5, #12
 800388e:	bf38      	it	cc
 8003890:	250c      	movcc	r5, #12
 8003892:	2d00      	cmp	r5, #0
 8003894:	4606      	mov	r6, r0
 8003896:	db01      	blt.n	800389c <_malloc_r+0x1c>
 8003898:	42a9      	cmp	r1, r5
 800389a:	d904      	bls.n	80038a6 <_malloc_r+0x26>
 800389c:	230c      	movs	r3, #12
 800389e:	6033      	str	r3, [r6, #0]
 80038a0:	2000      	movs	r0, #0
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800397c <_malloc_r+0xfc>
 80038aa:	f000 f869 	bl	8003980 <__malloc_lock>
 80038ae:	f8d8 3000 	ldr.w	r3, [r8]
 80038b2:	461c      	mov	r4, r3
 80038b4:	bb44      	cbnz	r4, 8003908 <_malloc_r+0x88>
 80038b6:	4629      	mov	r1, r5
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7ff ffbf 	bl	800383c <sbrk_aligned>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	4604      	mov	r4, r0
 80038c2:	d158      	bne.n	8003976 <_malloc_r+0xf6>
 80038c4:	f8d8 4000 	ldr.w	r4, [r8]
 80038c8:	4627      	mov	r7, r4
 80038ca:	2f00      	cmp	r7, #0
 80038cc:	d143      	bne.n	8003956 <_malloc_r+0xd6>
 80038ce:	2c00      	cmp	r4, #0
 80038d0:	d04b      	beq.n	800396a <_malloc_r+0xea>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	4639      	mov	r1, r7
 80038d6:	4630      	mov	r0, r6
 80038d8:	eb04 0903 	add.w	r9, r4, r3
 80038dc:	f000 f898 	bl	8003a10 <_sbrk_r>
 80038e0:	4581      	cmp	r9, r0
 80038e2:	d142      	bne.n	800396a <_malloc_r+0xea>
 80038e4:	6821      	ldr	r1, [r4, #0]
 80038e6:	1a6d      	subs	r5, r5, r1
 80038e8:	4629      	mov	r1, r5
 80038ea:	4630      	mov	r0, r6
 80038ec:	f7ff ffa6 	bl	800383c <sbrk_aligned>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d03a      	beq.n	800396a <_malloc_r+0xea>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	442b      	add	r3, r5
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	f8d8 3000 	ldr.w	r3, [r8]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	bb62      	cbnz	r2, 800395c <_malloc_r+0xdc>
 8003902:	f8c8 7000 	str.w	r7, [r8]
 8003906:	e00f      	b.n	8003928 <_malloc_r+0xa8>
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	1b52      	subs	r2, r2, r5
 800390c:	d420      	bmi.n	8003950 <_malloc_r+0xd0>
 800390e:	2a0b      	cmp	r2, #11
 8003910:	d917      	bls.n	8003942 <_malloc_r+0xc2>
 8003912:	1961      	adds	r1, r4, r5
 8003914:	42a3      	cmp	r3, r4
 8003916:	6025      	str	r5, [r4, #0]
 8003918:	bf18      	it	ne
 800391a:	6059      	strne	r1, [r3, #4]
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	bf08      	it	eq
 8003920:	f8c8 1000 	streq.w	r1, [r8]
 8003924:	5162      	str	r2, [r4, r5]
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f82f 	bl	800398c <__malloc_unlock>
 800392e:	f104 000b 	add.w	r0, r4, #11
 8003932:	1d23      	adds	r3, r4, #4
 8003934:	f020 0007 	bic.w	r0, r0, #7
 8003938:	1ac2      	subs	r2, r0, r3
 800393a:	bf1c      	itt	ne
 800393c:	1a1b      	subne	r3, r3, r0
 800393e:	50a3      	strne	r3, [r4, r2]
 8003940:	e7af      	b.n	80038a2 <_malloc_r+0x22>
 8003942:	6862      	ldr	r2, [r4, #4]
 8003944:	42a3      	cmp	r3, r4
 8003946:	bf0c      	ite	eq
 8003948:	f8c8 2000 	streq.w	r2, [r8]
 800394c:	605a      	strne	r2, [r3, #4]
 800394e:	e7eb      	b.n	8003928 <_malloc_r+0xa8>
 8003950:	4623      	mov	r3, r4
 8003952:	6864      	ldr	r4, [r4, #4]
 8003954:	e7ae      	b.n	80038b4 <_malloc_r+0x34>
 8003956:	463c      	mov	r4, r7
 8003958:	687f      	ldr	r7, [r7, #4]
 800395a:	e7b6      	b.n	80038ca <_malloc_r+0x4a>
 800395c:	461a      	mov	r2, r3
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	42a3      	cmp	r3, r4
 8003962:	d1fb      	bne.n	800395c <_malloc_r+0xdc>
 8003964:	2300      	movs	r3, #0
 8003966:	6053      	str	r3, [r2, #4]
 8003968:	e7de      	b.n	8003928 <_malloc_r+0xa8>
 800396a:	230c      	movs	r3, #12
 800396c:	6033      	str	r3, [r6, #0]
 800396e:	4630      	mov	r0, r6
 8003970:	f000 f80c 	bl	800398c <__malloc_unlock>
 8003974:	e794      	b.n	80038a0 <_malloc_r+0x20>
 8003976:	6005      	str	r5, [r0, #0]
 8003978:	e7d6      	b.n	8003928 <_malloc_r+0xa8>
 800397a:	bf00      	nop
 800397c:	20000384 	.word	0x20000384

08003980 <__malloc_lock>:
 8003980:	4801      	ldr	r0, [pc, #4]	@ (8003988 <__malloc_lock+0x8>)
 8003982:	f000 b87f 	b.w	8003a84 <__retarget_lock_acquire_recursive>
 8003986:	bf00      	nop
 8003988:	200004c4 	.word	0x200004c4

0800398c <__malloc_unlock>:
 800398c:	4801      	ldr	r0, [pc, #4]	@ (8003994 <__malloc_unlock+0x8>)
 800398e:	f000 b87a 	b.w	8003a86 <__retarget_lock_release_recursive>
 8003992:	bf00      	nop
 8003994:	200004c4 	.word	0x200004c4

08003998 <sniprintf>:
 8003998:	b40c      	push	{r2, r3}
 800399a:	b530      	push	{r4, r5, lr}
 800399c:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <sniprintf+0x64>)
 800399e:	1e0c      	subs	r4, r1, #0
 80039a0:	681d      	ldr	r5, [r3, #0]
 80039a2:	b09d      	sub	sp, #116	@ 0x74
 80039a4:	da08      	bge.n	80039b8 <sniprintf+0x20>
 80039a6:	238b      	movs	r3, #139	@ 0x8b
 80039a8:	602b      	str	r3, [r5, #0]
 80039aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039ae:	b01d      	add	sp, #116	@ 0x74
 80039b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039b4:	b002      	add	sp, #8
 80039b6:	4770      	bx	lr
 80039b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80039bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80039c0:	bf14      	ite	ne
 80039c2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80039c6:	4623      	moveq	r3, r4
 80039c8:	9304      	str	r3, [sp, #16]
 80039ca:	9307      	str	r3, [sp, #28]
 80039cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039d0:	9002      	str	r0, [sp, #8]
 80039d2:	9006      	str	r0, [sp, #24]
 80039d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80039da:	ab21      	add	r3, sp, #132	@ 0x84
 80039dc:	a902      	add	r1, sp, #8
 80039de:	4628      	mov	r0, r5
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	f000 f905 	bl	8003bf0 <_svfiprintf_r>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	bfbc      	itt	lt
 80039ea:	238b      	movlt	r3, #139	@ 0x8b
 80039ec:	602b      	strlt	r3, [r5, #0]
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	d0dd      	beq.n	80039ae <sniprintf+0x16>
 80039f2:	9b02      	ldr	r3, [sp, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e7d9      	b.n	80039ae <sniprintf+0x16>
 80039fa:	bf00      	nop
 80039fc:	2000017c 	.word	0x2000017c

08003a00 <memset>:
 8003a00:	4402      	add	r2, r0
 8003a02:	4603      	mov	r3, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <_sbrk_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4d06      	ldr	r5, [pc, #24]	@ (8003a2c <_sbrk_r+0x1c>)
 8003a14:	2300      	movs	r3, #0
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	602b      	str	r3, [r5, #0]
 8003a1c:	f7fd fdc2 	bl	80015a4 <_sbrk>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_sbrk_r+0x1a>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_sbrk_r+0x1a>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	200004c0 	.word	0x200004c0

08003a30 <__errno>:
 8003a30:	4b01      	ldr	r3, [pc, #4]	@ (8003a38 <__errno+0x8>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	2000017c 	.word	0x2000017c

08003a3c <__libc_init_array>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a74 <__libc_init_array+0x38>)
 8003a40:	4c0d      	ldr	r4, [pc, #52]	@ (8003a78 <__libc_init_array+0x3c>)
 8003a42:	1b64      	subs	r4, r4, r5
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	2600      	movs	r6, #0
 8003a48:	42a6      	cmp	r6, r4
 8003a4a:	d109      	bne.n	8003a60 <__libc_init_array+0x24>
 8003a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a7c <__libc_init_array+0x40>)
 8003a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a80 <__libc_init_array+0x44>)
 8003a50:	f000 fba8 	bl	80041a4 <_init>
 8003a54:	1b64      	subs	r4, r4, r5
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	2600      	movs	r6, #0
 8003a5a:	42a6      	cmp	r6, r4
 8003a5c:	d105      	bne.n	8003a6a <__libc_init_array+0x2e>
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a64:	4798      	blx	r3
 8003a66:	3601      	adds	r6, #1
 8003a68:	e7ee      	b.n	8003a48 <__libc_init_array+0xc>
 8003a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a6e:	4798      	blx	r3
 8003a70:	3601      	adds	r6, #1
 8003a72:	e7f2      	b.n	8003a5a <__libc_init_array+0x1e>
 8003a74:	08004258 	.word	0x08004258
 8003a78:	08004258 	.word	0x08004258
 8003a7c:	08004258 	.word	0x08004258
 8003a80:	0800425c 	.word	0x0800425c

08003a84 <__retarget_lock_acquire_recursive>:
 8003a84:	4770      	bx	lr

08003a86 <__retarget_lock_release_recursive>:
 8003a86:	4770      	bx	lr

08003a88 <memcpy>:
 8003a88:	440a      	add	r2, r1
 8003a8a:	4291      	cmp	r1, r2
 8003a8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003a90:	d100      	bne.n	8003a94 <memcpy+0xc>
 8003a92:	4770      	bx	lr
 8003a94:	b510      	push	{r4, lr}
 8003a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a9e:	4291      	cmp	r1, r2
 8003aa0:	d1f9      	bne.n	8003a96 <memcpy+0xe>
 8003aa2:	bd10      	pop	{r4, pc}

08003aa4 <_free_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	2900      	cmp	r1, #0
 8003aaa:	d041      	beq.n	8003b30 <_free_r+0x8c>
 8003aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab0:	1f0c      	subs	r4, r1, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bfb8      	it	lt
 8003ab6:	18e4      	addlt	r4, r4, r3
 8003ab8:	f7ff ff62 	bl	8003980 <__malloc_lock>
 8003abc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b34 <_free_r+0x90>)
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	b933      	cbnz	r3, 8003ad0 <_free_r+0x2c>
 8003ac2:	6063      	str	r3, [r4, #4]
 8003ac4:	6014      	str	r4, [r2, #0]
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003acc:	f7ff bf5e 	b.w	800398c <__malloc_unlock>
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	d908      	bls.n	8003ae6 <_free_r+0x42>
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	1821      	adds	r1, r4, r0
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	bf01      	itttt	eq
 8003adc:	6819      	ldreq	r1, [r3, #0]
 8003ade:	685b      	ldreq	r3, [r3, #4]
 8003ae0:	1809      	addeq	r1, r1, r0
 8003ae2:	6021      	streq	r1, [r4, #0]
 8003ae4:	e7ed      	b.n	8003ac2 <_free_r+0x1e>
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	b10b      	cbz	r3, 8003af0 <_free_r+0x4c>
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	d9fa      	bls.n	8003ae6 <_free_r+0x42>
 8003af0:	6811      	ldr	r1, [r2, #0]
 8003af2:	1850      	adds	r0, r2, r1
 8003af4:	42a0      	cmp	r0, r4
 8003af6:	d10b      	bne.n	8003b10 <_free_r+0x6c>
 8003af8:	6820      	ldr	r0, [r4, #0]
 8003afa:	4401      	add	r1, r0
 8003afc:	1850      	adds	r0, r2, r1
 8003afe:	4283      	cmp	r3, r0
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	d1e0      	bne.n	8003ac6 <_free_r+0x22>
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	6053      	str	r3, [r2, #4]
 8003b0a:	4408      	add	r0, r1
 8003b0c:	6010      	str	r0, [r2, #0]
 8003b0e:	e7da      	b.n	8003ac6 <_free_r+0x22>
 8003b10:	d902      	bls.n	8003b18 <_free_r+0x74>
 8003b12:	230c      	movs	r3, #12
 8003b14:	602b      	str	r3, [r5, #0]
 8003b16:	e7d6      	b.n	8003ac6 <_free_r+0x22>
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	1821      	adds	r1, r4, r0
 8003b1c:	428b      	cmp	r3, r1
 8003b1e:	bf04      	itt	eq
 8003b20:	6819      	ldreq	r1, [r3, #0]
 8003b22:	685b      	ldreq	r3, [r3, #4]
 8003b24:	6063      	str	r3, [r4, #4]
 8003b26:	bf04      	itt	eq
 8003b28:	1809      	addeq	r1, r1, r0
 8003b2a:	6021      	streq	r1, [r4, #0]
 8003b2c:	6054      	str	r4, [r2, #4]
 8003b2e:	e7ca      	b.n	8003ac6 <_free_r+0x22>
 8003b30:	bd38      	pop	{r3, r4, r5, pc}
 8003b32:	bf00      	nop
 8003b34:	20000384 	.word	0x20000384

08003b38 <__ssputs_r>:
 8003b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b3c:	688e      	ldr	r6, [r1, #8]
 8003b3e:	461f      	mov	r7, r3
 8003b40:	42be      	cmp	r6, r7
 8003b42:	680b      	ldr	r3, [r1, #0]
 8003b44:	4682      	mov	sl, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	4690      	mov	r8, r2
 8003b4a:	d82d      	bhi.n	8003ba8 <__ssputs_r+0x70>
 8003b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b54:	d026      	beq.n	8003ba4 <__ssputs_r+0x6c>
 8003b56:	6965      	ldr	r5, [r4, #20]
 8003b58:	6909      	ldr	r1, [r1, #16]
 8003b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b5e:	eba3 0901 	sub.w	r9, r3, r1
 8003b62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b66:	1c7b      	adds	r3, r7, #1
 8003b68:	444b      	add	r3, r9
 8003b6a:	106d      	asrs	r5, r5, #1
 8003b6c:	429d      	cmp	r5, r3
 8003b6e:	bf38      	it	cc
 8003b70:	461d      	movcc	r5, r3
 8003b72:	0553      	lsls	r3, r2, #21
 8003b74:	d527      	bpl.n	8003bc6 <__ssputs_r+0x8e>
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7ff fe82 	bl	8003880 <_malloc_r>
 8003b7c:	4606      	mov	r6, r0
 8003b7e:	b360      	cbz	r0, 8003bda <__ssputs_r+0xa2>
 8003b80:	6921      	ldr	r1, [r4, #16]
 8003b82:	464a      	mov	r2, r9
 8003b84:	f7ff ff80 	bl	8003a88 <memcpy>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	6126      	str	r6, [r4, #16]
 8003b96:	6165      	str	r5, [r4, #20]
 8003b98:	444e      	add	r6, r9
 8003b9a:	eba5 0509 	sub.w	r5, r5, r9
 8003b9e:	6026      	str	r6, [r4, #0]
 8003ba0:	60a5      	str	r5, [r4, #8]
 8003ba2:	463e      	mov	r6, r7
 8003ba4:	42be      	cmp	r6, r7
 8003ba6:	d900      	bls.n	8003baa <__ssputs_r+0x72>
 8003ba8:	463e      	mov	r6, r7
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	4632      	mov	r2, r6
 8003bae:	4641      	mov	r1, r8
 8003bb0:	f000 faa8 	bl	8004104 <memmove>
 8003bb4:	68a3      	ldr	r3, [r4, #8]
 8003bb6:	1b9b      	subs	r3, r3, r6
 8003bb8:	60a3      	str	r3, [r4, #8]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	4433      	add	r3, r6
 8003bbe:	6023      	str	r3, [r4, #0]
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	f000 fab6 	bl	8004138 <_realloc_r>
 8003bcc:	4606      	mov	r6, r0
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d1e0      	bne.n	8003b94 <__ssputs_r+0x5c>
 8003bd2:	6921      	ldr	r1, [r4, #16]
 8003bd4:	4650      	mov	r0, sl
 8003bd6:	f7ff ff65 	bl	8003aa4 <_free_r>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	f8ca 3000 	str.w	r3, [sl]
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003be6:	81a3      	strh	r3, [r4, #12]
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bec:	e7e9      	b.n	8003bc2 <__ssputs_r+0x8a>
	...

08003bf0 <_svfiprintf_r>:
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf4:	4698      	mov	r8, r3
 8003bf6:	898b      	ldrh	r3, [r1, #12]
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	b09d      	sub	sp, #116	@ 0x74
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	460d      	mov	r5, r1
 8003c00:	4614      	mov	r4, r2
 8003c02:	d510      	bpl.n	8003c26 <_svfiprintf_r+0x36>
 8003c04:	690b      	ldr	r3, [r1, #16]
 8003c06:	b973      	cbnz	r3, 8003c26 <_svfiprintf_r+0x36>
 8003c08:	2140      	movs	r1, #64	@ 0x40
 8003c0a:	f7ff fe39 	bl	8003880 <_malloc_r>
 8003c0e:	6028      	str	r0, [r5, #0]
 8003c10:	6128      	str	r0, [r5, #16]
 8003c12:	b930      	cbnz	r0, 8003c22 <_svfiprintf_r+0x32>
 8003c14:	230c      	movs	r3, #12
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c1c:	b01d      	add	sp, #116	@ 0x74
 8003c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c22:	2340      	movs	r3, #64	@ 0x40
 8003c24:	616b      	str	r3, [r5, #20]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c34:	2330      	movs	r3, #48	@ 0x30
 8003c36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003dd4 <_svfiprintf_r+0x1e4>
 8003c3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c3e:	f04f 0901 	mov.w	r9, #1
 8003c42:	4623      	mov	r3, r4
 8003c44:	469a      	mov	sl, r3
 8003c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c4a:	b10a      	cbz	r2, 8003c50 <_svfiprintf_r+0x60>
 8003c4c:	2a25      	cmp	r2, #37	@ 0x25
 8003c4e:	d1f9      	bne.n	8003c44 <_svfiprintf_r+0x54>
 8003c50:	ebba 0b04 	subs.w	fp, sl, r4
 8003c54:	d00b      	beq.n	8003c6e <_svfiprintf_r+0x7e>
 8003c56:	465b      	mov	r3, fp
 8003c58:	4622      	mov	r2, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	f7ff ff6b 	bl	8003b38 <__ssputs_r>
 8003c62:	3001      	adds	r0, #1
 8003c64:	f000 80a7 	beq.w	8003db6 <_svfiprintf_r+0x1c6>
 8003c68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c6a:	445a      	add	r2, fp
 8003c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 809f 	beq.w	8003db6 <_svfiprintf_r+0x1c6>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c82:	f10a 0a01 	add.w	sl, sl, #1
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	9307      	str	r3, [sp, #28]
 8003c8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c90:	4654      	mov	r4, sl
 8003c92:	2205      	movs	r2, #5
 8003c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c98:	484e      	ldr	r0, [pc, #312]	@ (8003dd4 <_svfiprintf_r+0x1e4>)
 8003c9a:	f7fc fa99 	bl	80001d0 <memchr>
 8003c9e:	9a04      	ldr	r2, [sp, #16]
 8003ca0:	b9d8      	cbnz	r0, 8003cda <_svfiprintf_r+0xea>
 8003ca2:	06d0      	lsls	r0, r2, #27
 8003ca4:	bf44      	itt	mi
 8003ca6:	2320      	movmi	r3, #32
 8003ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cac:	0711      	lsls	r1, r2, #28
 8003cae:	bf44      	itt	mi
 8003cb0:	232b      	movmi	r3, #43	@ 0x2b
 8003cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cbc:	d015      	beq.n	8003cea <_svfiprintf_r+0xfa>
 8003cbe:	9a07      	ldr	r2, [sp, #28]
 8003cc0:	4654      	mov	r4, sl
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f04f 0c0a 	mov.w	ip, #10
 8003cc8:	4621      	mov	r1, r4
 8003cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cce:	3b30      	subs	r3, #48	@ 0x30
 8003cd0:	2b09      	cmp	r3, #9
 8003cd2:	d94b      	bls.n	8003d6c <_svfiprintf_r+0x17c>
 8003cd4:	b1b0      	cbz	r0, 8003d04 <_svfiprintf_r+0x114>
 8003cd6:	9207      	str	r2, [sp, #28]
 8003cd8:	e014      	b.n	8003d04 <_svfiprintf_r+0x114>
 8003cda:	eba0 0308 	sub.w	r3, r0, r8
 8003cde:	fa09 f303 	lsl.w	r3, r9, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	9304      	str	r3, [sp, #16]
 8003ce6:	46a2      	mov	sl, r4
 8003ce8:	e7d2      	b.n	8003c90 <_svfiprintf_r+0xa0>
 8003cea:	9b03      	ldr	r3, [sp, #12]
 8003cec:	1d19      	adds	r1, r3, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	9103      	str	r1, [sp, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bfbb      	ittet	lt
 8003cf6:	425b      	neglt	r3, r3
 8003cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8003cfc:	9307      	strge	r3, [sp, #28]
 8003cfe:	9307      	strlt	r3, [sp, #28]
 8003d00:	bfb8      	it	lt
 8003d02:	9204      	strlt	r2, [sp, #16]
 8003d04:	7823      	ldrb	r3, [r4, #0]
 8003d06:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d08:	d10a      	bne.n	8003d20 <_svfiprintf_r+0x130>
 8003d0a:	7863      	ldrb	r3, [r4, #1]
 8003d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d0e:	d132      	bne.n	8003d76 <_svfiprintf_r+0x186>
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	1d1a      	adds	r2, r3, #4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	9203      	str	r2, [sp, #12]
 8003d18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d1c:	3402      	adds	r4, #2
 8003d1e:	9305      	str	r3, [sp, #20]
 8003d20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003de4 <_svfiprintf_r+0x1f4>
 8003d24:	7821      	ldrb	r1, [r4, #0]
 8003d26:	2203      	movs	r2, #3
 8003d28:	4650      	mov	r0, sl
 8003d2a:	f7fc fa51 	bl	80001d0 <memchr>
 8003d2e:	b138      	cbz	r0, 8003d40 <_svfiprintf_r+0x150>
 8003d30:	9b04      	ldr	r3, [sp, #16]
 8003d32:	eba0 000a 	sub.w	r0, r0, sl
 8003d36:	2240      	movs	r2, #64	@ 0x40
 8003d38:	4082      	lsls	r2, r0
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	3401      	adds	r4, #1
 8003d3e:	9304      	str	r3, [sp, #16]
 8003d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d44:	4824      	ldr	r0, [pc, #144]	@ (8003dd8 <_svfiprintf_r+0x1e8>)
 8003d46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d4a:	2206      	movs	r2, #6
 8003d4c:	f7fc fa40 	bl	80001d0 <memchr>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d036      	beq.n	8003dc2 <_svfiprintf_r+0x1d2>
 8003d54:	4b21      	ldr	r3, [pc, #132]	@ (8003ddc <_svfiprintf_r+0x1ec>)
 8003d56:	bb1b      	cbnz	r3, 8003da0 <_svfiprintf_r+0x1b0>
 8003d58:	9b03      	ldr	r3, [sp, #12]
 8003d5a:	3307      	adds	r3, #7
 8003d5c:	f023 0307 	bic.w	r3, r3, #7
 8003d60:	3308      	adds	r3, #8
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d66:	4433      	add	r3, r6
 8003d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d6a:	e76a      	b.n	8003c42 <_svfiprintf_r+0x52>
 8003d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d70:	460c      	mov	r4, r1
 8003d72:	2001      	movs	r0, #1
 8003d74:	e7a8      	b.n	8003cc8 <_svfiprintf_r+0xd8>
 8003d76:	2300      	movs	r3, #0
 8003d78:	3401      	adds	r4, #1
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f04f 0c0a 	mov.w	ip, #10
 8003d82:	4620      	mov	r0, r4
 8003d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d88:	3a30      	subs	r2, #48	@ 0x30
 8003d8a:	2a09      	cmp	r2, #9
 8003d8c:	d903      	bls.n	8003d96 <_svfiprintf_r+0x1a6>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0c6      	beq.n	8003d20 <_svfiprintf_r+0x130>
 8003d92:	9105      	str	r1, [sp, #20]
 8003d94:	e7c4      	b.n	8003d20 <_svfiprintf_r+0x130>
 8003d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e7f0      	b.n	8003d82 <_svfiprintf_r+0x192>
 8003da0:	ab03      	add	r3, sp, #12
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	462a      	mov	r2, r5
 8003da6:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <_svfiprintf_r+0x1f0>)
 8003da8:	a904      	add	r1, sp, #16
 8003daa:	4638      	mov	r0, r7
 8003dac:	f3af 8000 	nop.w
 8003db0:	1c42      	adds	r2, r0, #1
 8003db2:	4606      	mov	r6, r0
 8003db4:	d1d6      	bne.n	8003d64 <_svfiprintf_r+0x174>
 8003db6:	89ab      	ldrh	r3, [r5, #12]
 8003db8:	065b      	lsls	r3, r3, #25
 8003dba:	f53f af2d 	bmi.w	8003c18 <_svfiprintf_r+0x28>
 8003dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dc0:	e72c      	b.n	8003c1c <_svfiprintf_r+0x2c>
 8003dc2:	ab03      	add	r3, sp, #12
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <_svfiprintf_r+0x1f0>)
 8003dca:	a904      	add	r1, sp, #16
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f000 f879 	bl	8003ec4 <_printf_i>
 8003dd2:	e7ed      	b.n	8003db0 <_svfiprintf_r+0x1c0>
 8003dd4:	0800421c 	.word	0x0800421c
 8003dd8:	08004226 	.word	0x08004226
 8003ddc:	00000000 	.word	0x00000000
 8003de0:	08003b39 	.word	0x08003b39
 8003de4:	08004222 	.word	0x08004222

08003de8 <_printf_common>:
 8003de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dec:	4616      	mov	r6, r2
 8003dee:	4698      	mov	r8, r3
 8003df0:	688a      	ldr	r2, [r1, #8]
 8003df2:	690b      	ldr	r3, [r1, #16]
 8003df4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	bfb8      	it	lt
 8003dfc:	4613      	movlt	r3, r2
 8003dfe:	6033      	str	r3, [r6, #0]
 8003e00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e04:	4607      	mov	r7, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	b10a      	cbz	r2, 8003e0e <_printf_common+0x26>
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	6033      	str	r3, [r6, #0]
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	0699      	lsls	r1, r3, #26
 8003e12:	bf42      	ittt	mi
 8003e14:	6833      	ldrmi	r3, [r6, #0]
 8003e16:	3302      	addmi	r3, #2
 8003e18:	6033      	strmi	r3, [r6, #0]
 8003e1a:	6825      	ldr	r5, [r4, #0]
 8003e1c:	f015 0506 	ands.w	r5, r5, #6
 8003e20:	d106      	bne.n	8003e30 <_printf_common+0x48>
 8003e22:	f104 0a19 	add.w	sl, r4, #25
 8003e26:	68e3      	ldr	r3, [r4, #12]
 8003e28:	6832      	ldr	r2, [r6, #0]
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	42ab      	cmp	r3, r5
 8003e2e:	dc26      	bgt.n	8003e7e <_printf_common+0x96>
 8003e30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	3b00      	subs	r3, #0
 8003e38:	bf18      	it	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	0692      	lsls	r2, r2, #26
 8003e3e:	d42b      	bmi.n	8003e98 <_printf_common+0xb0>
 8003e40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e44:	4641      	mov	r1, r8
 8003e46:	4638      	mov	r0, r7
 8003e48:	47c8      	blx	r9
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d01e      	beq.n	8003e8c <_printf_common+0xa4>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	6922      	ldr	r2, [r4, #16]
 8003e52:	f003 0306 	and.w	r3, r3, #6
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	bf02      	ittt	eq
 8003e5a:	68e5      	ldreq	r5, [r4, #12]
 8003e5c:	6833      	ldreq	r3, [r6, #0]
 8003e5e:	1aed      	subeq	r5, r5, r3
 8003e60:	68a3      	ldr	r3, [r4, #8]
 8003e62:	bf0c      	ite	eq
 8003e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e68:	2500      	movne	r5, #0
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bfc4      	itt	gt
 8003e6e:	1a9b      	subgt	r3, r3, r2
 8003e70:	18ed      	addgt	r5, r5, r3
 8003e72:	2600      	movs	r6, #0
 8003e74:	341a      	adds	r4, #26
 8003e76:	42b5      	cmp	r5, r6
 8003e78:	d11a      	bne.n	8003eb0 <_printf_common+0xc8>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e008      	b.n	8003e90 <_printf_common+0xa8>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4652      	mov	r2, sl
 8003e82:	4641      	mov	r1, r8
 8003e84:	4638      	mov	r0, r7
 8003e86:	47c8      	blx	r9
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d103      	bne.n	8003e94 <_printf_common+0xac>
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e94:	3501      	adds	r5, #1
 8003e96:	e7c6      	b.n	8003e26 <_printf_common+0x3e>
 8003e98:	18e1      	adds	r1, r4, r3
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	2030      	movs	r0, #48	@ 0x30
 8003e9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ea2:	4422      	add	r2, r4
 8003ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ea8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003eac:	3302      	adds	r3, #2
 8003eae:	e7c7      	b.n	8003e40 <_printf_common+0x58>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	47c8      	blx	r9
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d0e6      	beq.n	8003e8c <_printf_common+0xa4>
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	e7d9      	b.n	8003e76 <_printf_common+0x8e>
	...

08003ec4 <_printf_i>:
 8003ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	7e0f      	ldrb	r7, [r1, #24]
 8003eca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ecc:	2f78      	cmp	r7, #120	@ 0x78
 8003ece:	4691      	mov	r9, r2
 8003ed0:	4680      	mov	r8, r0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	469a      	mov	sl, r3
 8003ed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eda:	d807      	bhi.n	8003eec <_printf_i+0x28>
 8003edc:	2f62      	cmp	r7, #98	@ 0x62
 8003ede:	d80a      	bhi.n	8003ef6 <_printf_i+0x32>
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	f000 80d2 	beq.w	800408a <_printf_i+0x1c6>
 8003ee6:	2f58      	cmp	r7, #88	@ 0x58
 8003ee8:	f000 80b9 	beq.w	800405e <_printf_i+0x19a>
 8003eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ef4:	e03a      	b.n	8003f6c <_printf_i+0xa8>
 8003ef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003efa:	2b15      	cmp	r3, #21
 8003efc:	d8f6      	bhi.n	8003eec <_printf_i+0x28>
 8003efe:	a101      	add	r1, pc, #4	@ (adr r1, 8003f04 <_printf_i+0x40>)
 8003f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003eed 	.word	0x08003eed
 8003f10:	08003eed 	.word	0x08003eed
 8003f14:	08003eed 	.word	0x08003eed
 8003f18:	08003eed 	.word	0x08003eed
 8003f1c:	08003f71 	.word	0x08003f71
 8003f20:	08003eed 	.word	0x08003eed
 8003f24:	08003eed 	.word	0x08003eed
 8003f28:	08003eed 	.word	0x08003eed
 8003f2c:	08003eed 	.word	0x08003eed
 8003f30:	08004071 	.word	0x08004071
 8003f34:	08003f9b 	.word	0x08003f9b
 8003f38:	0800402b 	.word	0x0800402b
 8003f3c:	08003eed 	.word	0x08003eed
 8003f40:	08003eed 	.word	0x08003eed
 8003f44:	08004093 	.word	0x08004093
 8003f48:	08003eed 	.word	0x08003eed
 8003f4c:	08003f9b 	.word	0x08003f9b
 8003f50:	08003eed 	.word	0x08003eed
 8003f54:	08003eed 	.word	0x08003eed
 8003f58:	08004033 	.word	0x08004033
 8003f5c:	6833      	ldr	r3, [r6, #0]
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6032      	str	r2, [r6, #0]
 8003f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e09d      	b.n	80040ac <_printf_i+0x1e8>
 8003f70:	6833      	ldr	r3, [r6, #0]
 8003f72:	6820      	ldr	r0, [r4, #0]
 8003f74:	1d19      	adds	r1, r3, #4
 8003f76:	6031      	str	r1, [r6, #0]
 8003f78:	0606      	lsls	r6, r0, #24
 8003f7a:	d501      	bpl.n	8003f80 <_printf_i+0xbc>
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	e003      	b.n	8003f88 <_printf_i+0xc4>
 8003f80:	0645      	lsls	r5, r0, #25
 8003f82:	d5fb      	bpl.n	8003f7c <_printf_i+0xb8>
 8003f84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	da03      	bge.n	8003f94 <_printf_i+0xd0>
 8003f8c:	232d      	movs	r3, #45	@ 0x2d
 8003f8e:	426d      	negs	r5, r5
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f94:	4859      	ldr	r0, [pc, #356]	@ (80040fc <_printf_i+0x238>)
 8003f96:	230a      	movs	r3, #10
 8003f98:	e011      	b.n	8003fbe <_printf_i+0xfa>
 8003f9a:	6821      	ldr	r1, [r4, #0]
 8003f9c:	6833      	ldr	r3, [r6, #0]
 8003f9e:	0608      	lsls	r0, r1, #24
 8003fa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fa4:	d402      	bmi.n	8003fac <_printf_i+0xe8>
 8003fa6:	0649      	lsls	r1, r1, #25
 8003fa8:	bf48      	it	mi
 8003faa:	b2ad      	uxthmi	r5, r5
 8003fac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fae:	4853      	ldr	r0, [pc, #332]	@ (80040fc <_printf_i+0x238>)
 8003fb0:	6033      	str	r3, [r6, #0]
 8003fb2:	bf14      	ite	ne
 8003fb4:	230a      	movne	r3, #10
 8003fb6:	2308      	moveq	r3, #8
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fbe:	6866      	ldr	r6, [r4, #4]
 8003fc0:	60a6      	str	r6, [r4, #8]
 8003fc2:	2e00      	cmp	r6, #0
 8003fc4:	bfa2      	ittt	ge
 8003fc6:	6821      	ldrge	r1, [r4, #0]
 8003fc8:	f021 0104 	bicge.w	r1, r1, #4
 8003fcc:	6021      	strge	r1, [r4, #0]
 8003fce:	b90d      	cbnz	r5, 8003fd4 <_printf_i+0x110>
 8003fd0:	2e00      	cmp	r6, #0
 8003fd2:	d04b      	beq.n	800406c <_printf_i+0x1a8>
 8003fd4:	4616      	mov	r6, r2
 8003fd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fda:	fb03 5711 	mls	r7, r3, r1, r5
 8003fde:	5dc7      	ldrb	r7, [r0, r7]
 8003fe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fe4:	462f      	mov	r7, r5
 8003fe6:	42bb      	cmp	r3, r7
 8003fe8:	460d      	mov	r5, r1
 8003fea:	d9f4      	bls.n	8003fd6 <_printf_i+0x112>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d10b      	bne.n	8004008 <_printf_i+0x144>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	07df      	lsls	r7, r3, #31
 8003ff4:	d508      	bpl.n	8004008 <_printf_i+0x144>
 8003ff6:	6923      	ldr	r3, [r4, #16]
 8003ff8:	6861      	ldr	r1, [r4, #4]
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	bfde      	ittt	le
 8003ffe:	2330      	movle	r3, #48	@ 0x30
 8004000:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004004:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004008:	1b92      	subs	r2, r2, r6
 800400a:	6122      	str	r2, [r4, #16]
 800400c:	f8cd a000 	str.w	sl, [sp]
 8004010:	464b      	mov	r3, r9
 8004012:	aa03      	add	r2, sp, #12
 8004014:	4621      	mov	r1, r4
 8004016:	4640      	mov	r0, r8
 8004018:	f7ff fee6 	bl	8003de8 <_printf_common>
 800401c:	3001      	adds	r0, #1
 800401e:	d14a      	bne.n	80040b6 <_printf_i+0x1f2>
 8004020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004024:	b004      	add	sp, #16
 8004026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	4833      	ldr	r0, [pc, #204]	@ (8004100 <_printf_i+0x23c>)
 8004034:	2778      	movs	r7, #120	@ 0x78
 8004036:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	6831      	ldr	r1, [r6, #0]
 800403e:	061f      	lsls	r7, r3, #24
 8004040:	f851 5b04 	ldr.w	r5, [r1], #4
 8004044:	d402      	bmi.n	800404c <_printf_i+0x188>
 8004046:	065f      	lsls	r7, r3, #25
 8004048:	bf48      	it	mi
 800404a:	b2ad      	uxthmi	r5, r5
 800404c:	6031      	str	r1, [r6, #0]
 800404e:	07d9      	lsls	r1, r3, #31
 8004050:	bf44      	itt	mi
 8004052:	f043 0320 	orrmi.w	r3, r3, #32
 8004056:	6023      	strmi	r3, [r4, #0]
 8004058:	b11d      	cbz	r5, 8004062 <_printf_i+0x19e>
 800405a:	2310      	movs	r3, #16
 800405c:	e7ac      	b.n	8003fb8 <_printf_i+0xf4>
 800405e:	4827      	ldr	r0, [pc, #156]	@ (80040fc <_printf_i+0x238>)
 8004060:	e7e9      	b.n	8004036 <_printf_i+0x172>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	f023 0320 	bic.w	r3, r3, #32
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	e7f6      	b.n	800405a <_printf_i+0x196>
 800406c:	4616      	mov	r6, r2
 800406e:	e7bd      	b.n	8003fec <_printf_i+0x128>
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	6825      	ldr	r5, [r4, #0]
 8004074:	6961      	ldr	r1, [r4, #20]
 8004076:	1d18      	adds	r0, r3, #4
 8004078:	6030      	str	r0, [r6, #0]
 800407a:	062e      	lsls	r6, r5, #24
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	d501      	bpl.n	8004084 <_printf_i+0x1c0>
 8004080:	6019      	str	r1, [r3, #0]
 8004082:	e002      	b.n	800408a <_printf_i+0x1c6>
 8004084:	0668      	lsls	r0, r5, #25
 8004086:	d5fb      	bpl.n	8004080 <_printf_i+0x1bc>
 8004088:	8019      	strh	r1, [r3, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	6123      	str	r3, [r4, #16]
 800408e:	4616      	mov	r6, r2
 8004090:	e7bc      	b.n	800400c <_printf_i+0x148>
 8004092:	6833      	ldr	r3, [r6, #0]
 8004094:	1d1a      	adds	r2, r3, #4
 8004096:	6032      	str	r2, [r6, #0]
 8004098:	681e      	ldr	r6, [r3, #0]
 800409a:	6862      	ldr	r2, [r4, #4]
 800409c:	2100      	movs	r1, #0
 800409e:	4630      	mov	r0, r6
 80040a0:	f7fc f896 	bl	80001d0 <memchr>
 80040a4:	b108      	cbz	r0, 80040aa <_printf_i+0x1e6>
 80040a6:	1b80      	subs	r0, r0, r6
 80040a8:	6060      	str	r0, [r4, #4]
 80040aa:	6863      	ldr	r3, [r4, #4]
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	2300      	movs	r3, #0
 80040b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b4:	e7aa      	b.n	800400c <_printf_i+0x148>
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	4632      	mov	r2, r6
 80040ba:	4649      	mov	r1, r9
 80040bc:	4640      	mov	r0, r8
 80040be:	47d0      	blx	sl
 80040c0:	3001      	adds	r0, #1
 80040c2:	d0ad      	beq.n	8004020 <_printf_i+0x15c>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	079b      	lsls	r3, r3, #30
 80040c8:	d413      	bmi.n	80040f2 <_printf_i+0x22e>
 80040ca:	68e0      	ldr	r0, [r4, #12]
 80040cc:	9b03      	ldr	r3, [sp, #12]
 80040ce:	4298      	cmp	r0, r3
 80040d0:	bfb8      	it	lt
 80040d2:	4618      	movlt	r0, r3
 80040d4:	e7a6      	b.n	8004024 <_printf_i+0x160>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4632      	mov	r2, r6
 80040da:	4649      	mov	r1, r9
 80040dc:	4640      	mov	r0, r8
 80040de:	47d0      	blx	sl
 80040e0:	3001      	adds	r0, #1
 80040e2:	d09d      	beq.n	8004020 <_printf_i+0x15c>
 80040e4:	3501      	adds	r5, #1
 80040e6:	68e3      	ldr	r3, [r4, #12]
 80040e8:	9903      	ldr	r1, [sp, #12]
 80040ea:	1a5b      	subs	r3, r3, r1
 80040ec:	42ab      	cmp	r3, r5
 80040ee:	dcf2      	bgt.n	80040d6 <_printf_i+0x212>
 80040f0:	e7eb      	b.n	80040ca <_printf_i+0x206>
 80040f2:	2500      	movs	r5, #0
 80040f4:	f104 0619 	add.w	r6, r4, #25
 80040f8:	e7f5      	b.n	80040e6 <_printf_i+0x222>
 80040fa:	bf00      	nop
 80040fc:	0800422d 	.word	0x0800422d
 8004100:	0800423e 	.word	0x0800423e

08004104 <memmove>:
 8004104:	4288      	cmp	r0, r1
 8004106:	b510      	push	{r4, lr}
 8004108:	eb01 0402 	add.w	r4, r1, r2
 800410c:	d902      	bls.n	8004114 <memmove+0x10>
 800410e:	4284      	cmp	r4, r0
 8004110:	4623      	mov	r3, r4
 8004112:	d807      	bhi.n	8004124 <memmove+0x20>
 8004114:	1e43      	subs	r3, r0, #1
 8004116:	42a1      	cmp	r1, r4
 8004118:	d008      	beq.n	800412c <memmove+0x28>
 800411a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800411e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004122:	e7f8      	b.n	8004116 <memmove+0x12>
 8004124:	4402      	add	r2, r0
 8004126:	4601      	mov	r1, r0
 8004128:	428a      	cmp	r2, r1
 800412a:	d100      	bne.n	800412e <memmove+0x2a>
 800412c:	bd10      	pop	{r4, pc}
 800412e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004136:	e7f7      	b.n	8004128 <memmove+0x24>

08004138 <_realloc_r>:
 8004138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	4680      	mov	r8, r0
 800413e:	4615      	mov	r5, r2
 8004140:	460c      	mov	r4, r1
 8004142:	b921      	cbnz	r1, 800414e <_realloc_r+0x16>
 8004144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	4611      	mov	r1, r2
 800414a:	f7ff bb99 	b.w	8003880 <_malloc_r>
 800414e:	b92a      	cbnz	r2, 800415c <_realloc_r+0x24>
 8004150:	f7ff fca8 	bl	8003aa4 <_free_r>
 8004154:	2400      	movs	r4, #0
 8004156:	4620      	mov	r0, r4
 8004158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800415c:	f000 f81a 	bl	8004194 <_malloc_usable_size_r>
 8004160:	4285      	cmp	r5, r0
 8004162:	4606      	mov	r6, r0
 8004164:	d802      	bhi.n	800416c <_realloc_r+0x34>
 8004166:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800416a:	d8f4      	bhi.n	8004156 <_realloc_r+0x1e>
 800416c:	4629      	mov	r1, r5
 800416e:	4640      	mov	r0, r8
 8004170:	f7ff fb86 	bl	8003880 <_malloc_r>
 8004174:	4607      	mov	r7, r0
 8004176:	2800      	cmp	r0, #0
 8004178:	d0ec      	beq.n	8004154 <_realloc_r+0x1c>
 800417a:	42b5      	cmp	r5, r6
 800417c:	462a      	mov	r2, r5
 800417e:	4621      	mov	r1, r4
 8004180:	bf28      	it	cs
 8004182:	4632      	movcs	r2, r6
 8004184:	f7ff fc80 	bl	8003a88 <memcpy>
 8004188:	4621      	mov	r1, r4
 800418a:	4640      	mov	r0, r8
 800418c:	f7ff fc8a 	bl	8003aa4 <_free_r>
 8004190:	463c      	mov	r4, r7
 8004192:	e7e0      	b.n	8004156 <_realloc_r+0x1e>

08004194 <_malloc_usable_size_r>:
 8004194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004198:	1f18      	subs	r0, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfbc      	itt	lt
 800419e:	580b      	ldrlt	r3, [r1, r0]
 80041a0:	18c0      	addlt	r0, r0, r3
 80041a2:	4770      	bx	lr

080041a4 <_init>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr

080041b0 <_fini>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	bf00      	nop
 80041b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b6:	bc08      	pop	{r3}
 80041b8:	469e      	mov	lr, r3
 80041ba:	4770      	bx	lr
