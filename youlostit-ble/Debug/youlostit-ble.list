
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc4  08003fc4  000051b4  2**0
                  CONTENTS
  4 .ARM          00000008  08003fc4  08003fc4  00004fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fcc  08003fcc  000051b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fcc  08003fcc  00004fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  08003fd4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001b4  08004188  000051b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08004188  000054ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaff  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002090  00000000  00000000  0000fce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00011d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074b  00000000  00000000  00012750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027237  00000000  00000000  00012e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a818  00000000  00000000  0003a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e77  00000000  00000000  000448ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b50  00000000  00000000  001357a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  001382f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b4 	.word	0x200001b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f18 	.word	0x08003f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b8 	.word	0x200001b8
 80001cc:	08003f18 	.word	0x08003f18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000276:	2006      	movs	r0, #6
 8000278:	f003 f98a 	bl	8003590 <malloc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b70      	ldr	r3, [pc, #448]	@ (8000444 <ble_init+0x1d4>)
 8000282:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 8000284:	bf00      	nop
 8000286:	4b70      	ldr	r3, [pc, #448]	@ (8000448 <ble_init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800028e:	4b6d      	ldr	r3, [pc, #436]	@ (8000444 <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2106      	movs	r1, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f905 	bl	80004a4 <fetchBleEvent>
 800029a:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002a2:	4b68      	ldr	r3, [pc, #416]	@ (8000444 <ble_init+0x1d4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2206      	movs	r2, #6
 80002a8:	4968      	ldr	r1, [pc, #416]	@ (800044c <ble_init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f984 	bl	80005b8 <checkEventResp>
 80002b0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002b8:	4b65      	ldr	r3, [pc, #404]	@ (8000450 <ble_init+0x1e0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b63      	ldr	r3, [pc, #396]	@ (8000450 <ble_init+0x1e0>)
 80002c4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f001 fa64 	bl	8001794 <HAL_Delay>
	 free(rxEvent);
 80002cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000444 <ble_init+0x1d4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 f965 	bl	80035a0 <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2307      	movs	r3, #7
 80002dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000454 <ble_init+0x1e4>)
 80002de:	2104      	movs	r1, #4
 80002e0:	485d      	ldr	r0, [pc, #372]	@ (8000458 <ble_init+0x1e8>)
 80002e2:	f000 fa9f 	bl	8000824 <BLE_command>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002ec:	4b58      	ldr	r3, [pc, #352]	@ (8000450 <ble_init+0x1e0>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	@ (8000450 <ble_init+0x1e0>)
 80002f8:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80002fa:	4b52      	ldr	r3, [pc, #328]	@ (8000444 <ble_init+0x1d4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 f94e 	bl	80035a0 <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2307      	movs	r3, #7
 800030a:	4a54      	ldr	r2, [pc, #336]	@ (800045c <ble_init+0x1ec>)
 800030c:	2107      	movs	r1, #7
 800030e:	4854      	ldr	r0, [pc, #336]	@ (8000460 <ble_init+0x1f0>)
 8000310:	f000 fa88 	bl	8000824 <BLE_command>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d11b      	bne.n	8000352 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800031a:	4b4d      	ldr	r3, [pc, #308]	@ (8000450 <ble_init+0x1e0>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b4a      	ldr	r3, [pc, #296]	@ (8000450 <ble_init+0x1e0>)
 8000326:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000328:	4b46      	ldr	r3, [pc, #280]	@ (8000444 <ble_init+0x1d4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3307      	adds	r3, #7
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b4c      	ldr	r3, [pc, #304]	@ (8000464 <ble_init+0x1f4>)
 8000334:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000336:	4b43      	ldr	r3, [pc, #268]	@ (8000444 <ble_init+0x1d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3309      	adds	r3, #9
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b49      	ldr	r3, [pc, #292]	@ (8000468 <ble_init+0x1f8>)
 8000342:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000344:	4b3f      	ldr	r3, [pc, #252]	@ (8000444 <ble_init+0x1d4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	330b      	adds	r3, #11
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b47      	ldr	r3, [pc, #284]	@ (800046c <ble_init+0x1fc>)
 8000350:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <ble_init+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f003 f922 	bl	80035a0 <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800035c:	4b44      	ldr	r3, [pc, #272]	@ (8000470 <ble_init+0x200>)
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2307      	movs	r3, #7
 8000362:	2200      	movs	r2, #0
 8000364:	4940      	ldr	r1, [pc, #256]	@ (8000468 <ble_init+0x1f8>)
 8000366:	483f      	ldr	r0, [pc, #252]	@ (8000464 <ble_init+0x1f4>)
 8000368:	f000 fb22 	bl	80009b0 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800036c:	4b38      	ldr	r3, [pc, #224]	@ (8000450 <ble_init+0x1e0>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <ble_init+0x1e0>)
 8000378:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800037a:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <ble_init+0x1d4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f003 f90e 	bl	80035a0 <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2307      	movs	r3, #7
 800038a:	4a3a      	ldr	r2, [pc, #232]	@ (8000474 <ble_init+0x204>)
 800038c:	2110      	movs	r1, #16
 800038e:	483a      	ldr	r0, [pc, #232]	@ (8000478 <ble_init+0x208>)
 8000390:	f000 fa48 	bl	8000824 <BLE_command>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <ble_init+0x1e0>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <ble_init+0x1e0>)
 80003a6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003a8:	4b26      	ldr	r3, [pc, #152]	@ (8000444 <ble_init+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 f8f7 	bl	80035a0 <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003b2:	2300      	movs	r3, #0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2307      	movs	r3, #7
 80003b8:	4a30      	ldr	r2, [pc, #192]	@ (800047c <ble_init+0x20c>)
 80003ba:	2106      	movs	r1, #6
 80003bc:	4830      	ldr	r0, [pc, #192]	@ (8000480 <ble_init+0x210>)
 80003be:	f000 fa31 	bl	8000824 <BLE_command>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003c8:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <ble_init+0x1e0>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <ble_init+0x1e0>)
 80003d4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <ble_init+0x1d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 f8e0 	bl	80035a0 <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2307      	movs	r3, #7
 80003e6:	4a27      	ldr	r2, [pc, #156]	@ (8000484 <ble_init+0x214>)
 80003e8:	2124      	movs	r1, #36	@ 0x24
 80003ea:	4827      	ldr	r0, [pc, #156]	@ (8000488 <ble_init+0x218>)
 80003ec:	f000 fa1a 	bl	8000824 <BLE_command>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <ble_init+0x1e0>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <ble_init+0x1e0>)
 8000402:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <ble_init+0x1d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 f8c9 	bl	80035a0 <free>
 
	 //This will start the advertisment,
	 setConnectable();
 800040e:	f000 f989 	bl	8000724 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000412:	2207      	movs	r2, #7
 8000414:	491d      	ldr	r1, [pc, #116]	@ (800048c <ble_init+0x21c>)
 8000416:	481e      	ldr	r0, [pc, #120]	@ (8000490 <ble_init+0x220>)
 8000418:	f000 fa50 	bl	80008bc <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800041c:	2310      	movs	r3, #16
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2314      	movs	r3, #20
 8000422:	4a1a      	ldr	r2, [pc, #104]	@ (800048c <ble_init+0x21c>)
 8000424:	491b      	ldr	r1, [pc, #108]	@ (8000494 <ble_init+0x224>)
 8000426:	481c      	ldr	r0, [pc, #112]	@ (8000498 <ble_init+0x228>)
 8000428:	f000 fa80 	bl	800092c <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800042c:	2304      	movs	r3, #4
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a16      	ldr	r2, [pc, #88]	@ (800048c <ble_init+0x21c>)
 8000434:	4919      	ldr	r1, [pc, #100]	@ (800049c <ble_init+0x22c>)
 8000436:	481a      	ldr	r0, [pc, #104]	@ (80004a0 <ble_init+0x230>)
 8000438:	f000 fa78 	bl	800092c <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800043c:	bf00      	nop
 }
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200002e8 	.word	0x200002e8
 8000448:	200002ec 	.word	0x200002ec
 800044c:	20000000 	.word	0x20000000
 8000450:	200002e6 	.word	0x200002e6
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000008 	.word	0x20000008
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000014 	.word	0x20000014
 8000464:	200001d0 	.word	0x200001d0
 8000468:	200001d4 	.word	0x200001d4
 800046c:	200001d8 	.word	0x200001d8
 8000470:	20000118 	.word	0x20000118
 8000474:	20000034 	.word	0x20000034
 8000478:	20000024 	.word	0x20000024
 800047c:	20000044 	.word	0x20000044
 8000480:	2000003c 	.word	0x2000003c
 8000484:	20000070 	.word	0x20000070
 8000488:	2000004c 	.word	0x2000004c
 800048c:	200002dc 	.word	0x200002dc
 8000490:	20000120 	.word	0x20000120
 8000494:	200002e4 	.word	0x200002e4
 8000498:	20000140 	.word	0x20000140
 800049c:	200002e0 	.word	0x200002e0
 80004a0:	20000130 	.word	0x20000130

080004a4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }
 
 int fetchBleEvent(uint8_t *container, int size){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	@ 0x30
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ae:	4a3d      	ldr	r2, [pc, #244]	@ (80005a4 <fetchBleEvent+0x100>)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b8:	6018      	str	r0, [r3, #0]
 80004ba:	3304      	adds	r3, #4
 80004bc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004be:	2140      	movs	r1, #64	@ 0x40
 80004c0:	4839      	ldr	r0, [pc, #228]	@ (80005a8 <fetchBleEvent+0x104>)
 80004c2:	f001 fc47 	bl	8001d54 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d065      	beq.n	8000598 <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 f961 	bl	8001794 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d8:	4834      	ldr	r0, [pc, #208]	@ (80005ac <fetchBleEvent+0x108>)
 80004da:	f001 fc53 	bl	8001d84 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004de:	f107 0210 	add.w	r2, r7, #16
 80004e2:	f107 0118 	add.w	r1, r7, #24
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2305      	movs	r3, #5
 80004ec:	4830      	ldr	r0, [pc, #192]	@ (80005b0 <fetchBleEvent+0x10c>)
 80004ee:	f002 fcc9 	bl	8002e84 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f8:	482c      	ldr	r0, [pc, #176]	@ (80005ac <fetchBleEvent+0x108>)
 80004fa:	f001 fc43 	bl	8001d84 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f001 f948 	bl	8001794 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	4828      	ldr	r0, [pc, #160]	@ (80005ac <fetchBleEvent+0x108>)
 800050c:	f001 fc3a 	bl	8001d84 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000510:	f107 0210 	add.w	r2, r7, #16
 8000514:	f107 0118 	add.w	r1, r7, #24
 8000518:	2301      	movs	r3, #1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2305      	movs	r3, #5
 800051e:	4824      	ldr	r0, [pc, #144]	@ (80005b0 <fetchBleEvent+0x10c>)
 8000520:	f002 fcb0 	bl	8002e84 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000524:	7cfb      	ldrb	r3, [r7, #19]
 8000526:	461a      	mov	r2, r3
 8000528:	7d3b      	ldrb	r3, [r7, #20]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000530:	23ff      	movs	r3, #255	@ 0xff
 8000532:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 8000534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dd01      	ble.n	8000540 <fetchBleEvent+0x9c>
	   dataSize=size;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dd1f      	ble.n	8000586 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	e00d      	b.n	8000568 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	441a      	add	r2, r3
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4814      	ldr	r0, [pc, #80]	@ (80005b0 <fetchBleEvent+0x10c>)
 800055e:	f002 fc91 	bl	8002e84 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	3301      	adds	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3a      	ldr	r2, [r7, #32]
 800056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056c:	429a      	cmp	r2, r3
 800056e:	dbed      	blt.n	800054c <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <fetchBleEvent+0x108>)
 8000578:	f001 fc04 	bl	8001d84 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 800057c:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <fetchBleEvent+0x110>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e00a      	b.n	800059c <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <fetchBleEvent+0x108>)
 800058e:	f001 fbf9 	bl	8001d84 <HAL_GPIO_WritePin>
		 return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000596:	e001      	b.n	800059c <fetchBleEvent+0xf8>
   }else{
   return -2;
 8000598:	f06f 0301 	mvn.w	r3, #1
   }
 }
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	@ 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08003f30 	.word	0x08003f30
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	200002f8 	.word	0x200002f8
 80005b4:	200002ec 	.word	0x200002ec

080005b8 <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00f      	b.n	80005ee <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	68b9      	ldr	r1, [r7, #8]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d002      	beq.n	80005e8 <checkEventResp+0x30>
			 return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e6:	e007      	b.n	80005f8 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbeb      	blt.n	80005ce <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 80005f6:	2300      	movs	r3, #0
 }
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800060e:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <sendCommand+0x88>)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	481a      	ldr	r0, [pc, #104]	@ (8000690 <sendCommand+0x8c>)
 8000626:	f001 fbad 	bl	8001d84 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2305      	movs	r3, #5
 8000638:	4816      	ldr	r0, [pc, #88]	@ (8000694 <sendCommand+0x90>)
 800063a:	f002 fc23 	bl	8002e84 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800063e:	7abb      	ldrb	r3, [r7, #10]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	7a7a      	ldrb	r2, [r7, #9]
 8000644:	4313      	orrs	r3, r2
 8000646:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	db09      	blt.n	8000664 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480e      	ldr	r0, [pc, #56]	@ (8000694 <sendCommand+0x90>)
 800065a:	f002 fa9e 	bl	8002b9a <HAL_SPI_Transmit>
		 result=0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	e002      	b.n	800066a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000668:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <sendCommand+0x8c>)
 8000672:	f001 fb87 	bl	8001d84 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <sendCommand+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1cd      	bne.n	800061e <sendCommand+0x1a>
 
 }
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08003f38 	.word	0x08003f38
 8000690:	48000c00 	.word	0x48000c00
 8000694:	200002f8 	.word	0x200002f8
 8000698:	200002ec 	.word	0x200002ec

0800069c <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006a6:	217f      	movs	r1, #127	@ 0x7f
 80006a8:	4819      	ldr	r0, [pc, #100]	@ (8000710 <catchBLE+0x74>)
 80006aa:	f7ff fefb 	bl	80004a4 <fetchBleEvent>
 80006ae:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d128      	bne.n	8000708 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006b6:	2203      	movs	r2, #3
 80006b8:	4916      	ldr	r1, [pc, #88]	@ (8000714 <catchBLE+0x78>)
 80006ba:	4815      	ldr	r0, [pc, #84]	@ (8000710 <catchBLE+0x74>)
 80006bc:	f7ff ff7c 	bl	80005b8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006c0:	2205      	movs	r2, #5
 80006c2:	4915      	ldr	r1, [pc, #84]	@ (8000718 <catchBLE+0x7c>)
 80006c4:	4812      	ldr	r0, [pc, #72]	@ (8000710 <catchBLE+0x74>)
 80006c6:	f7ff ff77 	bl	80005b8 <checkEventResp>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <catchBLE+0x74>)
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <catchBLE+0x80>)
 80006d8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <catchBLE+0x74>)
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <catchBLE+0x80>)
 80006e2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 80006e4:	2205      	movs	r2, #5
 80006e6:	490e      	ldr	r1, [pc, #56]	@ (8000720 <catchBLE+0x84>)
 80006e8:	4809      	ldr	r0, [pc, #36]	@ (8000710 <catchBLE+0x74>)
 80006ea:	f7ff ff65 	bl	80005b8 <checkEventResp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d109      	bne.n	8000708 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <catchBLE+0x74>)
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <catchBLE+0x80>)
 80006fc:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006fe:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <catchBLE+0x74>)
 8000700:	799b      	ldrb	r3, [r3, #6]
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <catchBLE+0x80>)
 8000706:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200001dc 	.word	0x200001dc
 8000714:	200000f0 	.word	0x200000f0
 8000718:	200000fc 	.word	0x200000fc
 800071c:	20000150 	.word	0x20000150
 8000720:	20000104 	.word	0x20000104

08000724 <setConnectable>:
 
 void setConnectable(){
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800072a:	200c      	movs	r0, #12
 800072c:	f002 ff30 	bl	8003590 <malloc>
 8000730:	4603      	mov	r3, r0
 8000732:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4a36      	ldr	r2, [pc, #216]	@ (8000810 <setConnectable+0xec>)
 8000738:	6810      	ldr	r0, [r2, #0]
 800073a:	6018      	str	r0, [r3, #0]
 800073c:	8891      	ldrh	r1, [r2, #4]
 800073e:	7992      	ldrb	r2, [r2, #6]
 8000740:	8099      	strh	r1, [r3, #4]
 8000742:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3308      	adds	r3, #8
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3309      	adds	r3, #9
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	330a      	adds	r3, #10
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	330b      	adds	r3, #11
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3307      	adds	r3, #7
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
 
 
		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800076c:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <setConnectable+0xf0>)
 800076e:	2208      	movs	r2, #8
 8000770:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000772:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <setConnectable+0xf0>)
 8000774:	2215      	movs	r2, #21
 8000776:	70da      	strb	r2, [r3, #3]
 
		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000778:	2019      	movs	r0, #25
 800077a:	f002 ff09 	bl	8003590 <malloc>
 800077e:	4603      	mov	r3, r0
 8000780:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4a23      	ldr	r2, [pc, #140]	@ (8000814 <setConnectable+0xf0>)
 8000786:	461c      	mov	r4, r3
 8000788:	4613      	mov	r3, r2
 800078a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800078c:	6020      	str	r0, [r4, #0]
 800078e:	6061      	str	r1, [r4, #4]
 8000790:	60a2      	str	r2, [r4, #8]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	330d      	adds	r3, #13
 800079a:	220c      	movs	r2, #12
 800079c:	68f9      	ldr	r1, [r7, #12]
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 f82c 	bl	80037fc <memcpy>
 
		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007a4:	2119      	movs	r1, #25
 80007a6:	68b8      	ldr	r0, [r7, #8]
 80007a8:	f7ff ff2c 	bl	8000604 <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 80007ac:	2007      	movs	r0, #7
 80007ae:	f002 feef 	bl	8003590 <malloc>
 80007b2:	4603      	mov	r3, r0
 80007b4:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 80007b6:	bf00      	nop
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <setConnectable+0xf4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0fb      	beq.n	80007b8 <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 80007c0:	2107      	movs	r1, #7
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff fe6e 	bl	80004a4 <fetchBleEvent>
 80007c8:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10f      	bne.n	80007f0 <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80007d0:	2207      	movs	r2, #7
 80007d2:	4912      	ldr	r1, [pc, #72]	@ (800081c <setConnectable+0xf8>)
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff feef 	bl	80005b8 <checkEventResp>
 80007da:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d106      	bne.n	80007f0 <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <setConnectable+0xfc>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <setConnectable+0xfc>)
 80007ee:	801a      	strh	r2, [r3, #0]
		}
		}
 
		free(rxEvent);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f002 fed5 	bl	80035a0 <free>
		free(discoverableCommand);
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	f002 fed2 	bl	80035a0 <free>
		free(localname);
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f002 fecf 	bl	80035a0 <free>
		HAL_Delay(10);
 8000802:	200a      	movs	r0, #10
 8000804:	f000 ffc6 	bl	8001794 <HAL_Delay>
 }
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	20000118 	.word	0x20000118
 8000814:	20000078 	.word	0x20000078
 8000818:	200002ec 	.word	0x200002ec
 800081c:	20000088 	.word	0x20000088
 8000820:	200002e6 	.word	0x200002e6

08000824 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f7ff fee5 	bl	8000604 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	005a      	lsls	r2, r3, #1
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fea4 	bl	8003590 <malloc>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <BLE_command+0x90>)
 800084e:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000854:	e007      	b.n	8000866 <BLE_command+0x42>
			contatore++;
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	3301      	adds	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000862:	4293      	cmp	r3, r2
 8000864:	dc07      	bgt.n	8000876 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000866:	2140      	movs	r1, #64	@ 0x40
 8000868:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <BLE_command+0x94>)
 800086a:	f001 fa73 	bl	8001d54 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f0      	beq.n	8000856 <BLE_command+0x32>
 8000874:	e000      	b.n	8000878 <BLE_command+0x54>
				break;
 8000876:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <BLE_command+0x90>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	005a      	lsls	r2, r3, #1
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4619      	mov	r1, r3
 8000886:	f7ff fe0d 	bl	80004a4 <fetchBleEvent>
 800088a:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d107      	bne.n	80008a2 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <BLE_command+0x90>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe8c 	bl	80005b8 <checkEventResp>
 80008a0:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f000 ff76 	bl	8001794 <HAL_Delay>
 
 
	 return response;
 80008a8:	697b      	ldr	r3, [r7, #20]
 }
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200002e8 	.word	0x200002e8
 80008b8:	48001000 	.word	0x48001000

080008bc <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <addService+0x60>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 ff94 	bl	80037fc <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <addService+0x64>)
 80008da:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008dc:	2301      	movs	r3, #1
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2307      	movs	r3, #7
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <addService+0x68>)
 80008e4:	2117      	movs	r1, #23
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <addService+0x64>)
 80008e8:	f7ff ff9c 	bl	8000824 <BLE_command>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10a      	bne.n	8000908 <addService+0x4c>
			handle[0]=rxEvent[7];
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <addService+0x6c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	79da      	ldrb	r2, [r3, #7]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <addService+0x6c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3301      	adds	r3, #1
 8000904:	7a12      	ldrb	r2, [r2, #8]
 8000906:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <addService+0x6c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fe47 	bl	80035a0 <free>
 }
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000095 	.word	0x20000095
 8000920:	20000090 	.word	0x20000090
 8000924:	200000a8 	.word	0x200000a8
 8000928:	200002e8 	.word	0x200002e8

0800092c <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <addCharacteristic+0x74>)
 800093c:	2210      	movs	r2, #16
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	4618      	mov	r0, r3
 8000942:	f002 ff5b 	bl	80037fc <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <addCharacteristic+0x78>)
 800094c:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	785a      	ldrb	r2, [r3, #1]
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <addCharacteristic+0x78>)
 8000954:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <addCharacteristic+0x78>)
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 800095c:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <addCharacteristic+0x78>)
 800095e:	7e3b      	ldrb	r3, [r7, #24]
 8000960:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000962:	2301      	movs	r3, #1
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2307      	movs	r3, #7
 8000968:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <addCharacteristic+0x7c>)
 800096a:	211e      	movs	r1, #30
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <addCharacteristic+0x78>)
 800096e:	f7ff ff59 	bl	8000824 <BLE_command>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10a      	bne.n	800098e <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <addCharacteristic+0x80>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	79da      	ldrb	r2, [r3, #7]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <addCharacteristic+0x80>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3301      	adds	r3, #1
 800098a:	7a12      	ldrb	r2, [r2, #8]
 800098c:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <addCharacteristic+0x80>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fe04 	bl	80035a0 <free>
 }
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200000b7 	.word	0x200000b7
 80009a4:	200000b0 	.word	0x200000b0
 80009a8:	200000d0 	.word	0x200000d0
 80009ac:	200002e8 	.word	0x200002e8

080009b0 <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3306      	adds	r3, #6
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <updateCharValue+0x9c>)
 80009c8:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <updateCharValue+0x9c>)
 80009d0:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	785a      	ldrb	r2, [r3, #1]
 80009d6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <updateCharValue+0x9c>)
 80009d8:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <updateCharValue+0x9c>)
 80009e0:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	785a      	ldrb	r2, [r3, #1]
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <updateCharValue+0x9c>)
 80009e8:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <updateCharValue+0x9c>)
 80009f0:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <updateCharValue+0x9c>)
 80009f8:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	330a      	adds	r3, #10
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fdc6 	bl	8003590 <malloc>
 8000a04:	4603      	mov	r3, r0
 8000a06:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a08:	220a      	movs	r2, #10
 8000a0a:	4910      	ldr	r1, [pc, #64]	@ (8000a4c <updateCharValue+0x9c>)
 8000a0c:	6978      	ldr	r0, [r7, #20]
 8000a0e:	f002 fef5 	bl	80037fc <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	330a      	adds	r3, #10
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	6a39      	ldr	r1, [r7, #32]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 feee 	bl	80037fc <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f103 010a 	add.w	r1, r3, #10
 8000a26:	2300      	movs	r3, #0
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <updateCharValue+0xa0>)
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff fef8 	bl	8000824 <BLE_command>
 
	 free(commandComplete);
 8000a34:	6978      	ldr	r0, [r7, #20]
 8000a36:	f002 fdb3 	bl	80035a0 <free>
	 free(rxEvent);
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <updateCharValue+0xa4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fdae 	bl	80035a0 <free>
 }
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000d8 	.word	0x200000d8
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	200002e8 	.word	0x200002e8

08000a58 <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a5e:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <disconnectBLE+0x98>)
 8000a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a68:	d105      	bne.n	8000a76 <disconnectBLE+0x1e>
 8000a6a:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <disconnectBLE+0x98>)
 8000a6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a74:	d037      	beq.n	8000ae6 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a76:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <disconnectBLE+0x9c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <disconnectBLE+0x98>)
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <disconnectBLE+0x98>)
 8000a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000a90:	2313      	movs	r3, #19
 8000a92:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000a94:	1d38      	adds	r0, r7, #4
 8000a96:	2300      	movs	r3, #0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <disconnectBLE+0xa0>)
 8000a9e:	2107      	movs	r1, #7
 8000aa0:	f7ff fec0 	bl	8000824 <BLE_command>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d11e      	bne.n	8000ae8 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000aaa:	217f      	movs	r1, #127	@ 0x7f
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <disconnectBLE+0xa4>)
 8000aae:	f7ff fcf9 	bl	80004a4 <fetchBleEvent>
 8000ab2:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000aba:	2204      	movs	r2, #4
 8000abc:	4910      	ldr	r1, [pc, #64]	@ (8000b00 <disconnectBLE+0xa8>)
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <disconnectBLE+0xa4>)
 8000ac0:	f7ff fd7a 	bl	80005b8 <checkEventResp>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d107      	bne.n	8000ada <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <disconnectBLE+0x98>)
 8000acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad0:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <disconnectBLE+0x98>)
 8000ad4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad8:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <disconnectBLE+0xac>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 fd5e 	bl	80035a0 <free>
 8000ae4:	e000      	b.n	8000ae8 <disconnectBLE+0x90>
		return;
 8000ae6:	bf00      	nop
	 }
 }
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000150 	.word	0x20000150
 8000af4:	200000e8 	.word	0x200000e8
 8000af8:	200000f4 	.word	0x200000f4
 8000afc:	200001dc 	.word	0x200001dc
 8000b00:	200000f0 	.word	0x200000f0
 8000b04:	200002e8 	.word	0x200002e8

08000b08 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d102      	bne.n	8000b1e <setDiscoverability+0x16>
		 setConnectable();
 8000b18:	f7ff fe04 	bl	8000724 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 8000b1c:	e00f      	b.n	8000b3e <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10c      	bne.n	8000b3e <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b24:	2300      	movs	r3, #0
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2307      	movs	r3, #7
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <setDiscoverability+0x40>)
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4807      	ldr	r0, [pc, #28]	@ (8000b4c <setDiscoverability+0x44>)
 8000b30:	f7ff fe78 	bl	8000824 <BLE_command>
		 free(rxEvent);
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <setDiscoverability+0x48>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 fd31 	bl	80035a0 <free>
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000110 	.word	0x20000110
 8000b4c:	2000010c 	.word	0x2000010c
 8000b50:	200002e8 	.word	0x200002e8

08000b54 <i2c_init>:
#include <i2c.h>

// PB10 and PB11
// Master Mode; > 400khz
void i2c_init() {
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;;   // Enable I2C2 clock
 8000b58:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <i2c_init+0xa0>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5c:	4a25      	ldr	r2, [pc, #148]	@ (8000bf4 <i2c_init+0xa0>)
 8000b5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b62:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // Enable GPIOB clock
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <i2c_init+0xa0>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <i2c_init+0xa0>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set PB10 and PB11 to Alternate Function mode
    GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);  // Clear mode bits
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <i2c_init+0xa4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a20      	ldr	r2, [pc, #128]	@ (8000bf8 <i2c_init+0xa4>)
 8000b76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b7a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);  // Set Alternate Function mode
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <i2c_init+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <i2c_init+0xa4>)
 8000b82:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000b86:	6013      	str	r3, [r2, #0]

    // Set Alternate Function to I2C2 (AF4 for STM32F4)
    GPIOB->AFR[1] |= (4 << 8) | (4 << 12);
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <i2c_init+0xa4>)
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf8 <i2c_init+0xa4>)
 8000b8e:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000b92:	6253      	str	r3, [r2, #36]	@ 0x24

    // Enable Open-Drain Mode for I2C
    GPIOB->OTYPER |= GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11;
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <i2c_init+0xa4>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <i2c_init+0xa4>)
 8000b9a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000b9e:	6053      	str	r3, [r2, #4]

    // Set pins to High-Speed Mode
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <i2c_init+0xa4>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <i2c_init+0xa4>)
 8000ba6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000baa:	6093      	str	r3, [r2, #8]

    // Enable Pull-Up Resistors
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);  // Clear previous settings
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <i2c_init+0xa4>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4a11      	ldr	r2, [pc, #68]	@ (8000bf8 <i2c_init+0xa4>)
 8000bb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bb6:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);  // Enable Pull-Up
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <i2c_init+0xa4>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <i2c_init+0xa4>)
 8000bbe:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000bc2:	60d3      	str	r3, [r2, #12]

    //Configuration of I2C2
    I2C2->CR1 &= ~I2C_CR1_PE; //Disables I2C2
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <i2c_init+0xa8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <i2c_init+0xa8>)
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]

    I2C2->ICR = I2C_ICR_NACKCF | I2C_ICR_STOPCF | I2C_ICR_BERRCF;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <i2c_init+0xa8>)
 8000bd2:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000bd6:	61da      	str	r2, [r3, #28]

    I2C2->TIMINGR = 0x00300F33; // 400 kHz
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <i2c_init+0xa8>)
 8000bda:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <i2c_init+0xac>)
 8000bdc:	611a      	str	r2, [r3, #16]

    I2C2->CR1 |= I2C_CR1_PE; // Enables I2C2 
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <i2c_init+0xa8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <i2c_init+0xa8>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	00300f33 	.word	0x00300f33

08000c04 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	603a      	str	r2, [r7, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	460b      	mov	r3, r1
 8000c14:	71bb      	strb	r3, [r7, #6]
 8000c16:	4613      	mov	r3, r2
 8000c18:	717b      	strb	r3, [r7, #5]

    // Wait until I2C is not busy
    while (I2C2->ISR & I2C_ISR_BUSY);
 8000c1a:	bf00      	nop
 8000c1c:	4b33      	ldr	r3, [pc, #204]	@ (8000cec <i2c_transaction+0xe8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f9      	bne.n	8000c1c <i2c_transaction+0x18>

    //clear bits in CR2
    I2C2->CR2 &= 0;
 8000c28:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <i2c_transaction+0xe8>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <i2c_transaction+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
    // I2C2->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RD_WRN);


    // Configure I2C transaction
    I2C2->CR2 = (address << 1) | (len << 16) | (dir == 1 ? I2C_CR2_RD_WRN : 0);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	005a      	lsls	r2, r3, #1
 8000c36:	797b      	ldrb	r3, [r7, #5]
 8000c38:	041b      	lsls	r3, r3, #16
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d102      	bne.n	8000c4a <i2c_transaction+0x46>
 8000c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c48:	e000      	b.n	8000c4c <i2c_transaction+0x48>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	4a27      	ldr	r2, [pc, #156]	@ (8000cec <i2c_transaction+0xe8>)
 8000c4e:	430b      	orrs	r3, r1
 8000c50:	6053      	str	r3, [r2, #4]

    // Start Transmission/Reception
    I2C2->CR2 |= I2C_CR2_START;
 8000c52:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <i2c_transaction+0xe8>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a25      	ldr	r2, [pc, #148]	@ (8000cec <i2c_transaction+0xe8>)
 8000c58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c5c:	6053      	str	r3, [r2, #4]

    if (dir == 0) { // Write Mode
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11e      	bne.n	8000ca2 <i2c_transaction+0x9e>
        for (uint8_t i = 0; i < len; i++) {
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e00f      	b.n	8000c8a <i2c_transaction+0x86>
            // Wait until TX buffer is empty      
            
        	// while (!(I2C2->ISR & I2C_ISR_TXIS)); // or TXIS
            while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)));
 8000c6a:	bf00      	nop
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <i2c_transaction+0xe8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0312 	and.w	r3, r3, #18
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f9      	beq.n	8000c6c <i2c_transaction+0x68>

            // Write each byte
            I2C2->TXDR = data[i];
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <i2c_transaction+0xe8>)
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	3301      	adds	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	797b      	ldrb	r3, [r7, #5]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3eb      	bcc.n	8000c6a <i2c_transaction+0x66>
        }

        // Wait until transfer is complete
        while (!(I2C2->ISR & I2C_ISR_TC));
 8000c92:	bf00      	nop
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <i2c_transaction+0xe8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f9      	beq.n	8000c94 <i2c_transaction+0x90>
 8000ca0:	e017      	b.n	8000cd2 <i2c_transaction+0xce>
        
    } else { // Read Mode
        for (uint8_t i = 0; i < len; i++) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73bb      	strb	r3, [r7, #14]
 8000ca6:	e010      	b.n	8000cca <i2c_transaction+0xc6>
            // Wait until RX buffer is full
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8000ca8:	bf00      	nop
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <i2c_transaction+0xe8>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f9      	beq.n	8000caa <i2c_transaction+0xa6>

            // Read each byte
            data[i] = I2C2->RXDR;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <i2c_transaction+0xe8>)
 8000cb8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	73bb      	strb	r3, [r7, #14]
 8000cca:	7bba      	ldrb	r2, [r7, #14]
 8000ccc:	797b      	ldrb	r3, [r7, #5]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d3ea      	bcc.n	8000ca8 <i2c_transaction+0xa4>
        }
    }

    // Stop Condition
    I2C2->CR2 |= I2C_CR2_STOP;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <i2c_transaction+0xe8>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <i2c_transaction+0xe8>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cdc:	6053      	str	r3, [r2, #4]

    return 0; // Success
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40005800 	.word	0x40005800

08000cf0 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000cf4:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <leds_init+0xd0>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf8:	4a31      	ldr	r2, [pc, #196]	@ (8000dc0 <leds_init+0xd0>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <leds_init+0xd0>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d04:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc0 <leds_init+0xd0>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d16:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d1a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2a:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d36:	f023 0320 	bic.w	r3, r3, #32
 8000d3a:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000d3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d4a:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000d4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d56:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d5a:	6093      	str	r3, [r2, #8]

  /* Turn off the LED 1 */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d66:	f023 0320 	bic.w	r3, r3, #32
 8000d6a:	6153      	str	r3, [r2, #20]

  // --------------------------- PB14 (LED 2 ) -----------------------------------

  /* Configure PB14 as an output by clearing all bits and setting the mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <leds_init+0xd4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <leds_init+0xd4>)
 8000d72:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d76:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <leds_init+0xd4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <leds_init+0xd4>)
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <leds_init+0xd4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <leds_init+0xd4>)
 8000d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d8e:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <leds_init+0xd4>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <leds_init+0xd4>)
 8000d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d9a:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <leds_init+0xd4>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <leds_init+0xd4>)
 8000da2:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000da6:	6093      	str	r3, [r2, #8]

  /* Turn off the LED 2 */
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <leds_init+0xd4>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <leds_init+0xd4>)
 8000dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000db2:	6153      	str	r3, [r2, #20]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <leds_set>:

void leds_set(uint8_t led)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  // Extract relevant bits (First bit for LED1 and second bit for LED2)
  // bit shift right LED2 for ease
  uint8_t led1 = led & (uint8_t)0x01;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint8_t led2 = (led & (uint8_t)0x02) >> 1;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	105b      	asrs	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	73bb      	strb	r3, [r7, #14]


  // Turn on or off LED 1 based on extracted bit
  if(led1 == (uint8_t)0x01){
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d108      	bne.n	8000dfe <leds_set+0x36>

    /* Turn ON the LED1 */
    GPIOA->ODR |= GPIO_ODR_OD5;
 8000dec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6153      	str	r3, [r2, #20]
 8000dfc:	e007      	b.n	8000e0e <leds_set+0x46>
  }
  else{

    /* Turn off the LED1 */
    GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000dfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e08:	f023 0320 	bic.w	r3, r3, #32
 8000e0c:	6153      	str	r3, [r2, #20]
  }


  // Turn on or off LED 2 based on extracted bit
  if(led2 == (uint8_t)0x01){
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d106      	bne.n	8000e22 <leds_set+0x5a>

    /* Turn ON the LED2 */
    GPIOB->ODR |= GPIO_ODR_OD14;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <leds_set+0x74>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <leds_set+0x74>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1e:	6153      	str	r3, [r2, #20]
  else{

    /* Turn off the LED2 */
    GPIOB->ODR &= ~GPIO_ODR_OD14;
  }
}
 8000e20:	e005      	b.n	8000e2e <leds_set+0x66>
    GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <leds_set+0x74>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <leds_set+0x74>)
 8000e28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6153      	str	r3, [r2, #20]
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	48000400 	.word	0x48000400

08000e40 <lsm6dsl_init>:
// #define OUTZ_H_XL 0x2D    // Output register for Z-axis acceleration (high byte)

#define write 0
#define read 1

void lsm6dsl_init() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    uint8_t data[2];

    // Configure accelerometer: 104 Hz, Normal-Power mode
    data[0] = CTRL1_XL;  // Register address
 8000e46:	2310      	movs	r3, #16
 8000e48:	713b      	strb	r3, [r7, #4]
    data[1] = 0x40;       // Configuration value
 8000e4a:	2340      	movs	r3, #64	@ 0x40
 8000e4c:	717b      	strb	r3, [r7, #5]
    i2c_transaction(LSM6DSL_ADDR, write, data, 2); // Send register address + data
 8000e4e:	1d3a      	adds	r2, r7, #4
 8000e50:	2302      	movs	r3, #2
 8000e52:	2100      	movs	r1, #0
 8000e54:	206a      	movs	r0, #106	@ 0x6a
 8000e56:	f7ff fed5 	bl	8000c04 <i2c_transaction>
    
    // Enable accelerometer data-ready interrupt on INT1
    data[0] = INT1_CTRL;  // Register address
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01;       // Enable data-ready interrupt
 8000e5e:	2301      	movs	r3, #1
 8000e60:	717b      	strb	r3, [r7, #5]
    i2c_transaction(LSM6DSL_ADDR, write, data, 2); // Send register address + data
 8000e62:	1d3a      	adds	r2, r7, #4
 8000e64:	2302      	movs	r3, #2
 8000e66:	2100      	movs	r1, #0
 8000e68:	206a      	movs	r0, #106	@ 0x6a
 8000e6a:	f7ff fecb 	bl	8000c04 <i2c_transaction>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <setupMotionInterrupt>:
    *x = (int16_t)((data[1] << 8) | data[0]);
    *y = (int16_t)((data[3] << 8) | data[2]);
    *z = (int16_t)((data[5] << 8) | data[4]);
}

void setupMotionInterrupt() {
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
    uint8_t data[2];

    // Set Wake-Up threshold (adjust sensitivity)
    data[0] = WAKE_UP_THS;  // Register address
 8000e7c:	235b      	movs	r3, #91	@ 0x5b
 8000e7e:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00;       // Configuration value
 8000e80:	2300      	movs	r3, #0
 8000e82:	717b      	strb	r3, [r7, #5]
    i2c_transaction(LSM6DSL_ADDR, 0, &data, 2);  // Write to WAKE_UP_THS
 8000e84:	1d3a      	adds	r2, r7, #4
 8000e86:	2302      	movs	r3, #2
 8000e88:	2100      	movs	r1, #0
 8000e8a:	206a      	movs	r0, #106	@ 0x6a
 8000e8c:	f7ff feba 	bl	8000c04 <i2c_transaction>

    // Enable Wake-Up interrupt and route it to INT1
    data[0] = MD1_CFG;      // Register address
 8000e90:	235e      	movs	r3, #94	@ 0x5e
 8000e92:	713b      	strb	r3, [r7, #4]
    data[1] = 0x20;         // Configuration value
 8000e94:	2320      	movs	r3, #32
 8000e96:	717b      	strb	r3, [r7, #5]
    i2c_transaction(LSM6DSL_ADDR, 0, &data, 1);  // Write to MD1_CFG
 8000e98:	1d3a      	adds	r2, r7, #4
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	206a      	movs	r0, #106	@ 0x6a
 8000ea0:	f7ff feb0 	bl	8000c04 <i2c_transaction>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <EXTI15_10_IRQHandler>:
        ITM_SendChar(*ptr++);
    }
    return len;
}

void EXTI15_10_IRQHandler(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  
  if (__HAL_GPIO_EXTI_GET_IT(LSM6DSL_Pin) != RESET) {
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <EXTI15_10_IRQHandler+0x58>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d01e      	beq.n	8000efc <EXTI15_10_IRQHandler+0x50>
      
    __HAL_GPIO_EXTI_CLEAR_IT(LSM6DSL_Pin);
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <EXTI15_10_IRQHandler+0x58>)
 8000ec0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ec4:	615a      	str	r2, [r3, #20]

      // Read the STATUS register to clear the interrupt flag inside the LSM6DSL
      uint8_t status;
      i2c_transaction(LSM6DSL_ADDR, 1, &status, 1);  // Read from STATUS_REG
 8000ec6:	1dfa      	adds	r2, r7, #7
 8000ec8:	2301      	movs	r3, #1
 8000eca:	2101      	movs	r1, #1
 8000ecc:	206a      	movs	r0, #106	@ 0x6a
 8000ece:	f7ff fe99 	bl	8000c04 <i2c_transaction>

      boolLost = 0;
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <EXTI15_10_IRQHandler+0x5c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	801a      	strh	r2, [r3, #0]
			incTenSeconds = 0;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <EXTI15_10_IRQHandler+0x60>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	801a      	strh	r2, [r3, #0]
      timeLost = 0;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <EXTI15_10_IRQHandler+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
      timer_reset(TIM2);
 8000ee4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ee8:	f000 fba8 	bl	800163c <timer_reset>
			leds_set((uint8_t)2);
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff ff6b 	bl	8000dc8 <leds_set>
      setDiscoverability(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fe08 	bl	8000b08 <setDiscoverability>
      disconnectBLE();
 8000ef8:	f7ff fdae 	bl	8000a58 <disconnectBLE>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010400 	.word	0x40010400
 8000f08:	200002f0 	.word	0x200002f0
 8000f0c:	20000154 	.word	0x20000154
 8000f10:	200002f4 	.word	0x200002f4

08000f14 <TIM2_IRQHandler>:


// ? Interupt Handler
void TIM2_IRQHandler() {
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  //increment i50
  ((incTenSeconds)++);
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <TIM2_IRQHandler+0x44>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <TIM2_IRQHandler+0x44>)
 8000f24:	801a      	strh	r2, [r3, #0]

  if (incTenSeconds == 2) {
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <TIM2_IRQHandler+0x44>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d102      	bne.n	8000f36 <TIM2_IRQHandler+0x22>

    boolLost = 1;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <TIM2_IRQHandler+0x48>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	801a      	strh	r2, [r3, #0]
  }

  boolAct = 1;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <TIM2_IRQHandler+0x4c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	801a      	strh	r2, [r3, #0]
  
  // manually reset update bit so interrupts can happen again
  TIM2->SR &= ~TIM_SR_UIF;
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	6113      	str	r3, [r2, #16]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000154 	.word	0x20000154
 8000f5c:	200002f0 	.word	0x200002f0
 8000f60:	200002f2 	.word	0x200002f2

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fb9e 	bl	80016aa <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f883 	bl	8001078 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 f905 	bl	8001180 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000f76:	f000 f8c5 	bl	8001104 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f84:	f000 fefe 	bl	8001d84 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f000 fc03 	bl	8001794 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f98:	f000 fef4 	bl	8001d84 <HAL_GPIO_WritePin>

  ble_init();
 8000f9c:	f7ff f968 	bl	8000270 <ble_init>

  HAL_Delay(10);
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f000 fbf7 	bl	8001794 <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]


  // ? OldMain initalization

  leds_init();
 8000faa:	f7ff fea1 	bl	8000cf0 <leds_init>
	timer_init(TIM2);
 8000fae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fb2:	f000 faf7 	bl	80015a4 <timer_init>

	i2c_init();
 8000fb6:	f7ff fdcd 	bl	8000b54 <i2c_init>
	lsm6dsl_init();	
 8000fba:	f7ff ff41 	bl	8000e40 <lsm6dsl_init>
  setupMotionInterrupt();
 8000fbe:	f7ff ff5a 	bl	8000e76 <setupMotionInterrupt>
  setupGPIOInterrupt();
 8000fc2:	f000 f97b 	bl	80012bc <setupGPIOInterrupt>
  timer_reset(TIM2);
 8000fc6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fca:	f000 fb37 	bl	800163c <timer_reset>
	//timer_set_ms(TIM2, 10000);

  // ? Initalize Count
	boolLost = 0;
 8000fce:	4b23      	ldr	r3, [pc, #140]	@ (800105c <main+0xf8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	801a      	strh	r2, [r3, #0]
  timeLost = 0;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <main+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    // }

    // want to connect, set discoverability to 1
    // want to disconnect, set discoverability to 0 and call disconnectble
    
    if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d108      	bne.n	8000ff2 <main+0x8e>
 8000fe0:	2140      	movs	r1, #64	@ 0x40
 8000fe2:	4820      	ldr	r0, [pc, #128]	@ (8001064 <main+0x100>)
 8000fe4:	f000 feb6 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <main+0x8e>
	    catchBLE();
 8000fee:	f7ff fb55 	bl	800069c <catchBLE>
	  }

    if(boolLost == 1){
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <main+0xf8>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d1ee      	bne.n	8000fda <main+0x76>
    	if(boolAct == 1){
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <main+0x104>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d1e9      	bne.n	8000fda <main+0x76>
        setDiscoverability(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fd7e 	bl	8000b08 <setDiscoverability>
        leds_set((uint8_t)3);
 800100c:	2003      	movs	r0, #3
 800100e:	f7ff fedb 	bl	8000dc8 <leds_set>
        // Send a string to the NORDIC UART service, remember to not include the newline
        // unsigned char test_str[] = "Team 12 ";
        unsigned char test_str[18] = {0};
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	819a      	strh	r2, [r3, #12]
        snprintf(test_str, sizeof(test_str), "T12 missing %ds", timeLost);
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <main+0xfc>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	1d38      	adds	r0, r7, #4
 800102c:	4a0f      	ldr	r2, [pc, #60]	@ (800106c <main+0x108>)
 800102e:	2112      	movs	r1, #18
 8001030:	f002 fb6c 	bl	800370c <sniprintf>
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2311      	movs	r3, #17
 800103a:	2200      	movs	r2, #0
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <main+0x10c>)
 800103e:	480d      	ldr	r0, [pc, #52]	@ (8001074 <main+0x110>)
 8001040:	f7ff fcb6 	bl	80009b0 <updateCharValue>
        timeLost += 10;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <main+0xfc>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	330a      	adds	r3, #10
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <main+0xfc>)
 8001050:	701a      	strb	r2, [r3, #0]
        boolAct = 0;
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <main+0x104>)
 8001054:	2200      	movs	r2, #0
 8001056:	801a      	strh	r2, [r3, #0]
    if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8001058:	e7bf      	b.n	8000fda <main+0x76>
 800105a:	bf00      	nop
 800105c:	200002f0 	.word	0x200002f0
 8001060:	200002f4 	.word	0x200002f4
 8001064:	48001000 	.word	0x48001000
 8001068:	200002f2 	.word	0x200002f2
 800106c:	08003f40 	.word	0x08003f40
 8001070:	200002e4 	.word	0x200002e4
 8001074:	200002dc 	.word	0x200002dc

08001078 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b096      	sub	sp, #88	@ 0x58
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2244      	movs	r2, #68	@ 0x44
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fb74 	bl	8003774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800109e:	f000 febb 	bl	8001e18 <HAL_PWREx_ControlVoltageScaling>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010a8:	f000 f902 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010ac:	2310      	movs	r3, #16
 80010ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80010b8:	2370      	movs	r3, #112	@ 0x70
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fefd 	bl	8001ec4 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010d0:	f000 f8ee 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fac5 	bl	800267c <HAL_RCC_ClockConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010f8:	f000 f8da 	bl	80012b0 <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3758      	adds	r7, #88	@ 0x58
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <MX_SPI3_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <MX_SPI3_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001110:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001114:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800111c:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_SPI3_Init+0x74>)
 800111e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001122:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_SPI3_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001136:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_SPI3_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_SPI3_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001152:	2207      	movs	r2, #7
 8001154:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_SPI3_Init+0x74>)
 800115e:	2208      	movs	r2, #8
 8001160:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_SPI3_Init+0x74>)
 8001164:	f001 fc76 	bl	8002a54 <HAL_SPI_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 f89f 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002f8 	.word	0x200002f8
 800117c:	40003c00 	.word	0x40003c00

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	4b43      	ldr	r3, [pc, #268]	@ (80012a4 <MX_GPIO_Init+0x124>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a42      	ldr	r2, [pc, #264]	@ (80012a4 <MX_GPIO_Init+0x124>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b40      	ldr	r3, [pc, #256]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b3d      	ldr	r3, [pc, #244]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a3c      	ldr	r2, [pc, #240]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b3a      	ldr	r3, [pc, #232]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a36      	ldr	r2, [pc, #216]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	4a30      	ldr	r2, [pc, #192]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ea:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <MX_GPIO_Init+0x124>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <MX_GPIO_Init+0x124>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001216:	f000 fdb5 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001220:	4821      	ldr	r0, [pc, #132]	@ (80012a8 <MX_GPIO_Init+0x128>)
 8001222:	f000 fdaf 	bl	8001d84 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f000 fda8 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001234:	2340      	movs	r3, #64	@ 0x40
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4818      	ldr	r0, [pc, #96]	@ (80012ac <MX_GPIO_Init+0x12c>)
 800124a:	f000 fbd9 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800124e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f000 fbc9 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800126e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4808      	ldr	r0, [pc, #32]	@ (80012a8 <MX_GPIO_Init+0x128>)
 8001288:	f000 fbba 	bl	8001a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2017      	movs	r0, #23
 8001292:	f000 fb7e 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001296:	2017      	movs	r0, #23
 8001298:	f000 fb97 	bl	80019ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	@ 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000c00 	.word	0x48000c00
 80012ac:	48001000 	.word	0x48001000

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>

080012bc <setupGPIOInterrupt>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void setupGPIOInterrupt() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

  // Configure GPIO as input with external interrupt (falling edge)
  GPIO_InitStruct.Pin = LSM6DSL_Pin;
 80012d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012d4:	607b      	str	r3, [r7, #4]
  // Original
  // GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  // Newly Suggested
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012da:	60bb      	str	r3, [r7, #8]
  // Original
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  // Newly Suggested
  // GPIO_InitStruct.Pull = GPIO_PULLUP;

  HAL_GPIO_Init(LSM6DSL_Port, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <setupGPIOInterrupt+0x48>)
 80012e6:	f000 fb8b 	bl	8001a00 <HAL_GPIO_Init>

  // Enable NVIC interrupt
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2028      	movs	r0, #40	@ 0x28
 80012f0:	f000 fb4f 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012f4:	2028      	movs	r0, #40	@ 0x28
 80012f6:	f000 fb68 	bl	80019ca <HAL_NVIC_EnableIRQ>
  
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	48000c00 	.word	0x48000c00

08001308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	@ 0x58
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_SPI_MspInit+0x7c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d128      	bne.n	80013c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	4a16      	ldr	r2, [pc, #88]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800137c:	6593      	str	r3, [r2, #88]	@ 0x58
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_SPI_MspInit+0x80>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b4:	2306      	movs	r3, #6
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <HAL_SPI_MspInit+0x84>)
 80013c0:	f000 fb1e 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	@ 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40003c00 	.word	0x40003c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000800 	.word	0x48000800

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <NMI_Handler+0x4>

080013e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <MemManage_Handler+0x4>

080013f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <UsageFault_Handler+0x4>

08001400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142e:	f000 f991 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <EXTI9_5_IRQHandler+0x14>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001442:	2040      	movs	r0, #64	@ 0x40
 8001444:	f000 fcb6 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200002ec 	.word	0x200002ec

08001450 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x50>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x16>
		heap_end = &end;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <_sbrk+0x50>)
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <_sbrk+0x54>)
 8001464:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <_sbrk+0x50>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <_sbrk+0x50>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	466a      	mov	r2, sp
 8001476:	4293      	cmp	r3, r2
 8001478:	d907      	bls.n	800148a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800147a:	f002 f993 	bl	80037a4 <__errno>
 800147e:	4603      	mov	r3, r0
 8001480:	220c      	movs	r2, #12
 8001482:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001488:	e006      	b.n	8001498 <_sbrk+0x48>
	}

	heap_end += incr;
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <_sbrk+0x50>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a03      	ldr	r2, [pc, #12]	@ (80014a0 <_sbrk+0x50>)
 8001494:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000035c 	.word	0x2000035c
 80014a4:	200004b0 	.word	0x200004b0

080014a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <SystemInit+0x64>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a16      	ldr	r2, [pc, #88]	@ (800150c <SystemInit+0x64>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <SystemInit+0x68>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a13      	ldr	r2, [pc, #76]	@ (8001510 <SystemInit+0x68>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <SystemInit+0x68>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <SystemInit+0x68>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <SystemInit+0x68>)
 80014d4:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80014d8:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80014dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <SystemInit+0x68>)
 80014e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <SystemInit+0x68>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <SystemInit+0x68>)
 80014ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <SystemInit+0x68>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <SystemInit+0x64>)
 80014fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	40021000 	.word	0x40021000

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	@ (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	@ (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  // Stop the counter
  timer->CR1 &= ~TIM_CR1_CEN;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f023 0201 	bic.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]

  // Set reset bit and clear it
  RCC->APB1RSTR1 |= RCC_APB1RSTR1_TIM2RST;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <timer_init+0x94>)
 80015ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001638 <timer_init+0x94>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6393      	str	r3, [r2, #56]	@ 0x38
  RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_TIM2RST;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <timer_init+0x94>)
 80015c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <timer_init+0x94>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6393      	str	r3, [r2, #56]	@ 0x38
  
  //Enable the timer clock.
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <timer_init+0x94>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <timer_init+0x94>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6593      	str	r3, [r2, #88]	@ 0x58

  // Set ARPE bit to wait for update

  timer->CR1 |= TIM_CR1_ARPE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	601a      	str	r2, [r3, #0]

  // Enable the timer’s interrupt both internally and in the interrupt controller (NVIC).

  timer->DIER |= TIM_DIER_UIE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	60da      	str	r2, [r3, #12]

  NVIC_EnableIRQ(TIM2_IRQn);
 80015f4:	201c      	movs	r0, #28
 80015f6:	f7ff ff8d 	bl	8001514 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM2_IRQn, 1);
 80015fa:	2101      	movs	r1, #1
 80015fc:	201c      	movs	r0, #28
 80015fe:	f7ff ffa7 	bl	8001550 <__NVIC_SetPriority>
  
  //Set Prescaler and ARR

  timer->PSC = 7999;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28

  timer->ARR = 9999;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c

  //Start Counter
  timer->CR1 |= TIM_CR1_CEN;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800161e:	b662      	cpsie	i
}
 8001620:	bf00      	nop

  //Enable interrupts on system, if not already true
  __enable_irq();

  //Force an update
  timer->EGR |= TIM_EGR_UG;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	615a      	str	r2, [r3, #20]

  // ! Call timer_reset?


}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  timer->CNT = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001690 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800165c:	f7ff ff24 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480c      	ldr	r0, [pc, #48]	@ (8001694 <LoopForever+0x6>)
  ldr r1, =_edata
 8001662:	490d      	ldr	r1, [pc, #52]	@ (8001698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <LoopForever+0xe>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001678:	4c0a      	ldr	r4, [pc, #40]	@ (80016a4 <LoopForever+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001686:	f002 f893 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800168a:	f7ff fc6b 	bl	8000f64 <main>

0800168e <LoopForever>:

LoopForever:
    b LoopForever
 800168e:	e7fe      	b.n	800168e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001690:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 800169c:	08003fd4 	.word	0x08003fd4
  ldr r2, =_sbss
 80016a0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80016a4:	200004ac 	.word	0x200004ac

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>

080016aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f961 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f80e 	bl	80016dc <HAL_InitTick>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	e001      	b.n	80016d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016cc:	f7ff fe1c 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_InitTick+0x6c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d023      	beq.n	8001738 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_InitTick+0x70>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_InitTick+0x6c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f96d 	bl	80019e6 <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10f      	bne.n	8001732 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d809      	bhi.n	800172c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001720:	f000 f937 	bl	8001992 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001724:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_InitTick+0x74>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e007      	b.n	800173c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e004      	b.n	800173c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	e001      	b.n	800173c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000160 	.word	0x20000160
 800174c:	20000158 	.word	0x20000158
 8001750:	2000015c 	.word	0x2000015c

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000160 	.word	0x20000160
 8001778:	20000360 	.word	0x20000360

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000360 	.word	0x20000360

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000160 	.word	0x20000160

080017dc <__NVIC_SetPriorityGrouping>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	@ (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff3e 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff31 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	e17f      	b.n	8001d10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8171 	beq.w	8001d0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_GPIO_Init+0x40>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d130      	bne.n	8001aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a76:	2201      	movs	r2, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	f003 0201 	and.w	r2, r3, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d118      	bne.n	8001ae0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d017      	beq.n	8001b1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d123      	bne.n	8001b70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80ac 	beq.w	8001d0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d30 <HAL_GPIO_Init+0x330>)
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d30 <HAL_GPIO_Init+0x330>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d30 <HAL_GPIO_Init+0x330>)
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bca:	4a5a      	ldr	r2, [pc, #360]	@ (8001d34 <HAL_GPIO_Init+0x334>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bf4:	d025      	beq.n	8001c42 <HAL_GPIO_Init+0x242>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d38 <HAL_GPIO_Init+0x338>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01f      	beq.n	8001c3e <HAL_GPIO_Init+0x23e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	@ (8001d3c <HAL_GPIO_Init+0x33c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x23a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4d      	ldr	r2, [pc, #308]	@ (8001d40 <HAL_GPIO_Init+0x340>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x236>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4c      	ldr	r2, [pc, #304]	@ (8001d44 <HAL_GPIO_Init+0x344>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x232>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	@ (8001d48 <HAL_GPIO_Init+0x348>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4a      	ldr	r2, [pc, #296]	@ (8001d4c <HAL_GPIO_Init+0x34c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x22a>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c42:	2300      	movs	r3, #0
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c54:	4937      	ldr	r1, [pc, #220]	@ (8001d34 <HAL_GPIO_Init+0x334>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c62:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c86:	4a32      	ldr	r2, [pc, #200]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c8c:	4b30      	ldr	r3, [pc, #192]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb0:	4a27      	ldr	r2, [pc, #156]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cda:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d04:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <HAL_GPIO_Init+0x350>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f47f ae78 	bne.w	8001a10 <HAL_GPIO_Init+0x10>
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00
 8001d44:	48001000 	.word	0x48001000
 8001d48:	48001400 	.word	0x48001400
 8001d4c:	48001800 	.word	0x48001800
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f806 	bl	8001de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e26:	d130      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e28:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e34:	d038      	beq.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e46:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2232      	movs	r2, #50	@ 0x32
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5c:	e002      	b.n	8001e64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e64:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e70:	d102      	bne.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f2      	bne.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e78:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e84:	d110      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e00f      	b.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e96:	d007      	beq.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e98:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ea0:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	20000158 	.word	0x20000158
 8001ec0:	431bde83 	.word	0x431bde83

08001ec4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e3ca      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed6:	4b97      	ldr	r3, [pc, #604]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee0:	4b94      	ldr	r3, [pc, #592]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80e4 	beq.w	80020c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4a>
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b0c      	cmp	r3, #12
 8001f02:	f040 808b 	bne.w	800201c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f040 8087 	bne.w	800201c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0e:	4b89      	ldr	r3, [pc, #548]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x62>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e3a2      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1a      	ldr	r2, [r3, #32]
 8001f2a:	4b82      	ldr	r3, [pc, #520]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_RCC_OscConfig+0x7c>
 8001f36:	4b7f      	ldr	r3, [pc, #508]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f3e:	e005      	b.n	8001f4c <HAL_RCC_OscConfig+0x88>
 8001f40:	4b7c      	ldr	r3, [pc, #496]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d223      	bcs.n	8001f98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fd1d 	bl	8002994 <RCC_SetFlashLatencyFromMSIRange>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e383      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f64:	4b73      	ldr	r3, [pc, #460]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a72      	ldr	r2, [pc, #456]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b70      	ldr	r3, [pc, #448]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	496d      	ldr	r1, [pc, #436]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f82:	4b6c      	ldr	r3, [pc, #432]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	4968      	ldr	r1, [pc, #416]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
 8001f96:	e025      	b.n	8001fe4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f98:	4b66      	ldr	r3, [pc, #408]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a65      	ldr	r2, [pc, #404]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b63      	ldr	r3, [pc, #396]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4960      	ldr	r1, [pc, #384]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	495b      	ldr	r1, [pc, #364]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fcdd 	bl	8002994 <RCC_SetFlashLatencyFromMSIRange>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e343      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe4:	f000 fc4a 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b52      	ldr	r3, [pc, #328]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	4950      	ldr	r1, [pc, #320]	@ (8002138 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	4a4e      	ldr	r2, [pc, #312]	@ (800213c <HAL_RCC_OscConfig+0x278>)
 8002002:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002004:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fb67 	bl	80016dc <HAL_InitTick>
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d052      	beq.n	80020be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	e327      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d032      	beq.n	800208a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002024:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a42      	ldr	r2, [pc, #264]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002030:	f7ff fba4 	bl	800177c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002038:	f7ff fba0 	bl	800177c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e310      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204a:	4b3a      	ldr	r3, [pc, #232]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002056:	4b37      	ldr	r3, [pc, #220]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a36      	ldr	r2, [pc, #216]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b34      	ldr	r3, [pc, #208]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4931      	ldr	r1, [pc, #196]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002074:	4b2f      	ldr	r3, [pc, #188]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	492c      	ldr	r1, [pc, #176]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e01a      	b.n	80020c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800208a:	4b2a      	ldr	r3, [pc, #168]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a29      	ldr	r2, [pc, #164]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002096:	f7ff fb71 	bl	800177c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209e:	f7ff fb6d 	bl	800177c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e2dd      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b0:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x1da>
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d074      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x21a>
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	d10e      	bne.n	80020f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d064      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2f0>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d160      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e2ba      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x24a>
 8002100:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e026      	b.n	800215c <HAL_RCC_OscConfig+0x298>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002116:	d115      	bne.n	8002144 <HAL_RCC_OscConfig+0x280>
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a02      	ldr	r2, [pc, #8]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x298>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	08003f50 	.word	0x08003f50
 800213c:	20000158 	.word	0x20000158
 8002140:	2000015c 	.word	0x2000015c
 8002144:	4ba0      	ldr	r3, [pc, #640]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a9f      	ldr	r2, [pc, #636]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b9d      	ldr	r3, [pc, #628]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a9c      	ldr	r2, [pc, #624]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff fb0a 	bl	800177c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fb06 	bl	800177c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	@ 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e276      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217e:	4b92      	ldr	r3, [pc, #584]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x2a8>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff faf6 	bl	800177c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff faf2 	bl	800177c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e262      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a6:	4b88      	ldr	r3, [pc, #544]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x2d0>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d060      	beq.n	8002284 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_OscConfig+0x310>
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d119      	bne.n	8002202 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d116      	bne.n	8002202 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d4:	4b7c      	ldr	r3, [pc, #496]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_OscConfig+0x328>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e23f      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b76      	ldr	r3, [pc, #472]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	4973      	ldr	r1, [pc, #460]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002200:	e040      	b.n	8002284 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d023      	beq.n	8002252 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220a:	4b6f      	ldr	r3, [pc, #444]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6e      	ldr	r2, [pc, #440]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7ff fab1 	bl	800177c <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221e:	f7ff faad 	bl	800177c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e21d      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002230:	4b65      	ldr	r3, [pc, #404]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b62      	ldr	r3, [pc, #392]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	495f      	ldr	r1, [pc, #380]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
 8002250:	e018      	b.n	8002284 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b5d      	ldr	r3, [pc, #372]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5c      	ldr	r2, [pc, #368]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff fa8d 	bl	800177c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff fa89 	bl	800177c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1f9      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002278:	4b53      	ldr	r3, [pc, #332]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d03c      	beq.n	800230a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002298:	4b4b      	ldr	r3, [pc, #300]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800229a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229e:	4a4a      	ldr	r2, [pc, #296]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7ff fa68 	bl	800177c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7ff fa64 	bl	800177c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1d4      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c2:	4b41      	ldr	r3, [pc, #260]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80022c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ef      	beq.n	80022b0 <HAL_RCC_OscConfig+0x3ec>
 80022d0:	e01b      	b.n	800230a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d2:	4b3d      	ldr	r3, [pc, #244]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80022d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d8:	4a3b      	ldr	r2, [pc, #236]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e2:	f7ff fa4b 	bl	800177c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ea:	f7ff fa47 	bl	800177c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1b7      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fc:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ef      	bne.n	80022ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80a6 	beq.w	8002464 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800231c:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	4a26      	ldr	r2, [pc, #152]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002332:	6593      	str	r3, [r2, #88]	@ 0x58
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002340:	2301      	movs	r3, #1
 8002342:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002344:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <HAL_RCC_OscConfig+0x508>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d118      	bne.n	8002382 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <HAL_RCC_OscConfig+0x508>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1d      	ldr	r2, [pc, #116]	@ (80023cc <HAL_RCC_OscConfig+0x508>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235c:	f7ff fa0e 	bl	800177c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002364:	f7ff fa0a 	bl	800177c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e17a      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_RCC_OscConfig+0x508>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_RCC_OscConfig+0x4d8>
 800238a:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800239a:	e029      	b.n	80023f0 <HAL_RCC_OscConfig+0x52c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d115      	bne.n	80023d0 <HAL_RCC_OscConfig+0x50c>
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023aa:	4a07      	ldr	r2, [pc, #28]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b4:	4b04      	ldr	r3, [pc, #16]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	4a03      	ldr	r2, [pc, #12]	@ (80023c8 <HAL_RCC_OscConfig+0x504>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c4:	e014      	b.n	80023f0 <HAL_RCC_OscConfig+0x52c>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40007000 	.word	0x40007000
 80023d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	4a9b      	ldr	r2, [pc, #620]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023e0:	4b98      	ldr	r3, [pc, #608]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e6:	4a97      	ldr	r2, [pc, #604]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d016      	beq.n	8002426 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7ff f9c0 	bl	800177c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7ff f9bc 	bl	800177c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e12a      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002416:	4b8b      	ldr	r3, [pc, #556]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ed      	beq.n	8002400 <HAL_RCC_OscConfig+0x53c>
 8002424:	e015      	b.n	8002452 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7ff f9a9 	bl	800177c <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7ff f9a5 	bl	800177c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e113      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002444:	4b7f      	ldr	r3, [pc, #508]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ed      	bne.n	800242e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002452:	7ffb      	ldrb	r3, [r7, #31]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	4b7a      	ldr	r3, [pc, #488]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	4a79      	ldr	r2, [pc, #484]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 800245e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002462:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80fe 	beq.w	800266a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002472:	2b02      	cmp	r3, #2
 8002474:	f040 80d0 	bne.w	8002618 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002478:	4b72      	ldr	r3, [pc, #456]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0203 	and.w	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	429a      	cmp	r2, r3
 800248a:	d130      	bne.n	80024ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	3b01      	subs	r3, #1
 8002498:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d127      	bne.n	80024ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d11f      	bne.n	80024ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024b8:	2a07      	cmp	r2, #7
 80024ba:	bf14      	ite	ne
 80024bc:	2201      	movne	r2, #1
 80024be:	2200      	moveq	r2, #0
 80024c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d113      	bne.n	80024ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	3b01      	subs	r3, #1
 80024e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d06e      	beq.n	80025cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d069      	beq.n	80025c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024f4:	4b53      	ldr	r3, [pc, #332]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002500:	4b50      	ldr	r3, [pc, #320]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0ad      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002510:	4b4c      	ldr	r3, [pc, #304]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a4b      	ldr	r2, [pc, #300]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800251a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800251c:	f7ff f92e 	bl	800177c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7ff f92a 	bl	800177c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e09a      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002536:	4b43      	ldr	r3, [pc, #268]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002542:	4b40      	ldr	r3, [pc, #256]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	4b40      	ldr	r3, [pc, #256]	@ (8002648 <HAL_RCC_OscConfig+0x784>)
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002552:	3a01      	subs	r2, #1
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	4311      	orrs	r1, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800255c:	0212      	lsls	r2, r2, #8
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002564:	0852      	lsrs	r2, r2, #1
 8002566:	3a01      	subs	r2, #1
 8002568:	0552      	lsls	r2, r2, #21
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002570:	0852      	lsrs	r2, r2, #1
 8002572:	3a01      	subs	r2, #1
 8002574:	0652      	lsls	r2, r2, #25
 8002576:	4311      	orrs	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800257c:	0912      	lsrs	r2, r2, #4
 800257e:	0452      	lsls	r2, r2, #17
 8002580:	430a      	orrs	r2, r1
 8002582:	4930      	ldr	r1, [pc, #192]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002584:	4313      	orrs	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002588:	4b2e      	ldr	r3, [pc, #184]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2d      	ldr	r2, [pc, #180]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 800258e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002592:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002594:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a2a      	ldr	r2, [pc, #168]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 800259a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800259e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a0:	f7ff f8ec 	bl	800177c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7ff f8e8 	bl	800177c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e058      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c6:	e050      	b.n	800266a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e04f      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d148      	bne.n	800266a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a16      	ldr	r2, [pc, #88]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f0:	f7ff f8c4 	bl	800177c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7ff f8c0 	bl	800177c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e030      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260a:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x734>
 8002616:	e028      	b.n	800266a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d023      	beq.n	8002666 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <HAL_RCC_OscConfig+0x780>)
 8002624:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7ff f8a7 	bl	800177c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002630:	e00c      	b.n	800264c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff f8a3 	bl	800177c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d905      	bls.n	800264c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e013      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
 8002644:	40021000 	.word	0x40021000
 8002648:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_OscConfig+0x7b0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ec      	bne.n	8002632 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002658:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_OscConfig+0x7b0>)
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	4905      	ldr	r1, [pc, #20]	@ (8002674 <HAL_RCC_OscConfig+0x7b0>)
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_RCC_OscConfig+0x7b4>)
 8002660:	4013      	ands	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
 8002664:	e001      	b.n	800266a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	feeefffc 	.word	0xfeeefffc

0800267c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0e7      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b75      	ldr	r3, [pc, #468]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b72      	ldr	r3, [pc, #456]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4970      	ldr	r1, [pc, #448]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0cf      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	4b66      	ldr	r3, [pc, #408]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d8:	429a      	cmp	r2, r3
 80026da:	d908      	bls.n	80026ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b63      	ldr	r3, [pc, #396]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4960      	ldr	r1, [pc, #384]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04c      	beq.n	8002794 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002702:	4b5a      	ldr	r3, [pc, #360]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d121      	bne.n	8002752 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0a6      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271a:	4b54      	ldr	r3, [pc, #336]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d115      	bne.n	8002752 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e09a      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002732:	4b4e      	ldr	r3, [pc, #312]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e08e      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002742:	4b4a      	ldr	r3, [pc, #296]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e086      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b46      	ldr	r3, [pc, #280]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4943      	ldr	r1, [pc, #268]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7ff f80a 	bl	800177c <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7ff f806 	bl	800177c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e06e      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b3a      	ldr	r3, [pc, #232]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4b31      	ldr	r3, [pc, #196]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d208      	bcs.n	80027c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	492b      	ldr	r1, [pc, #172]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c2:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d210      	bcs.n	80027f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d0:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 0207 	bic.w	r2, r3, #7
 80027d8:	4923      	ldr	r1, [pc, #140]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e0:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <HAL_RCC_ClockConfig+0x1ec>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e036      	b.n	8002860 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4918      	ldr	r1, [pc, #96]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4910      	ldr	r1, [pc, #64]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002830:	f000 f824 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	490b      	ldr	r1, [pc, #44]	@ (8002870 <HAL_RCC_ClockConfig+0x1f4>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800284e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe ff41 	bl	80016dc <HAL_InitTick>
 800285a:	4603      	mov	r3, r0
 800285c:	72fb      	strb	r3, [r7, #11]

  return status;
 800285e:	7afb      	ldrb	r3, [r7, #11]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	08003f50 	.word	0x08003f50
 8002874:	20000158 	.word	0x20000158
 8002878:	2000015c 	.word	0x2000015c

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	@ 0x24
 8002880:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288a:	4b3e      	ldr	r3, [pc, #248]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002894:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x34>
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d121      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d11e      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028b0:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028bc:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10d      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028f4:	4b25      	ldr	r3, [pc, #148]	@ (800298c <HAL_RCC_GetSysClockFreq+0x110>)
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	e004      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002900:	4b23      	ldr	r3, [pc, #140]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x114>)
 8002902:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d134      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800290a:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0xa6>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d003      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0xac>
 8002920:	e005      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002922:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <HAL_RCC_GetSysClockFreq+0x110>)
 8002924:	617b      	str	r3, [r7, #20]
      break;
 8002926:	e005      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002928:	4b19      	ldr	r3, [pc, #100]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x114>)
 800292a:	617b      	str	r3, [r7, #20]
      break;
 800292c:	e002      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	617b      	str	r3, [r7, #20]
      break;
 8002932:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002934:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	3301      	adds	r3, #1
 8002940:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	fb03 f202 	mul.w	r2, r3, r2
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x108>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	0e5b      	lsrs	r3, r3, #25
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	3301      	adds	r3, #1
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002974:	69bb      	ldr	r3, [r7, #24]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3724      	adds	r7, #36	@ 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	08003f60 	.word	0x08003f60
 800298c:	00f42400 	.word	0x00f42400
 8002990:	007a1200 	.word	0x007a1200

08002994 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029ac:	f7ff fa26 	bl	8001dfc <HAL_PWREx_GetVoltageRange>
 80029b0:	6178      	str	r0, [r7, #20]
 80029b2:	e014      	b.n	80029de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029be:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c0:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029cc:	f7ff fa16 	bl	8001dfc <HAL_PWREx_GetVoltageRange>
 80029d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029e4:	d10b      	bne.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b80      	cmp	r3, #128	@ 0x80
 80029ea:	d919      	bls.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80029f0:	d902      	bls.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f2:	2302      	movs	r3, #2
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	e013      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029f8:	2301      	movs	r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e010      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b80      	cmp	r3, #128	@ 0x80
 8002a02:	d902      	bls.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a04:	2303      	movs	r3, #3
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	e00a      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b80      	cmp	r3, #128	@ 0x80
 8002a0e:	d102      	bne.n	8002a16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a10:	2302      	movs	r3, #2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e004      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b70      	cmp	r3, #112	@ 0x70
 8002a1a:	d101      	bne.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 0207 	bic.w	r2, r3, #7
 8002a28:	4909      	ldr	r1, [pc, #36]	@ (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a30:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e095      	b.n	8002b92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a76:	d009      	beq.n	8002a8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
 8002a7e:	e005      	b.n	8002a8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fc52 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002acc:	d902      	bls.n	8002ad4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e002      	b.n	8002ada <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ae2:	d007      	beq.n	8002af4 <HAL_SPI_Init+0xa0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002aec:	d002      	beq.n	8002af4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	ea42 0103 	orr.w	r1, r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	f003 0204 	and.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b70:	ea42 0103 	orr.w	r1, r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b088      	sub	sp, #32
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_SPI_Transmit+0x22>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e15f      	b.n	8002e7c <HAL_SPI_Transmit+0x2e2>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bc4:	f7fe fdda 	bl	800177c <HAL_GetTick>
 8002bc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d002      	beq.n	8002be0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bde:	e148      	b.n	8002e72 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_SPI_Transmit+0x52>
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bf0:	e13f      	b.n	8002e72 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c3c:	d10f      	bne.n	8002c5e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b40      	cmp	r3, #64	@ 0x40
 8002c6a:	d007      	beq.n	8002c7c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c84:	d94f      	bls.n	8002d26 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_SPI_Transmit+0xfa>
 8002c8e:	8afb      	ldrh	r3, [r7, #22]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d142      	bne.n	8002d1a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	881a      	ldrh	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	1c9a      	adds	r2, r3, #2
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cb8:	e02f      	b.n	8002d1a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d112      	bne.n	8002cee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cec:	e015      	b.n	8002d1a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cee:	f7fe fd45 	bl	800177c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d803      	bhi.n	8002d06 <HAL_SPI_Transmit+0x16c>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d04:	d102      	bne.n	8002d0c <HAL_SPI_Transmit+0x172>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d18:	e0ab      	b.n	8002e72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ca      	bne.n	8002cba <HAL_SPI_Transmit+0x120>
 8002d24:	e080      	b.n	8002e28 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_SPI_Transmit+0x19a>
 8002d2e:	8afb      	ldrh	r3, [r7, #22]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d174      	bne.n	8002e1e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d912      	bls.n	8002d64 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	1c9a      	adds	r2, r3, #2
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b02      	subs	r3, #2
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d62:	e05c      	b.n	8002e1e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d8a:	e048      	b.n	8002e1e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d12b      	bne.n	8002df2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d912      	bls.n	8002dca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	1c9a      	adds	r2, r3, #2
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b02      	subs	r3, #2
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dc8:	e029      	b.n	8002e1e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002df0:	e015      	b.n	8002e1e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df2:	f7fe fcc3 	bl	800177c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d803      	bhi.n	8002e0a <HAL_SPI_Transmit+0x270>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e08:	d102      	bne.n	8002e10 <HAL_SPI_Transmit+0x276>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e1c:	e029      	b.n	8002e72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1b1      	bne.n	8002d8c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fb69 	bl	8003504 <SPI_EndRxTxTransaction>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e003      	b.n	8002e72 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002e7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_SPI_TransmitReceive+0x26>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e20a      	b.n	80032c0 <HAL_SPI_TransmitReceive+0x43c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb2:	f7fe fc63 	bl	800177c <HAL_GetTick>
 8002eb6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ebe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ece:	7efb      	ldrb	r3, [r7, #27]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x6e>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eda:	d106      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x66>
 8002ee4:	7efb      	ldrb	r3, [r7, #27]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d003      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002ef0:	e1e0      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x80>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x80>
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002f0a:	e1d3      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d003      	beq.n	8002f20 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	887a      	ldrh	r2, [r7, #2]
 8002f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f62:	d802      	bhi.n	8002f6a <HAL_SPI_TransmitReceive+0xe6>
 8002f64:	8a3b      	ldrh	r3, [r7, #16]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d908      	bls.n	8002f7c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e007      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d007      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fb2:	f240 8081 	bls.w	80030b8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x140>
 8002fbe:	8a7b      	ldrh	r3, [r7, #18]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d16d      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	881a      	ldrh	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe8:	e05a      	b.n	80030a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11b      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x1ac>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x1ac>
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	2b01      	cmp	r3, #1
 8003006:	d113      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d11c      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x1f4>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	b292      	uxth	r2, r2
 8003056:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	1c9a      	adds	r2, r3, #2
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003078:	f7fe fb80 	bl	800177c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003084:	429a      	cmp	r2, r3
 8003086:	d80b      	bhi.n	80030a0 <HAL_SPI_TransmitReceive+0x21c>
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800308e:	d007      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800309e:	e109      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d19f      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x166>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d199      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x166>
 80030b6:	e0e3      	b.n	8003280 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x244>
 80030c0:	8a7b      	ldrh	r3, [r7, #18]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	f040 80cf 	bne.w	8003266 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d912      	bls.n	80030f8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	1c9a      	adds	r2, r3, #2
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b02      	subs	r3, #2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030f6:	e0b6      	b.n	8003266 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800311e:	e0a2      	b.n	8003266 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d134      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x314>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02f      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x314>
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	2b01      	cmp	r3, #1
 800313c:	d12c      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d912      	bls.n	800316e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b02      	subs	r3, #2
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800316c:	e012      	b.n	8003194 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d148      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x3b4>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d042      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d923      	bls.n	8003206 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	b292      	uxth	r2, r2
 80031ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b02      	subs	r3, #2
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d81f      	bhi.n	8003234 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	e016      	b.n	8003234 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f103 020c 	add.w	r2, r3, #12
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003238:	f7fe faa0 	bl	800177c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003244:	429a      	cmp	r2, r3
 8003246:	d803      	bhi.n	8003250 <HAL_SPI_TransmitReceive+0x3cc>
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800324e:	d102      	bne.n	8003256 <HAL_SPI_TransmitReceive+0x3d2>
 8003250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003264:	e026      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	f47f af57 	bne.w	8003120 <HAL_SPI_TransmitReceive+0x29c>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	f47f af50 	bne.w	8003120 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f93d 	bl	8003504 <SPI_EndRxTxTransaction>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e003      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80032bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3728      	adds	r7, #40	@ 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032d8:	f7fe fa50 	bl	800177c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4413      	add	r3, r2
 80032e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032e8:	f7fe fa48 	bl	800177c <HAL_GetTick>
 80032ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ee:	4b39      	ldr	r3, [pc, #228]	@ (80033d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	015b      	lsls	r3, r3, #5
 80032f4:	0d1b      	lsrs	r3, r3, #20
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032fe:	e054      	b.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003306:	d050      	beq.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003308:	f7fe fa38 	bl	800177c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	429a      	cmp	r2, r3
 8003316:	d902      	bls.n	800331e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d13d      	bne.n	800339a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800332c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003336:	d111      	bne.n	800335c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003340:	d004      	beq.n	800334c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334a:	d107      	bne.n	800335c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800335a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003364:	d10f      	bne.n	8003386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e017      	b.n	80033ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d19b      	bne.n	8003300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000158 	.word	0x20000158

080033d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	@ 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033ea:	f7fe f9c7 	bl	800177c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80033fa:	f7fe f9bf 	bl	800177c <HAL_GetTick>
 80033fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003408:	4b3d      	ldr	r3, [pc, #244]	@ (8003500 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00da      	lsls	r2, r3, #3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	0d1b      	lsrs	r3, r3, #20
 8003418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003420:	e060      	b.n	80034e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003428:	d107      	bne.n	800343a <SPI_WaitFifoStateUntilTimeout+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003438:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003440:	d050      	beq.n	80034e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003442:	f7fe f99b 	bl	800177c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344e:	429a      	cmp	r2, r3
 8003450:	d902      	bls.n	8003458 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d13d      	bne.n	80034d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003466:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003470:	d111      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347a:	d004      	beq.n	8003486 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003484:	d107      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349e:	d10f      	bne.n	80034c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e010      	b.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d196      	bne.n	8003422 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3728      	adds	r7, #40	@ 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000158 	.word	0x20000158

08003504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff ff5b 	bl	80033d8 <SPI_WaitFifoStateUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e027      	b.n	8003588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff fec0 	bl	80032c8 <SPI_WaitFlagStateUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e014      	b.n	8003588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2200      	movs	r2, #0
 8003566:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff ff34 	bl	80033d8 <SPI_WaitFifoStateUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e000      	b.n	8003588 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <malloc>:
 8003590:	4b02      	ldr	r3, [pc, #8]	@ (800359c <malloc+0xc>)
 8003592:	4601      	mov	r1, r0
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	f000 b82d 	b.w	80035f4 <_malloc_r>
 800359a:	bf00      	nop
 800359c:	20000164 	.word	0x20000164

080035a0 <free>:
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <free+0xc>)
 80035a2:	4601      	mov	r1, r0
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	f000 b937 	b.w	8003818 <_free_r>
 80035aa:	bf00      	nop
 80035ac:	20000164 	.word	0x20000164

080035b0 <sbrk_aligned>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4e0f      	ldr	r6, [pc, #60]	@ (80035f0 <sbrk_aligned+0x40>)
 80035b4:	460c      	mov	r4, r1
 80035b6:	6831      	ldr	r1, [r6, #0]
 80035b8:	4605      	mov	r5, r0
 80035ba:	b911      	cbnz	r1, 80035c2 <sbrk_aligned+0x12>
 80035bc:	f000 f8e2 	bl	8003784 <_sbrk_r>
 80035c0:	6030      	str	r0, [r6, #0]
 80035c2:	4621      	mov	r1, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	f000 f8dd 	bl	8003784 <_sbrk_r>
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	d103      	bne.n	80035d6 <sbrk_aligned+0x26>
 80035ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80035d2:	4620      	mov	r0, r4
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	1cc4      	adds	r4, r0, #3
 80035d8:	f024 0403 	bic.w	r4, r4, #3
 80035dc:	42a0      	cmp	r0, r4
 80035de:	d0f8      	beq.n	80035d2 <sbrk_aligned+0x22>
 80035e0:	1a21      	subs	r1, r4, r0
 80035e2:	4628      	mov	r0, r5
 80035e4:	f000 f8ce 	bl	8003784 <_sbrk_r>
 80035e8:	3001      	adds	r0, #1
 80035ea:	d1f2      	bne.n	80035d2 <sbrk_aligned+0x22>
 80035ec:	e7ef      	b.n	80035ce <sbrk_aligned+0x1e>
 80035ee:	bf00      	nop
 80035f0:	20000364 	.word	0x20000364

080035f4 <_malloc_r>:
 80035f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f8:	1ccd      	adds	r5, r1, #3
 80035fa:	f025 0503 	bic.w	r5, r5, #3
 80035fe:	3508      	adds	r5, #8
 8003600:	2d0c      	cmp	r5, #12
 8003602:	bf38      	it	cc
 8003604:	250c      	movcc	r5, #12
 8003606:	2d00      	cmp	r5, #0
 8003608:	4606      	mov	r6, r0
 800360a:	db01      	blt.n	8003610 <_malloc_r+0x1c>
 800360c:	42a9      	cmp	r1, r5
 800360e:	d904      	bls.n	800361a <_malloc_r+0x26>
 8003610:	230c      	movs	r3, #12
 8003612:	6033      	str	r3, [r6, #0]
 8003614:	2000      	movs	r0, #0
 8003616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800361a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036f0 <_malloc_r+0xfc>
 800361e:	f000 f869 	bl	80036f4 <__malloc_lock>
 8003622:	f8d8 3000 	ldr.w	r3, [r8]
 8003626:	461c      	mov	r4, r3
 8003628:	bb44      	cbnz	r4, 800367c <_malloc_r+0x88>
 800362a:	4629      	mov	r1, r5
 800362c:	4630      	mov	r0, r6
 800362e:	f7ff ffbf 	bl	80035b0 <sbrk_aligned>
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	4604      	mov	r4, r0
 8003636:	d158      	bne.n	80036ea <_malloc_r+0xf6>
 8003638:	f8d8 4000 	ldr.w	r4, [r8]
 800363c:	4627      	mov	r7, r4
 800363e:	2f00      	cmp	r7, #0
 8003640:	d143      	bne.n	80036ca <_malloc_r+0xd6>
 8003642:	2c00      	cmp	r4, #0
 8003644:	d04b      	beq.n	80036de <_malloc_r+0xea>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	4639      	mov	r1, r7
 800364a:	4630      	mov	r0, r6
 800364c:	eb04 0903 	add.w	r9, r4, r3
 8003650:	f000 f898 	bl	8003784 <_sbrk_r>
 8003654:	4581      	cmp	r9, r0
 8003656:	d142      	bne.n	80036de <_malloc_r+0xea>
 8003658:	6821      	ldr	r1, [r4, #0]
 800365a:	1a6d      	subs	r5, r5, r1
 800365c:	4629      	mov	r1, r5
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff ffa6 	bl	80035b0 <sbrk_aligned>
 8003664:	3001      	adds	r0, #1
 8003666:	d03a      	beq.n	80036de <_malloc_r+0xea>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	442b      	add	r3, r5
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	f8d8 3000 	ldr.w	r3, [r8]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	bb62      	cbnz	r2, 80036d0 <_malloc_r+0xdc>
 8003676:	f8c8 7000 	str.w	r7, [r8]
 800367a:	e00f      	b.n	800369c <_malloc_r+0xa8>
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	1b52      	subs	r2, r2, r5
 8003680:	d420      	bmi.n	80036c4 <_malloc_r+0xd0>
 8003682:	2a0b      	cmp	r2, #11
 8003684:	d917      	bls.n	80036b6 <_malloc_r+0xc2>
 8003686:	1961      	adds	r1, r4, r5
 8003688:	42a3      	cmp	r3, r4
 800368a:	6025      	str	r5, [r4, #0]
 800368c:	bf18      	it	ne
 800368e:	6059      	strne	r1, [r3, #4]
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	bf08      	it	eq
 8003694:	f8c8 1000 	streq.w	r1, [r8]
 8003698:	5162      	str	r2, [r4, r5]
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f82f 	bl	8003700 <__malloc_unlock>
 80036a2:	f104 000b 	add.w	r0, r4, #11
 80036a6:	1d23      	adds	r3, r4, #4
 80036a8:	f020 0007 	bic.w	r0, r0, #7
 80036ac:	1ac2      	subs	r2, r0, r3
 80036ae:	bf1c      	itt	ne
 80036b0:	1a1b      	subne	r3, r3, r0
 80036b2:	50a3      	strne	r3, [r4, r2]
 80036b4:	e7af      	b.n	8003616 <_malloc_r+0x22>
 80036b6:	6862      	ldr	r2, [r4, #4]
 80036b8:	42a3      	cmp	r3, r4
 80036ba:	bf0c      	ite	eq
 80036bc:	f8c8 2000 	streq.w	r2, [r8]
 80036c0:	605a      	strne	r2, [r3, #4]
 80036c2:	e7eb      	b.n	800369c <_malloc_r+0xa8>
 80036c4:	4623      	mov	r3, r4
 80036c6:	6864      	ldr	r4, [r4, #4]
 80036c8:	e7ae      	b.n	8003628 <_malloc_r+0x34>
 80036ca:	463c      	mov	r4, r7
 80036cc:	687f      	ldr	r7, [r7, #4]
 80036ce:	e7b6      	b.n	800363e <_malloc_r+0x4a>
 80036d0:	461a      	mov	r2, r3
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	42a3      	cmp	r3, r4
 80036d6:	d1fb      	bne.n	80036d0 <_malloc_r+0xdc>
 80036d8:	2300      	movs	r3, #0
 80036da:	6053      	str	r3, [r2, #4]
 80036dc:	e7de      	b.n	800369c <_malloc_r+0xa8>
 80036de:	230c      	movs	r3, #12
 80036e0:	6033      	str	r3, [r6, #0]
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 f80c 	bl	8003700 <__malloc_unlock>
 80036e8:	e794      	b.n	8003614 <_malloc_r+0x20>
 80036ea:	6005      	str	r5, [r0, #0]
 80036ec:	e7d6      	b.n	800369c <_malloc_r+0xa8>
 80036ee:	bf00      	nop
 80036f0:	20000368 	.word	0x20000368

080036f4 <__malloc_lock>:
 80036f4:	4801      	ldr	r0, [pc, #4]	@ (80036fc <__malloc_lock+0x8>)
 80036f6:	f000 b87f 	b.w	80037f8 <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	200004a8 	.word	0x200004a8

08003700 <__malloc_unlock>:
 8003700:	4801      	ldr	r0, [pc, #4]	@ (8003708 <__malloc_unlock+0x8>)
 8003702:	f000 b87a 	b.w	80037fa <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	200004a8 	.word	0x200004a8

0800370c <sniprintf>:
 800370c:	b40c      	push	{r2, r3}
 800370e:	b530      	push	{r4, r5, lr}
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <sniprintf+0x64>)
 8003712:	1e0c      	subs	r4, r1, #0
 8003714:	681d      	ldr	r5, [r3, #0]
 8003716:	b09d      	sub	sp, #116	@ 0x74
 8003718:	da08      	bge.n	800372c <sniprintf+0x20>
 800371a:	238b      	movs	r3, #139	@ 0x8b
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003722:	b01d      	add	sp, #116	@ 0x74
 8003724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003728:	b002      	add	sp, #8
 800372a:	4770      	bx	lr
 800372c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003730:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003734:	bf14      	ite	ne
 8003736:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800373a:	4623      	moveq	r3, r4
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	9307      	str	r3, [sp, #28]
 8003740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003744:	9002      	str	r0, [sp, #8]
 8003746:	9006      	str	r0, [sp, #24]
 8003748:	f8ad 3016 	strh.w	r3, [sp, #22]
 800374c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800374e:	ab21      	add	r3, sp, #132	@ 0x84
 8003750:	a902      	add	r1, sp, #8
 8003752:	4628      	mov	r0, r5
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	f000 f905 	bl	8003964 <_svfiprintf_r>
 800375a:	1c43      	adds	r3, r0, #1
 800375c:	bfbc      	itt	lt
 800375e:	238b      	movlt	r3, #139	@ 0x8b
 8003760:	602b      	strlt	r3, [r5, #0]
 8003762:	2c00      	cmp	r4, #0
 8003764:	d0dd      	beq.n	8003722 <sniprintf+0x16>
 8003766:	9b02      	ldr	r3, [sp, #8]
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	e7d9      	b.n	8003722 <sniprintf+0x16>
 800376e:	bf00      	nop
 8003770:	20000164 	.word	0x20000164

08003774 <memset>:
 8003774:	4402      	add	r2, r0
 8003776:	4603      	mov	r3, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	f803 1b01 	strb.w	r1, [r3], #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <_sbrk_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4d06      	ldr	r5, [pc, #24]	@ (80037a0 <_sbrk_r+0x1c>)
 8003788:	2300      	movs	r3, #0
 800378a:	4604      	mov	r4, r0
 800378c:	4608      	mov	r0, r1
 800378e:	602b      	str	r3, [r5, #0]
 8003790:	f7fd fe5e 	bl	8001450 <_sbrk>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_sbrk_r+0x1a>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_sbrk_r+0x1a>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	200004a4 	.word	0x200004a4

080037a4 <__errno>:
 80037a4:	4b01      	ldr	r3, [pc, #4]	@ (80037ac <__errno+0x8>)
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000164 	.word	0x20000164

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4d0d      	ldr	r5, [pc, #52]	@ (80037e8 <__libc_init_array+0x38>)
 80037b4:	4c0d      	ldr	r4, [pc, #52]	@ (80037ec <__libc_init_array+0x3c>)
 80037b6:	1b64      	subs	r4, r4, r5
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	2600      	movs	r6, #0
 80037bc:	42a6      	cmp	r6, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	4d0b      	ldr	r5, [pc, #44]	@ (80037f0 <__libc_init_array+0x40>)
 80037c2:	4c0c      	ldr	r4, [pc, #48]	@ (80037f4 <__libc_init_array+0x44>)
 80037c4:	f000 fba8 	bl	8003f18 <_init>
 80037c8:	1b64      	subs	r4, r4, r5
 80037ca:	10a4      	asrs	r4, r4, #2
 80037cc:	2600      	movs	r6, #0
 80037ce:	42a6      	cmp	r6, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d8:	4798      	blx	r3
 80037da:	3601      	adds	r6, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e2:	4798      	blx	r3
 80037e4:	3601      	adds	r6, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	08003fcc 	.word	0x08003fcc
 80037ec:	08003fcc 	.word	0x08003fcc
 80037f0:	08003fcc 	.word	0x08003fcc
 80037f4:	08003fd0 	.word	0x08003fd0

080037f8 <__retarget_lock_acquire_recursive>:
 80037f8:	4770      	bx	lr

080037fa <__retarget_lock_release_recursive>:
 80037fa:	4770      	bx	lr

080037fc <memcpy>:
 80037fc:	440a      	add	r2, r1
 80037fe:	4291      	cmp	r1, r2
 8003800:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003804:	d100      	bne.n	8003808 <memcpy+0xc>
 8003806:	4770      	bx	lr
 8003808:	b510      	push	{r4, lr}
 800380a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800380e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003812:	4291      	cmp	r1, r2
 8003814:	d1f9      	bne.n	800380a <memcpy+0xe>
 8003816:	bd10      	pop	{r4, pc}

08003818 <_free_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4605      	mov	r5, r0
 800381c:	2900      	cmp	r1, #0
 800381e:	d041      	beq.n	80038a4 <_free_r+0x8c>
 8003820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003824:	1f0c      	subs	r4, r1, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	bfb8      	it	lt
 800382a:	18e4      	addlt	r4, r4, r3
 800382c:	f7ff ff62 	bl	80036f4 <__malloc_lock>
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <_free_r+0x90>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	b933      	cbnz	r3, 8003844 <_free_r+0x2c>
 8003836:	6063      	str	r3, [r4, #4]
 8003838:	6014      	str	r4, [r2, #0]
 800383a:	4628      	mov	r0, r5
 800383c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003840:	f7ff bf5e 	b.w	8003700 <__malloc_unlock>
 8003844:	42a3      	cmp	r3, r4
 8003846:	d908      	bls.n	800385a <_free_r+0x42>
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	1821      	adds	r1, r4, r0
 800384c:	428b      	cmp	r3, r1
 800384e:	bf01      	itttt	eq
 8003850:	6819      	ldreq	r1, [r3, #0]
 8003852:	685b      	ldreq	r3, [r3, #4]
 8003854:	1809      	addeq	r1, r1, r0
 8003856:	6021      	streq	r1, [r4, #0]
 8003858:	e7ed      	b.n	8003836 <_free_r+0x1e>
 800385a:	461a      	mov	r2, r3
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b10b      	cbz	r3, 8003864 <_free_r+0x4c>
 8003860:	42a3      	cmp	r3, r4
 8003862:	d9fa      	bls.n	800385a <_free_r+0x42>
 8003864:	6811      	ldr	r1, [r2, #0]
 8003866:	1850      	adds	r0, r2, r1
 8003868:	42a0      	cmp	r0, r4
 800386a:	d10b      	bne.n	8003884 <_free_r+0x6c>
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	4401      	add	r1, r0
 8003870:	1850      	adds	r0, r2, r1
 8003872:	4283      	cmp	r3, r0
 8003874:	6011      	str	r1, [r2, #0]
 8003876:	d1e0      	bne.n	800383a <_free_r+0x22>
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	6053      	str	r3, [r2, #4]
 800387e:	4408      	add	r0, r1
 8003880:	6010      	str	r0, [r2, #0]
 8003882:	e7da      	b.n	800383a <_free_r+0x22>
 8003884:	d902      	bls.n	800388c <_free_r+0x74>
 8003886:	230c      	movs	r3, #12
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	e7d6      	b.n	800383a <_free_r+0x22>
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	1821      	adds	r1, r4, r0
 8003890:	428b      	cmp	r3, r1
 8003892:	bf04      	itt	eq
 8003894:	6819      	ldreq	r1, [r3, #0]
 8003896:	685b      	ldreq	r3, [r3, #4]
 8003898:	6063      	str	r3, [r4, #4]
 800389a:	bf04      	itt	eq
 800389c:	1809      	addeq	r1, r1, r0
 800389e:	6021      	streq	r1, [r4, #0]
 80038a0:	6054      	str	r4, [r2, #4]
 80038a2:	e7ca      	b.n	800383a <_free_r+0x22>
 80038a4:	bd38      	pop	{r3, r4, r5, pc}
 80038a6:	bf00      	nop
 80038a8:	20000368 	.word	0x20000368

080038ac <__ssputs_r>:
 80038ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b0:	688e      	ldr	r6, [r1, #8]
 80038b2:	461f      	mov	r7, r3
 80038b4:	42be      	cmp	r6, r7
 80038b6:	680b      	ldr	r3, [r1, #0]
 80038b8:	4682      	mov	sl, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	4690      	mov	r8, r2
 80038be:	d82d      	bhi.n	800391c <__ssputs_r+0x70>
 80038c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038c8:	d026      	beq.n	8003918 <__ssputs_r+0x6c>
 80038ca:	6965      	ldr	r5, [r4, #20]
 80038cc:	6909      	ldr	r1, [r1, #16]
 80038ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038d2:	eba3 0901 	sub.w	r9, r3, r1
 80038d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038da:	1c7b      	adds	r3, r7, #1
 80038dc:	444b      	add	r3, r9
 80038de:	106d      	asrs	r5, r5, #1
 80038e0:	429d      	cmp	r5, r3
 80038e2:	bf38      	it	cc
 80038e4:	461d      	movcc	r5, r3
 80038e6:	0553      	lsls	r3, r2, #21
 80038e8:	d527      	bpl.n	800393a <__ssputs_r+0x8e>
 80038ea:	4629      	mov	r1, r5
 80038ec:	f7ff fe82 	bl	80035f4 <_malloc_r>
 80038f0:	4606      	mov	r6, r0
 80038f2:	b360      	cbz	r0, 800394e <__ssputs_r+0xa2>
 80038f4:	6921      	ldr	r1, [r4, #16]
 80038f6:	464a      	mov	r2, r9
 80038f8:	f7ff ff80 	bl	80037fc <memcpy>
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	6126      	str	r6, [r4, #16]
 800390a:	6165      	str	r5, [r4, #20]
 800390c:	444e      	add	r6, r9
 800390e:	eba5 0509 	sub.w	r5, r5, r9
 8003912:	6026      	str	r6, [r4, #0]
 8003914:	60a5      	str	r5, [r4, #8]
 8003916:	463e      	mov	r6, r7
 8003918:	42be      	cmp	r6, r7
 800391a:	d900      	bls.n	800391e <__ssputs_r+0x72>
 800391c:	463e      	mov	r6, r7
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	4632      	mov	r2, r6
 8003922:	4641      	mov	r1, r8
 8003924:	f000 faa8 	bl	8003e78 <memmove>
 8003928:	68a3      	ldr	r3, [r4, #8]
 800392a:	1b9b      	subs	r3, r3, r6
 800392c:	60a3      	str	r3, [r4, #8]
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	4433      	add	r3, r6
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	2000      	movs	r0, #0
 8003936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393a:	462a      	mov	r2, r5
 800393c:	f000 fab6 	bl	8003eac <_realloc_r>
 8003940:	4606      	mov	r6, r0
 8003942:	2800      	cmp	r0, #0
 8003944:	d1e0      	bne.n	8003908 <__ssputs_r+0x5c>
 8003946:	6921      	ldr	r1, [r4, #16]
 8003948:	4650      	mov	r0, sl
 800394a:	f7ff ff65 	bl	8003818 <_free_r>
 800394e:	230c      	movs	r3, #12
 8003950:	f8ca 3000 	str.w	r3, [sl]
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003960:	e7e9      	b.n	8003936 <__ssputs_r+0x8a>
	...

08003964 <_svfiprintf_r>:
 8003964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	4698      	mov	r8, r3
 800396a:	898b      	ldrh	r3, [r1, #12]
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	b09d      	sub	sp, #116	@ 0x74
 8003970:	4607      	mov	r7, r0
 8003972:	460d      	mov	r5, r1
 8003974:	4614      	mov	r4, r2
 8003976:	d510      	bpl.n	800399a <_svfiprintf_r+0x36>
 8003978:	690b      	ldr	r3, [r1, #16]
 800397a:	b973      	cbnz	r3, 800399a <_svfiprintf_r+0x36>
 800397c:	2140      	movs	r1, #64	@ 0x40
 800397e:	f7ff fe39 	bl	80035f4 <_malloc_r>
 8003982:	6028      	str	r0, [r5, #0]
 8003984:	6128      	str	r0, [r5, #16]
 8003986:	b930      	cbnz	r0, 8003996 <_svfiprintf_r+0x32>
 8003988:	230c      	movs	r3, #12
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003990:	b01d      	add	sp, #116	@ 0x74
 8003992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003996:	2340      	movs	r3, #64	@ 0x40
 8003998:	616b      	str	r3, [r5, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	9309      	str	r3, [sp, #36]	@ 0x24
 800399e:	2320      	movs	r3, #32
 80039a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a8:	2330      	movs	r3, #48	@ 0x30
 80039aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b48 <_svfiprintf_r+0x1e4>
 80039ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039b2:	f04f 0901 	mov.w	r9, #1
 80039b6:	4623      	mov	r3, r4
 80039b8:	469a      	mov	sl, r3
 80039ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039be:	b10a      	cbz	r2, 80039c4 <_svfiprintf_r+0x60>
 80039c0:	2a25      	cmp	r2, #37	@ 0x25
 80039c2:	d1f9      	bne.n	80039b8 <_svfiprintf_r+0x54>
 80039c4:	ebba 0b04 	subs.w	fp, sl, r4
 80039c8:	d00b      	beq.n	80039e2 <_svfiprintf_r+0x7e>
 80039ca:	465b      	mov	r3, fp
 80039cc:	4622      	mov	r2, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	4638      	mov	r0, r7
 80039d2:	f7ff ff6b 	bl	80038ac <__ssputs_r>
 80039d6:	3001      	adds	r0, #1
 80039d8:	f000 80a7 	beq.w	8003b2a <_svfiprintf_r+0x1c6>
 80039dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039de:	445a      	add	r2, fp
 80039e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80039e2:	f89a 3000 	ldrb.w	r3, [sl]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 809f 	beq.w	8003b2a <_svfiprintf_r+0x1c6>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f6:	f10a 0a01 	add.w	sl, sl, #1
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	9307      	str	r3, [sp, #28]
 80039fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a04:	4654      	mov	r4, sl
 8003a06:	2205      	movs	r2, #5
 8003a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0c:	484e      	ldr	r0, [pc, #312]	@ (8003b48 <_svfiprintf_r+0x1e4>)
 8003a0e:	f7fc fbdf 	bl	80001d0 <memchr>
 8003a12:	9a04      	ldr	r2, [sp, #16]
 8003a14:	b9d8      	cbnz	r0, 8003a4e <_svfiprintf_r+0xea>
 8003a16:	06d0      	lsls	r0, r2, #27
 8003a18:	bf44      	itt	mi
 8003a1a:	2320      	movmi	r3, #32
 8003a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a20:	0711      	lsls	r1, r2, #28
 8003a22:	bf44      	itt	mi
 8003a24:	232b      	movmi	r3, #43	@ 0x2b
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a30:	d015      	beq.n	8003a5e <_svfiprintf_r+0xfa>
 8003a32:	9a07      	ldr	r2, [sp, #28]
 8003a34:	4654      	mov	r4, sl
 8003a36:	2000      	movs	r0, #0
 8003a38:	f04f 0c0a 	mov.w	ip, #10
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a42:	3b30      	subs	r3, #48	@ 0x30
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d94b      	bls.n	8003ae0 <_svfiprintf_r+0x17c>
 8003a48:	b1b0      	cbz	r0, 8003a78 <_svfiprintf_r+0x114>
 8003a4a:	9207      	str	r2, [sp, #28]
 8003a4c:	e014      	b.n	8003a78 <_svfiprintf_r+0x114>
 8003a4e:	eba0 0308 	sub.w	r3, r0, r8
 8003a52:	fa09 f303 	lsl.w	r3, r9, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	46a2      	mov	sl, r4
 8003a5c:	e7d2      	b.n	8003a04 <_svfiprintf_r+0xa0>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	1d19      	adds	r1, r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9103      	str	r1, [sp, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfbb      	ittet	lt
 8003a6a:	425b      	neglt	r3, r3
 8003a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a70:	9307      	strge	r3, [sp, #28]
 8003a72:	9307      	strlt	r3, [sp, #28]
 8003a74:	bfb8      	it	lt
 8003a76:	9204      	strlt	r2, [sp, #16]
 8003a78:	7823      	ldrb	r3, [r4, #0]
 8003a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a7c:	d10a      	bne.n	8003a94 <_svfiprintf_r+0x130>
 8003a7e:	7863      	ldrb	r3, [r4, #1]
 8003a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a82:	d132      	bne.n	8003aea <_svfiprintf_r+0x186>
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a90:	3402      	adds	r4, #2
 8003a92:	9305      	str	r3, [sp, #20]
 8003a94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b58 <_svfiprintf_r+0x1f4>
 8003a98:	7821      	ldrb	r1, [r4, #0]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	f7fc fb97 	bl	80001d0 <memchr>
 8003aa2:	b138      	cbz	r0, 8003ab4 <_svfiprintf_r+0x150>
 8003aa4:	9b04      	ldr	r3, [sp, #16]
 8003aa6:	eba0 000a 	sub.w	r0, r0, sl
 8003aaa:	2240      	movs	r2, #64	@ 0x40
 8003aac:	4082      	lsls	r2, r0
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	3401      	adds	r4, #1
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab8:	4824      	ldr	r0, [pc, #144]	@ (8003b4c <_svfiprintf_r+0x1e8>)
 8003aba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003abe:	2206      	movs	r2, #6
 8003ac0:	f7fc fb86 	bl	80001d0 <memchr>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d036      	beq.n	8003b36 <_svfiprintf_r+0x1d2>
 8003ac8:	4b21      	ldr	r3, [pc, #132]	@ (8003b50 <_svfiprintf_r+0x1ec>)
 8003aca:	bb1b      	cbnz	r3, 8003b14 <_svfiprintf_r+0x1b0>
 8003acc:	9b03      	ldr	r3, [sp, #12]
 8003ace:	3307      	adds	r3, #7
 8003ad0:	f023 0307 	bic.w	r3, r3, #7
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	9303      	str	r3, [sp, #12]
 8003ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ada:	4433      	add	r3, r6
 8003adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ade:	e76a      	b.n	80039b6 <_svfiprintf_r+0x52>
 8003ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	e7a8      	b.n	8003a3c <_svfiprintf_r+0xd8>
 8003aea:	2300      	movs	r3, #0
 8003aec:	3401      	adds	r4, #1
 8003aee:	9305      	str	r3, [sp, #20]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f04f 0c0a 	mov.w	ip, #10
 8003af6:	4620      	mov	r0, r4
 8003af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003afc:	3a30      	subs	r2, #48	@ 0x30
 8003afe:	2a09      	cmp	r2, #9
 8003b00:	d903      	bls.n	8003b0a <_svfiprintf_r+0x1a6>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0c6      	beq.n	8003a94 <_svfiprintf_r+0x130>
 8003b06:	9105      	str	r1, [sp, #20]
 8003b08:	e7c4      	b.n	8003a94 <_svfiprintf_r+0x130>
 8003b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b0e:	4604      	mov	r4, r0
 8003b10:	2301      	movs	r3, #1
 8003b12:	e7f0      	b.n	8003af6 <_svfiprintf_r+0x192>
 8003b14:	ab03      	add	r3, sp, #12
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	462a      	mov	r2, r5
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <_svfiprintf_r+0x1f0>)
 8003b1c:	a904      	add	r1, sp, #16
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f3af 8000 	nop.w
 8003b24:	1c42      	adds	r2, r0, #1
 8003b26:	4606      	mov	r6, r0
 8003b28:	d1d6      	bne.n	8003ad8 <_svfiprintf_r+0x174>
 8003b2a:	89ab      	ldrh	r3, [r5, #12]
 8003b2c:	065b      	lsls	r3, r3, #25
 8003b2e:	f53f af2d 	bmi.w	800398c <_svfiprintf_r+0x28>
 8003b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b34:	e72c      	b.n	8003990 <_svfiprintf_r+0x2c>
 8003b36:	ab03      	add	r3, sp, #12
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	462a      	mov	r2, r5
 8003b3c:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <_svfiprintf_r+0x1f0>)
 8003b3e:	a904      	add	r1, sp, #16
 8003b40:	4638      	mov	r0, r7
 8003b42:	f000 f879 	bl	8003c38 <_printf_i>
 8003b46:	e7ed      	b.n	8003b24 <_svfiprintf_r+0x1c0>
 8003b48:	08003f90 	.word	0x08003f90
 8003b4c:	08003f9a 	.word	0x08003f9a
 8003b50:	00000000 	.word	0x00000000
 8003b54:	080038ad 	.word	0x080038ad
 8003b58:	08003f96 	.word	0x08003f96

08003b5c <_printf_common>:
 8003b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	4616      	mov	r6, r2
 8003b62:	4698      	mov	r8, r3
 8003b64:	688a      	ldr	r2, [r1, #8]
 8003b66:	690b      	ldr	r3, [r1, #16]
 8003b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bfb8      	it	lt
 8003b70:	4613      	movlt	r3, r2
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b78:	4607      	mov	r7, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	b10a      	cbz	r2, 8003b82 <_printf_common+0x26>
 8003b7e:	3301      	adds	r3, #1
 8003b80:	6033      	str	r3, [r6, #0]
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	0699      	lsls	r1, r3, #26
 8003b86:	bf42      	ittt	mi
 8003b88:	6833      	ldrmi	r3, [r6, #0]
 8003b8a:	3302      	addmi	r3, #2
 8003b8c:	6033      	strmi	r3, [r6, #0]
 8003b8e:	6825      	ldr	r5, [r4, #0]
 8003b90:	f015 0506 	ands.w	r5, r5, #6
 8003b94:	d106      	bne.n	8003ba4 <_printf_common+0x48>
 8003b96:	f104 0a19 	add.w	sl, r4, #25
 8003b9a:	68e3      	ldr	r3, [r4, #12]
 8003b9c:	6832      	ldr	r2, [r6, #0]
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	42ab      	cmp	r3, r5
 8003ba2:	dc26      	bgt.n	8003bf2 <_printf_common+0x96>
 8003ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	3b00      	subs	r3, #0
 8003bac:	bf18      	it	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	0692      	lsls	r2, r2, #26
 8003bb2:	d42b      	bmi.n	8003c0c <_printf_common+0xb0>
 8003bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bb8:	4641      	mov	r1, r8
 8003bba:	4638      	mov	r0, r7
 8003bbc:	47c8      	blx	r9
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d01e      	beq.n	8003c00 <_printf_common+0xa4>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	6922      	ldr	r2, [r4, #16]
 8003bc6:	f003 0306 	and.w	r3, r3, #6
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf02      	ittt	eq
 8003bce:	68e5      	ldreq	r5, [r4, #12]
 8003bd0:	6833      	ldreq	r3, [r6, #0]
 8003bd2:	1aed      	subeq	r5, r5, r3
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	bf0c      	ite	eq
 8003bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bdc:	2500      	movne	r5, #0
 8003bde:	4293      	cmp	r3, r2
 8003be0:	bfc4      	itt	gt
 8003be2:	1a9b      	subgt	r3, r3, r2
 8003be4:	18ed      	addgt	r5, r5, r3
 8003be6:	2600      	movs	r6, #0
 8003be8:	341a      	adds	r4, #26
 8003bea:	42b5      	cmp	r5, r6
 8003bec:	d11a      	bne.n	8003c24 <_printf_common+0xc8>
 8003bee:	2000      	movs	r0, #0
 8003bf0:	e008      	b.n	8003c04 <_printf_common+0xa8>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4652      	mov	r2, sl
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	47c8      	blx	r9
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d103      	bne.n	8003c08 <_printf_common+0xac>
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	3501      	adds	r5, #1
 8003c0a:	e7c6      	b.n	8003b9a <_printf_common+0x3e>
 8003c0c:	18e1      	adds	r1, r4, r3
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	2030      	movs	r0, #48	@ 0x30
 8003c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c16:	4422      	add	r2, r4
 8003c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c20:	3302      	adds	r3, #2
 8003c22:	e7c7      	b.n	8003bb4 <_printf_common+0x58>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4622      	mov	r2, r4
 8003c28:	4641      	mov	r1, r8
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	47c8      	blx	r9
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d0e6      	beq.n	8003c00 <_printf_common+0xa4>
 8003c32:	3601      	adds	r6, #1
 8003c34:	e7d9      	b.n	8003bea <_printf_common+0x8e>
	...

08003c38 <_printf_i>:
 8003c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	7e0f      	ldrb	r7, [r1, #24]
 8003c3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c40:	2f78      	cmp	r7, #120	@ 0x78
 8003c42:	4691      	mov	r9, r2
 8003c44:	4680      	mov	r8, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	469a      	mov	sl, r3
 8003c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c4e:	d807      	bhi.n	8003c60 <_printf_i+0x28>
 8003c50:	2f62      	cmp	r7, #98	@ 0x62
 8003c52:	d80a      	bhi.n	8003c6a <_printf_i+0x32>
 8003c54:	2f00      	cmp	r7, #0
 8003c56:	f000 80d2 	beq.w	8003dfe <_printf_i+0x1c6>
 8003c5a:	2f58      	cmp	r7, #88	@ 0x58
 8003c5c:	f000 80b9 	beq.w	8003dd2 <_printf_i+0x19a>
 8003c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c68:	e03a      	b.n	8003ce0 <_printf_i+0xa8>
 8003c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c6e:	2b15      	cmp	r3, #21
 8003c70:	d8f6      	bhi.n	8003c60 <_printf_i+0x28>
 8003c72:	a101      	add	r1, pc, #4	@ (adr r1, 8003c78 <_printf_i+0x40>)
 8003c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c78:	08003cd1 	.word	0x08003cd1
 8003c7c:	08003ce5 	.word	0x08003ce5
 8003c80:	08003c61 	.word	0x08003c61
 8003c84:	08003c61 	.word	0x08003c61
 8003c88:	08003c61 	.word	0x08003c61
 8003c8c:	08003c61 	.word	0x08003c61
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003c61 	.word	0x08003c61
 8003c98:	08003c61 	.word	0x08003c61
 8003c9c:	08003c61 	.word	0x08003c61
 8003ca0:	08003c61 	.word	0x08003c61
 8003ca4:	08003de5 	.word	0x08003de5
 8003ca8:	08003d0f 	.word	0x08003d0f
 8003cac:	08003d9f 	.word	0x08003d9f
 8003cb0:	08003c61 	.word	0x08003c61
 8003cb4:	08003c61 	.word	0x08003c61
 8003cb8:	08003e07 	.word	0x08003e07
 8003cbc:	08003c61 	.word	0x08003c61
 8003cc0:	08003d0f 	.word	0x08003d0f
 8003cc4:	08003c61 	.word	0x08003c61
 8003cc8:	08003c61 	.word	0x08003c61
 8003ccc:	08003da7 	.word	0x08003da7
 8003cd0:	6833      	ldr	r3, [r6, #0]
 8003cd2:	1d1a      	adds	r2, r3, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6032      	str	r2, [r6, #0]
 8003cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e09d      	b.n	8003e20 <_printf_i+0x1e8>
 8003ce4:	6833      	ldr	r3, [r6, #0]
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	1d19      	adds	r1, r3, #4
 8003cea:	6031      	str	r1, [r6, #0]
 8003cec:	0606      	lsls	r6, r0, #24
 8003cee:	d501      	bpl.n	8003cf4 <_printf_i+0xbc>
 8003cf0:	681d      	ldr	r5, [r3, #0]
 8003cf2:	e003      	b.n	8003cfc <_printf_i+0xc4>
 8003cf4:	0645      	lsls	r5, r0, #25
 8003cf6:	d5fb      	bpl.n	8003cf0 <_printf_i+0xb8>
 8003cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	da03      	bge.n	8003d08 <_printf_i+0xd0>
 8003d00:	232d      	movs	r3, #45	@ 0x2d
 8003d02:	426d      	negs	r5, r5
 8003d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d08:	4859      	ldr	r0, [pc, #356]	@ (8003e70 <_printf_i+0x238>)
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	e011      	b.n	8003d32 <_printf_i+0xfa>
 8003d0e:	6821      	ldr	r1, [r4, #0]
 8003d10:	6833      	ldr	r3, [r6, #0]
 8003d12:	0608      	lsls	r0, r1, #24
 8003d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d18:	d402      	bmi.n	8003d20 <_printf_i+0xe8>
 8003d1a:	0649      	lsls	r1, r1, #25
 8003d1c:	bf48      	it	mi
 8003d1e:	b2ad      	uxthmi	r5, r5
 8003d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d22:	4853      	ldr	r0, [pc, #332]	@ (8003e70 <_printf_i+0x238>)
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	bf14      	ite	ne
 8003d28:	230a      	movne	r3, #10
 8003d2a:	2308      	moveq	r3, #8
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d32:	6866      	ldr	r6, [r4, #4]
 8003d34:	60a6      	str	r6, [r4, #8]
 8003d36:	2e00      	cmp	r6, #0
 8003d38:	bfa2      	ittt	ge
 8003d3a:	6821      	ldrge	r1, [r4, #0]
 8003d3c:	f021 0104 	bicge.w	r1, r1, #4
 8003d40:	6021      	strge	r1, [r4, #0]
 8003d42:	b90d      	cbnz	r5, 8003d48 <_printf_i+0x110>
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	d04b      	beq.n	8003de0 <_printf_i+0x1a8>
 8003d48:	4616      	mov	r6, r2
 8003d4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d4e:	fb03 5711 	mls	r7, r3, r1, r5
 8003d52:	5dc7      	ldrb	r7, [r0, r7]
 8003d54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d58:	462f      	mov	r7, r5
 8003d5a:	42bb      	cmp	r3, r7
 8003d5c:	460d      	mov	r5, r1
 8003d5e:	d9f4      	bls.n	8003d4a <_printf_i+0x112>
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d10b      	bne.n	8003d7c <_printf_i+0x144>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	07df      	lsls	r7, r3, #31
 8003d68:	d508      	bpl.n	8003d7c <_printf_i+0x144>
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	6861      	ldr	r1, [r4, #4]
 8003d6e:	4299      	cmp	r1, r3
 8003d70:	bfde      	ittt	le
 8003d72:	2330      	movle	r3, #48	@ 0x30
 8003d74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003d7c:	1b92      	subs	r2, r2, r6
 8003d7e:	6122      	str	r2, [r4, #16]
 8003d80:	f8cd a000 	str.w	sl, [sp]
 8003d84:	464b      	mov	r3, r9
 8003d86:	aa03      	add	r2, sp, #12
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f7ff fee6 	bl	8003b5c <_printf_common>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d14a      	bne.n	8003e2a <_printf_i+0x1f2>
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d98:	b004      	add	sp, #16
 8003d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f043 0320 	orr.w	r3, r3, #32
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	4833      	ldr	r0, [pc, #204]	@ (8003e74 <_printf_i+0x23c>)
 8003da8:	2778      	movs	r7, #120	@ 0x78
 8003daa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	6831      	ldr	r1, [r6, #0]
 8003db2:	061f      	lsls	r7, r3, #24
 8003db4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003db8:	d402      	bmi.n	8003dc0 <_printf_i+0x188>
 8003dba:	065f      	lsls	r7, r3, #25
 8003dbc:	bf48      	it	mi
 8003dbe:	b2ad      	uxthmi	r5, r5
 8003dc0:	6031      	str	r1, [r6, #0]
 8003dc2:	07d9      	lsls	r1, r3, #31
 8003dc4:	bf44      	itt	mi
 8003dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8003dca:	6023      	strmi	r3, [r4, #0]
 8003dcc:	b11d      	cbz	r5, 8003dd6 <_printf_i+0x19e>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	e7ac      	b.n	8003d2c <_printf_i+0xf4>
 8003dd2:	4827      	ldr	r0, [pc, #156]	@ (8003e70 <_printf_i+0x238>)
 8003dd4:	e7e9      	b.n	8003daa <_printf_i+0x172>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f023 0320 	bic.w	r3, r3, #32
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	e7f6      	b.n	8003dce <_printf_i+0x196>
 8003de0:	4616      	mov	r6, r2
 8003de2:	e7bd      	b.n	8003d60 <_printf_i+0x128>
 8003de4:	6833      	ldr	r3, [r6, #0]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	6961      	ldr	r1, [r4, #20]
 8003dea:	1d18      	adds	r0, r3, #4
 8003dec:	6030      	str	r0, [r6, #0]
 8003dee:	062e      	lsls	r6, r5, #24
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	d501      	bpl.n	8003df8 <_printf_i+0x1c0>
 8003df4:	6019      	str	r1, [r3, #0]
 8003df6:	e002      	b.n	8003dfe <_printf_i+0x1c6>
 8003df8:	0668      	lsls	r0, r5, #25
 8003dfa:	d5fb      	bpl.n	8003df4 <_printf_i+0x1bc>
 8003dfc:	8019      	strh	r1, [r3, #0]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6123      	str	r3, [r4, #16]
 8003e02:	4616      	mov	r6, r2
 8003e04:	e7bc      	b.n	8003d80 <_printf_i+0x148>
 8003e06:	6833      	ldr	r3, [r6, #0]
 8003e08:	1d1a      	adds	r2, r3, #4
 8003e0a:	6032      	str	r2, [r6, #0]
 8003e0c:	681e      	ldr	r6, [r3, #0]
 8003e0e:	6862      	ldr	r2, [r4, #4]
 8003e10:	2100      	movs	r1, #0
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7fc f9dc 	bl	80001d0 <memchr>
 8003e18:	b108      	cbz	r0, 8003e1e <_printf_i+0x1e6>
 8003e1a:	1b80      	subs	r0, r0, r6
 8003e1c:	6060      	str	r0, [r4, #4]
 8003e1e:	6863      	ldr	r3, [r4, #4]
 8003e20:	6123      	str	r3, [r4, #16]
 8003e22:	2300      	movs	r3, #0
 8003e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e28:	e7aa      	b.n	8003d80 <_printf_i+0x148>
 8003e2a:	6923      	ldr	r3, [r4, #16]
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4640      	mov	r0, r8
 8003e32:	47d0      	blx	sl
 8003e34:	3001      	adds	r0, #1
 8003e36:	d0ad      	beq.n	8003d94 <_printf_i+0x15c>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	079b      	lsls	r3, r3, #30
 8003e3c:	d413      	bmi.n	8003e66 <_printf_i+0x22e>
 8003e3e:	68e0      	ldr	r0, [r4, #12]
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	4298      	cmp	r0, r3
 8003e44:	bfb8      	it	lt
 8003e46:	4618      	movlt	r0, r3
 8003e48:	e7a6      	b.n	8003d98 <_printf_i+0x160>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4632      	mov	r2, r6
 8003e4e:	4649      	mov	r1, r9
 8003e50:	4640      	mov	r0, r8
 8003e52:	47d0      	blx	sl
 8003e54:	3001      	adds	r0, #1
 8003e56:	d09d      	beq.n	8003d94 <_printf_i+0x15c>
 8003e58:	3501      	adds	r5, #1
 8003e5a:	68e3      	ldr	r3, [r4, #12]
 8003e5c:	9903      	ldr	r1, [sp, #12]
 8003e5e:	1a5b      	subs	r3, r3, r1
 8003e60:	42ab      	cmp	r3, r5
 8003e62:	dcf2      	bgt.n	8003e4a <_printf_i+0x212>
 8003e64:	e7eb      	b.n	8003e3e <_printf_i+0x206>
 8003e66:	2500      	movs	r5, #0
 8003e68:	f104 0619 	add.w	r6, r4, #25
 8003e6c:	e7f5      	b.n	8003e5a <_printf_i+0x222>
 8003e6e:	bf00      	nop
 8003e70:	08003fa1 	.word	0x08003fa1
 8003e74:	08003fb2 	.word	0x08003fb2

08003e78 <memmove>:
 8003e78:	4288      	cmp	r0, r1
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	eb01 0402 	add.w	r4, r1, r2
 8003e80:	d902      	bls.n	8003e88 <memmove+0x10>
 8003e82:	4284      	cmp	r4, r0
 8003e84:	4623      	mov	r3, r4
 8003e86:	d807      	bhi.n	8003e98 <memmove+0x20>
 8003e88:	1e43      	subs	r3, r0, #1
 8003e8a:	42a1      	cmp	r1, r4
 8003e8c:	d008      	beq.n	8003ea0 <memmove+0x28>
 8003e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e96:	e7f8      	b.n	8003e8a <memmove+0x12>
 8003e98:	4402      	add	r2, r0
 8003e9a:	4601      	mov	r1, r0
 8003e9c:	428a      	cmp	r2, r1
 8003e9e:	d100      	bne.n	8003ea2 <memmove+0x2a>
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eaa:	e7f7      	b.n	8003e9c <memmove+0x24>

08003eac <_realloc_r>:
 8003eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	4615      	mov	r5, r2
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	b921      	cbnz	r1, 8003ec2 <_realloc_r+0x16>
 8003eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	f7ff bb99 	b.w	80035f4 <_malloc_r>
 8003ec2:	b92a      	cbnz	r2, 8003ed0 <_realloc_r+0x24>
 8003ec4:	f7ff fca8 	bl	8003818 <_free_r>
 8003ec8:	2400      	movs	r4, #0
 8003eca:	4620      	mov	r0, r4
 8003ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed0:	f000 f81a 	bl	8003f08 <_malloc_usable_size_r>
 8003ed4:	4285      	cmp	r5, r0
 8003ed6:	4606      	mov	r6, r0
 8003ed8:	d802      	bhi.n	8003ee0 <_realloc_r+0x34>
 8003eda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ede:	d8f4      	bhi.n	8003eca <_realloc_r+0x1e>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f7ff fb86 	bl	80035f4 <_malloc_r>
 8003ee8:	4607      	mov	r7, r0
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0ec      	beq.n	8003ec8 <_realloc_r+0x1c>
 8003eee:	42b5      	cmp	r5, r6
 8003ef0:	462a      	mov	r2, r5
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	bf28      	it	cs
 8003ef6:	4632      	movcs	r2, r6
 8003ef8:	f7ff fc80 	bl	80037fc <memcpy>
 8003efc:	4621      	mov	r1, r4
 8003efe:	4640      	mov	r0, r8
 8003f00:	f7ff fc8a 	bl	8003818 <_free_r>
 8003f04:	463c      	mov	r4, r7
 8003f06:	e7e0      	b.n	8003eca <_realloc_r+0x1e>

08003f08 <_malloc_usable_size_r>:
 8003f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f0c:	1f18      	subs	r0, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bfbc      	itt	lt
 8003f12:	580b      	ldrlt	r3, [r1, r0]
 8003f14:	18c0      	addlt	r0, r0, r3
 8003f16:	4770      	bx	lr

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
